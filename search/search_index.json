{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Copilot & Co Tutorial \u00b6 Welcome \u2013 Bienvenue \ud83d\udc4b This tutorial aims to present several use cases of AI coding assistants powered by generative models. It also seeks to raise awareness of the benefits of these tools\u2014such as improved productivity and enhanced development practices\u2014while highlighting their limitations. \ud83d\udc49 Read in English : in progress Ce tutoriel a pour objectif de pr\u00e9senter quelques cas d'usage des assistants de code bas\u00e9s sur des mod\u00e8les d'IA g\u00e9n\u00e9ratives. Il vise \u00e9galement \u00e0 sensibiliser aux avantages de ces outils, tels que l'am\u00e9lioration de la productivit\u00e9 et l'optimisation des pratiques de d\u00e9veloppement, tout en mettant en lumi\u00e8re leurs limites. \ud83d\udc49 Lire en fran\u00e7ais","title":"Copilot &amp; Co Tutorial"},{"location":"#copilot-co-tutorial","text":"Welcome \u2013 Bienvenue \ud83d\udc4b This tutorial aims to present several use cases of AI coding assistants powered by generative models. It also seeks to raise awareness of the benefits of these tools\u2014such as improved productivity and enhanced development practices\u2014while highlighting their limitations. \ud83d\udc49 Read in English : in progress Ce tutoriel a pour objectif de pr\u00e9senter quelques cas d'usage des assistants de code bas\u00e9s sur des mod\u00e8les d'IA g\u00e9n\u00e9ratives. Il vise \u00e9galement \u00e0 sensibiliser aux avantages de ces outils, tels que l'am\u00e9lioration de la productivit\u00e9 et l'optimisation des pratiques de d\u00e9veloppement, tout en mettant en lumi\u00e8re leurs limites. \ud83d\udc49 Lire en fran\u00e7ais","title":"Copilot &amp; Co Tutorial"},{"location":"en/","text":"Copilot & Co Tutorial \u00b6 What About AI Coding Assistants Based on Generative AI? \u00b6 Disclaimer : This tutorial introduces a few use cases of AI coding assistants powered by generative AI. It also highlights their benefits, such as boosting productivity and improving development practices, while pointing out their limitations. GitHub Copilot, originally designed for students using the GitHub Education offer , is used here as an example. However, you can follow this tutorial with other AI coding assistants like Codeium , Cursor , Supermaven or Tabnine , which offer similar features. We\u2019ll use the term AI coding assistant throughout the tutorial. In this tutorial, you will learn how to: 1. Installation the GitHub Copilot AI coding assistant 2. Getting Started with the AI Coding Assistant 3. Assisting with the Implementation of New Business Rules in a Simple Legacy Project 4. Assisting with Working on Complex Legacy Project You will also find some Useful Resources that were consulted while writing this tutorial. This tutorial comes with a form. Feel free to fill out this form as you go through the tutorial. To get started, go to the Installation if you need to set up GitHub Copilot in your favorite IDE. If it\u2019s already installed, you can begin directly with Getting Started with the assistant using your preferred AI coding assistant. Want to Discuss? \u00b6 For questions or feedback, join the conversation on the GitHub Issues page . To suggest changes or contribute, feel free to open a pull request . License \u00b6 This document is licensed under CC BY-NC-SA: Creative Commons Attribution \u2013 NonCommercial \u2013 ShareAlike Learn more about Creative Commons licenses","title":"Home"},{"location":"en/#copilot-co-tutorial","text":"","title":"Copilot &amp; Co Tutorial"},{"location":"en/#what-about-ai-coding-assistants-based-on-generative-ai","text":"Disclaimer : This tutorial introduces a few use cases of AI coding assistants powered by generative AI. It also highlights their benefits, such as boosting productivity and improving development practices, while pointing out their limitations. GitHub Copilot, originally designed for students using the GitHub Education offer , is used here as an example. However, you can follow this tutorial with other AI coding assistants like Codeium , Cursor , Supermaven or Tabnine , which offer similar features. We\u2019ll use the term AI coding assistant throughout the tutorial. In this tutorial, you will learn how to: 1. Installation the GitHub Copilot AI coding assistant 2. Getting Started with the AI Coding Assistant 3. Assisting with the Implementation of New Business Rules in a Simple Legacy Project 4. Assisting with Working on Complex Legacy Project You will also find some Useful Resources that were consulted while writing this tutorial. This tutorial comes with a form. Feel free to fill out this form as you go through the tutorial. To get started, go to the Installation if you need to set up GitHub Copilot in your favorite IDE. If it\u2019s already installed, you can begin directly with Getting Started with the assistant using your preferred AI coding assistant.","title":"What About AI Coding Assistants Based on Generative AI?"},{"location":"en/#want-to-discuss","text":"For questions or feedback, join the conversation on the GitHub Issues page . To suggest changes or contribute, feel free to open a pull request .","title":"Want to Discuss?"},{"location":"en/#license","text":"This document is licensed under CC BY-NC-SA: Creative Commons Attribution \u2013 NonCommercial \u2013 ShareAlike Learn more about Creative Commons licenses","title":"License"},{"location":"en/1_Installation/","text":"1. Installing the GitHub Copilot AI Coding Assistant (in Your Favorite IDE) \u00b6 To use GitHub Copilot , often referred to simply as Copilot , you need a GitHub account . GitHub Copilot is a paid service, but students and teachers can use it for free through GitHub Education . Copilot is a plugin/extension that installs directly in your favorite IDE: In VS Code , install it via the Extensions tab ( Ctrl+Shift+X ) In JetBrains IDEs , go to File \u2192 Settings \u2192 Plugins In Eclipse , use the Eclipse Marketplace ( Help \u2192 Eclipse Marketplace ) to install Copilot4eclipse . Once installed, you\u2019ll be asked to sign in with your GitHub account. After logging in, Copilot will be automatically activated. Code suggestions will start appearing in your IDE, and you\u2019ll also have access to a chat interface. For more detailed instructions: For JetBrains , Visual Studio , etc.: See the official guide: Installing the GitHub Copilot extension in your environment Choose the tab that matches your IDE. For Eclipse: Visit the installation page for Copilot4Eclipse and/or watch the beginning of this video . Since Copilot and VS Code are both developed by GitHub (owned by Microsoft), VS Code offers the best user experience for Copilot. That said, Copilot also works very well with JetBrains IDEs. The official GitHub Copilot documentation is available on GitHub Docs . Now go to the next section: 2. Getting Started with the AI Coding Assistant , or return to the Home page","title":"Installation"},{"location":"en/1_Installation/#1-installing-the-github-copilot-ai-coding-assistant-in-your-favorite-ide","text":"To use GitHub Copilot , often referred to simply as Copilot , you need a GitHub account . GitHub Copilot is a paid service, but students and teachers can use it for free through GitHub Education . Copilot is a plugin/extension that installs directly in your favorite IDE: In VS Code , install it via the Extensions tab ( Ctrl+Shift+X ) In JetBrains IDEs , go to File \u2192 Settings \u2192 Plugins In Eclipse , use the Eclipse Marketplace ( Help \u2192 Eclipse Marketplace ) to install Copilot4eclipse . Once installed, you\u2019ll be asked to sign in with your GitHub account. After logging in, Copilot will be automatically activated. Code suggestions will start appearing in your IDE, and you\u2019ll also have access to a chat interface. For more detailed instructions: For JetBrains , Visual Studio , etc.: See the official guide: Installing the GitHub Copilot extension in your environment Choose the tab that matches your IDE. For Eclipse: Visit the installation page for Copilot4Eclipse and/or watch the beginning of this video . Since Copilot and VS Code are both developed by GitHub (owned by Microsoft), VS Code offers the best user experience for Copilot. That said, Copilot also works very well with JetBrains IDEs. The official GitHub Copilot documentation is available on GitHub Docs . Now go to the next section: 2. Getting Started with the AI Coding Assistant , or return to the Home page","title":"1. Installing the GitHub Copilot AI Coding Assistant (in Your Favorite IDE)"},{"location":"en/2_GettingStarted/","text":"2. Getting Started with an AI Coding Assistant: First Steps with a Simple Example \u00b6 A simple example is the best way to start using a new tool. In your favorite IDE, create a Java project named maths , and add a Calculator class with the following implementation: public class Calculator { public int add ( int a , int b ) { return a + b ; } public int subtract ( int a , int b ) { return a - b ; } public int multiply ( int a , int b ) { return a * b ; } public int divide ( int a , int b ) { if ( b == 0 ) { throw new IllegalArgumentException ( \"Cannot divide by zero\" ); } return a / b ; } } Generating Code Suggestions from Comments (Describing Intended Behavior) \u00b6 Place your cursor at the end of the class, just before the closing brace } . Write a comment that expresses the intended behavior you want to implement, for example: // Method to calculate the square root Then press Enter and watch what happens\u2026 The AI coding assistant will suggest an implementation for the behavior described in your comment. If the suggestion fits your needs and you want to insert the entire suggested code , press the Tab key . Now try a new comment for a different method, for example: // Method to calculate the logarithm Press Enter to view the code generated by the assistant. You don\u2019t have to accept the entire suggestion. You can insert the code partially : Press Ctrl+Right Arrow to insert one word at a time . Press Ctrl+Alt+Right Arrow to insert one line at a time . Place the cursor on a new line and wait. Even without a comment (i.e., no explicit request), the assistant may suggest new methods to enhance your class. It\u2019s up to you to decide whether or not to include the suggested code based on your needs. Key Takeaways \u00b6 For each task, start by writing a comment that describes what you want to do. Then let the AI coding assistant suggest an implementation. Remember, it's a support tool\u2014you should always review, understand, and, if needed, adjust the code it generates. If the suggestion doesn\u2019t fit your needs, just press Enter and write your own code. Generating Unit Test Code \u00b6 Use your IDE to create a CalculatorTest class in the appropriate location of your project. This class will contain the unit tests for the Calculator class. Open the new class (make sure it\u2019s empty for now) and wait for your assistant\u2019s suggestion. The AI coding assistant should propose a complete set of unit tests for each method in the Calculator class. Press Tab to insert the suggested code. Run the tests to make sure they all pass, and check the code coverage. If the assistant doesn't suggest anything automatically, you can use the same approach as before: write a comment describing the behavior you want to test. For example, to create a test for division by zero: Write the comment: // test divide by zero The assistant will likely start by suggesting the @Test annotation. Confirm it with Tab , then press Enter to let it continue generating the method. The assistant will then suggest an implementation of the test method, which you can either accept by pressing Tab , or dismiss by pressing Enter allowing you to take over and continue manually in your IDE. Explaining How Code Works ( /explain ) \u00b6 In the Calculator class, select the entire divide method . With the code highlighted, open your assistant\u2019s chat panel . To open Copilot Chat, right-click and look for something like (GitHub) Copilot , then choose Open Chat Panel . The chat window should open on the right side of your IDE . In some IDEs, you can also use Inline Chat, which appears directly in the code editor. For this tutorial, we recommend using the standard side chat. The assistant chat works like a typical AI chat. Once the code is selected, just ask a question like: How does this code work? The assistant will then provide an explanation of the selected code. In software development, developers often ask: How does this code work? To save time, Copilot offers a shortcut for this frequent question: the /explain command. Make sure the divide method is still selected, then type /explain in the chat and press Enter . As before, Copilot will return a detailed explanation of what the code does. A Few Words About Prompts \u00b6 It\u2019s now time to introduce the concept of a prompt. In the field of artificial intelligence (AI), a prompt is an instruction or a set of input data that you give to an AI system to generate a response. In other words, it\u2019s how you interact or communicate with your AI coding assistant. Prompts can be short phrases, questions, or keywords. The relevance and quality of the assistant\u2019s responses (or any AI chatbot) depend directly on the quality of your prompts, that is, how clear and precise your instructions are. Copilot Slash Commands: Prompting Support for Common Developer Tasks \u00b6 \u2192 Copilot offers shortcuts known as slash commands , which help you perform common and repetitive software development tasks. By typing a forward slash ( / ) in the chat, Copilot suggests a list of available commands to interact with it more efficiently. We\u2019ve already used /explain , and we\u2019ll explore more slash commands throughout this tutorial. The table below shows the current list of slash commands available in Copilot: Commande slash Description /explain Explain how the code works /feedback Steps to provide feedback /fix Fix problems and compile errors /help Get help on how to use Copilot chat /tests Generate unit tests /doc Document current selection of code /simplify Simplify the code \u2192 By default, Copilot Chat refers to the open file or the selected code . However, you can explicitly specify which file you want to reference in the chat. To do so, right-click on the desired file, select GitHub Copilot , then click on Reference File in Chat . The file will then be explicitly linked to the chat. Disclaimer : In the examples you\u2019ll explore later in this tutorial, slash commands are often used as concise but precise prompts to interact with the assistant. If you're using an AI coding assistant other than Copilot, your tool likely offers an equivalent to Copilot\u2019s slash commands. If it doesn\u2019t, whenever a slash command is used in this tutorial, simply write out the full sentence described in the table above which explains the assistant\u2019s task in detail. Or try teaching your favorite AI assistant that shortcut yourself \ud83d\ude0a Making Code Easier to Fix, Refactor, and Improve \u00b6 Fixing Issues: /fix \u00b6 If the active file contains an error, you can use the /fix slash command to ask Copilot how to correct it. For example, go to the CalculatorTest class and delete all the import statements. This will cause compilation errors in the file. Open the chat and type the /fix command. The assistant will suggest how to resolve the compilation errors. Before moving on, restore the import statements and make sure the code compiles and all tests pass. Reminder: /fix is a shortcut for the full prompt \"Fix problems and compile errors.\" Refactoring a Piece of Code \u00b6 Go back to the Calculator class and select (highlight) the entire divide method. This will be the code to refactor. While reviewing this code, you notice a code smell related to the parameter names . Ask the assistant for help by typing in the chat: use better names for parameters . The assistant will suggest a revised version of the method with clearer and more meaningful parameter names addressing the issue as expected. Move your cursor to the top-right corner of the code block suggested by the assistant . You should see two icons appear (the order may vary depending on your IDE). Typically: One icon lets you copy the code. The other (with an arrow) lets you insert the code directly into your editor. Click the arrow icon to insert the new code directly into your editor . You should now see that the originally selected code has been replaced in the Calculator class with the assistant\u2019s version. As with any refactoring, always re-run your tests to confirm they still pass and that the behavior hasn\u2019t changed. Earlier, we saw that writing a comment directly in the code to describe the desired behavior is a practical way to prompt the AI coding assistant and receive suggestions in the right place . However, once the suggestion has been accepted, the comment often remains in the code, as is currently the case in the Calculator class for the squareRoot and logarithm methods generated earlier. But keeping comments that simply explain what the code does is considered a code smell , especially when the method names are already self-explanatory. A quick refactoring can help clean this up. To remove these comments, select both methods (including the comments) and ask the assistant to remove them by typing in the chat: remove comments Then click the arrow icon to accept the assistant\u2019s suggestion and insert the cleaned-up version directly into the source file, replacing the selected code. Note: You could also have selected the entire class. This step simply shows that the assistant\u2019s refactoring isn\u2019t limited to a single method\u2014it can be applied to a larger block of code. \ud83d\ude09 And as with any refactoring, don\u2019t forget to re-run your tests at the end. Asking How to Improve Code Quality \u00b6 Of course, you can always use the assistant chat like any standard AI chat by asking various questions, more or less specific, to help improve your code. For example, type a question like: how would you improve this code? For now, simply explore the conversation and see what your AI coding assistant suggests. Its first response may satisfy your curiosity. But if you\u2019re looking for a more detailed answer or a suggestion focused on a specific goal, feel free to keep the conversation going to refine its responses. During the previous prompt about code quality, your assistant may have suggested that \"Using Javadoc comments to document public methods\" is, in its view, a quality criterion . Easily Generate Documentation: /doc \u00b6 Javadoc comments are different from regular inline comments in code. To better understand (and be convinced of) this difference, you can ask your AI coding assistant the following question: What is the difference between Javadoc comments and regular comments? Your assistant will likely explain that Javadoc comments are used to generate API documentation. For example, the Javadoc for the Java SDK (available on Oracle\u2019s website: https://docs.oracle.com ) is generated from the Javadoc comments written in the SDK\u2019s Java classes which you use in your own programs. So, if your Java class is intended to become an API used by other developers, then Javadoc comments are a key indicator of quality. But as every developer knows, writing documentation is often tedious. Fortunately, your AI coding assistant can help automate this task and boost your productivity using the /doc slash command. Go back to the Calculator class and type /doc in the chat (which stands for the full prompt Document current selection of code ) The AI coding assistant will then suggest a version of the class with generated Javadoc comments . Select the entire Calculator class and click the insert icon (the one with the arrow) to replace the existing code with the documented version. Before continuing, make sure to re-run your tests to confirm that everything still works. This ensures that the assistant didn\u2019t change the behavior of your code\u2014just added comments. As you interact more with the assistant, you'll probably notice that it often suggests follow-up questions related to your request. These suggestions help you refine your prompts and explore the topic in more depth. ** Exploring Topics Related to Software Development \u00b6 After using the /doc command, your AI coding assistant generated the documented code as expected. If you take a closer look at the chat, you\u2019ll probably notice that it also suggested a follow-up question to help you go further either in your actions or your understanding of documentation. Depending on your curiosity or needs, you\u2019re free to click the suggested question or simply ignore it. In this part of the tutorial, it's time to explore these follow-up questions and use them as a way to learn more about documentation in a software project . Your assistant may suggest something like: What other documentation styles can be used for Java code? If not, just type the question directly in the chat or choose the one you see. Then you can continue with: What are some best practices for writing documentation in Java? And finish with: What are some common mistakes to avoid when writing documentation in Java? For quick research, these conversations let you explore the assistant\u2019s knowledge directly inside your IDE without needing to search external resources. But Copilot Is Still Just a Software Development Assistant \u00b6 Like all language models, AI coding assistants (such as Copilot) are trained on specific datasets. It\u2019s important to remember that the assistant you\u2019re using in this tutorial, integrated into your IDE, is designed specifically for software development and has been trained with knowledge related to that field. As a result, its chat is not meant to replace a more general-purpose language model like ChatGPT, even though both are based on OpenAI technology. To see this for yourself, try asking your coding assistant the following question: What is the best documentation for visiting the city of Limoges? You\u2019ll likely get a response like: I'm sorry, but I can only assist with developer-related questions. If you have any questions about programming or need help with your code, feel free to ask! This clearly shows the limits of an AI coding assistant compared to a general-purpose model. Step-by-Step Guidance for Using New Tools \u00b6 You\u2019ve just asked your AI coding assistant to generate Javadoc comments, but do you know how to generate the Javadoc for your project , and where or how to view it? No worries, your AI assistant can also help you get started with this new tool ( Javadoc ). Just ask the following question in the chat: In IntelliJ, how do I generate the Javadoc for my project? (Of course, replace IntelliJ with the name of the IDE you\u2019re actually using.) \ud83d\ude09 Notes \u00b6 If you had asked a more general question, like: How do I generate the Javadoc for my project? There\u2019s a good chance (remember, LLMs are probabilistic!) that the assistant would explain how to use the javadoc command-line tool, the standard utility in the Java SDK to generate documentation. But if it doesn\u2019t, try rephrasing your question more precisely: How do I generate the Javadoc for my project using the command line? Being specific in your prompt , for example by clearly mentioning the environment (an IDE or the command line), helps the assistant tailor its answer to your context . Since the AI coding assistant can explain how to generate Javadoc in a specific IDE, you might wonder: Can it do it for you? Try asking: Could you generate the Javadoc for this project? What happens? What kind of response do you get from your assistant? Improving Copilot's Responses by Targeting Prompt Context with References (Conversation Agents) \u00b6 Earlier, we saw that Copilot offers slash commands , shortcuts that let you quickly trigger common tasks or actions . In the same spirit of simplifying prompt writing and reading, while also making the context more precise , Copilot provides another set of shortcuts called conversation agents . These include variables (using # ) and conversation participants (using @ ), which help make your interactions with the assistant smoother and more effective . Conversation Variables: The # Notation \u00b6 By default, Copilot Chat refers to the file you have open or the code you have selected. Conversation variables (using # ) allow you to narrow the scope of Copilot\u2019s answers by making the context more specific . Here are a few examples of how to use them: Referencing a file by adding a # before the filename: Reference a specific file: Where are the tests in #MyFile.java? Reference multiple files: How are these files connected #MyFile.java #MyOtherFile.java? Reference specific lines in a file: Explain this function #MyFile.java:66\u201372 Referencing a method, class, or function works the same way, just add # before the name of the item you want to refer to. Conversation Participants: The @ Notation \u00b6 To reference your entire active workspace in the IDE, you can use the @workspace conversation agent. This participant allows Copilot to take full advantage of all the information available in your currently open files, projects, and configurations, leading to more relevant suggestions. Using @workspace in a prompt helps the assistant understand the broader context of your development environment. Other participants like @terminal or @github are also available for interacting with those specific environments. To learn more about slash commands and conversation agents, see: GitHub Copilot Documentation Copilot Chat Context Now that you\u2019ve taken your first steps with the AI coding assistant, it\u2019s time to explore and apply it in real-world scenarios using existing projects some simple, some more complex.","title":"Getting Started with the AI Coding Assistant"},{"location":"en/2_GettingStarted/#2-getting-started-with-an-ai-coding-assistant-first-steps-with-a-simple-example","text":"A simple example is the best way to start using a new tool. In your favorite IDE, create a Java project named maths , and add a Calculator class with the following implementation: public class Calculator { public int add ( int a , int b ) { return a + b ; } public int subtract ( int a , int b ) { return a - b ; } public int multiply ( int a , int b ) { return a * b ; } public int divide ( int a , int b ) { if ( b == 0 ) { throw new IllegalArgumentException ( \"Cannot divide by zero\" ); } return a / b ; } }","title":"2. Getting Started with an AI Coding Assistant: First Steps with a Simple Example"},{"location":"en/2_GettingStarted/#generating-code-suggestions-from-comments-describing-intended-behavior","text":"Place your cursor at the end of the class, just before the closing brace } . Write a comment that expresses the intended behavior you want to implement, for example: // Method to calculate the square root Then press Enter and watch what happens\u2026 The AI coding assistant will suggest an implementation for the behavior described in your comment. If the suggestion fits your needs and you want to insert the entire suggested code , press the Tab key . Now try a new comment for a different method, for example: // Method to calculate the logarithm Press Enter to view the code generated by the assistant. You don\u2019t have to accept the entire suggestion. You can insert the code partially : Press Ctrl+Right Arrow to insert one word at a time . Press Ctrl+Alt+Right Arrow to insert one line at a time . Place the cursor on a new line and wait. Even without a comment (i.e., no explicit request), the assistant may suggest new methods to enhance your class. It\u2019s up to you to decide whether or not to include the suggested code based on your needs.","title":"Generating Code Suggestions from Comments (Describing Intended Behavior)"},{"location":"en/2_GettingStarted/#key-takeaways","text":"For each task, start by writing a comment that describes what you want to do. Then let the AI coding assistant suggest an implementation. Remember, it's a support tool\u2014you should always review, understand, and, if needed, adjust the code it generates. If the suggestion doesn\u2019t fit your needs, just press Enter and write your own code.","title":"Key Takeaways"},{"location":"en/2_GettingStarted/#generating-unit-test-code","text":"Use your IDE to create a CalculatorTest class in the appropriate location of your project. This class will contain the unit tests for the Calculator class. Open the new class (make sure it\u2019s empty for now) and wait for your assistant\u2019s suggestion. The AI coding assistant should propose a complete set of unit tests for each method in the Calculator class. Press Tab to insert the suggested code. Run the tests to make sure they all pass, and check the code coverage. If the assistant doesn't suggest anything automatically, you can use the same approach as before: write a comment describing the behavior you want to test. For example, to create a test for division by zero: Write the comment: // test divide by zero The assistant will likely start by suggesting the @Test annotation. Confirm it with Tab , then press Enter to let it continue generating the method. The assistant will then suggest an implementation of the test method, which you can either accept by pressing Tab , or dismiss by pressing Enter allowing you to take over and continue manually in your IDE.","title":"Generating Unit Test Code"},{"location":"en/2_GettingStarted/#explaining-how-code-works-explain","text":"In the Calculator class, select the entire divide method . With the code highlighted, open your assistant\u2019s chat panel . To open Copilot Chat, right-click and look for something like (GitHub) Copilot , then choose Open Chat Panel . The chat window should open on the right side of your IDE . In some IDEs, you can also use Inline Chat, which appears directly in the code editor. For this tutorial, we recommend using the standard side chat. The assistant chat works like a typical AI chat. Once the code is selected, just ask a question like: How does this code work? The assistant will then provide an explanation of the selected code. In software development, developers often ask: How does this code work? To save time, Copilot offers a shortcut for this frequent question: the /explain command. Make sure the divide method is still selected, then type /explain in the chat and press Enter . As before, Copilot will return a detailed explanation of what the code does.","title":"Explaining How Code Works (/explain)"},{"location":"en/2_GettingStarted/#a-few-words-about-prompts","text":"It\u2019s now time to introduce the concept of a prompt. In the field of artificial intelligence (AI), a prompt is an instruction or a set of input data that you give to an AI system to generate a response. In other words, it\u2019s how you interact or communicate with your AI coding assistant. Prompts can be short phrases, questions, or keywords. The relevance and quality of the assistant\u2019s responses (or any AI chatbot) depend directly on the quality of your prompts, that is, how clear and precise your instructions are.","title":"A Few Words About Prompts"},{"location":"en/2_GettingStarted/#copilot-slash-commands-prompting-support-for-common-developer-tasks","text":"\u2192 Copilot offers shortcuts known as slash commands , which help you perform common and repetitive software development tasks. By typing a forward slash ( / ) in the chat, Copilot suggests a list of available commands to interact with it more efficiently. We\u2019ve already used /explain , and we\u2019ll explore more slash commands throughout this tutorial. The table below shows the current list of slash commands available in Copilot: Commande slash Description /explain Explain how the code works /feedback Steps to provide feedback /fix Fix problems and compile errors /help Get help on how to use Copilot chat /tests Generate unit tests /doc Document current selection of code /simplify Simplify the code \u2192 By default, Copilot Chat refers to the open file or the selected code . However, you can explicitly specify which file you want to reference in the chat. To do so, right-click on the desired file, select GitHub Copilot , then click on Reference File in Chat . The file will then be explicitly linked to the chat. Disclaimer : In the examples you\u2019ll explore later in this tutorial, slash commands are often used as concise but precise prompts to interact with the assistant. If you're using an AI coding assistant other than Copilot, your tool likely offers an equivalent to Copilot\u2019s slash commands. If it doesn\u2019t, whenever a slash command is used in this tutorial, simply write out the full sentence described in the table above which explains the assistant\u2019s task in detail. Or try teaching your favorite AI assistant that shortcut yourself \ud83d\ude0a","title":"Copilot Slash Commands: Prompting Support for Common Developer Tasks"},{"location":"en/2_GettingStarted/#making-code-easier-to-fix-refactor-and-improve","text":"","title":"Making Code Easier to Fix, Refactor, and Improve"},{"location":"en/2_GettingStarted/#fixing-issues-fix","text":"If the active file contains an error, you can use the /fix slash command to ask Copilot how to correct it. For example, go to the CalculatorTest class and delete all the import statements. This will cause compilation errors in the file. Open the chat and type the /fix command. The assistant will suggest how to resolve the compilation errors. Before moving on, restore the import statements and make sure the code compiles and all tests pass. Reminder: /fix is a shortcut for the full prompt \"Fix problems and compile errors.\"","title":"Fixing Issues: /fix"},{"location":"en/2_GettingStarted/#refactoring-a-piece-of-code","text":"Go back to the Calculator class and select (highlight) the entire divide method. This will be the code to refactor. While reviewing this code, you notice a code smell related to the parameter names . Ask the assistant for help by typing in the chat: use better names for parameters . The assistant will suggest a revised version of the method with clearer and more meaningful parameter names addressing the issue as expected. Move your cursor to the top-right corner of the code block suggested by the assistant . You should see two icons appear (the order may vary depending on your IDE). Typically: One icon lets you copy the code. The other (with an arrow) lets you insert the code directly into your editor. Click the arrow icon to insert the new code directly into your editor . You should now see that the originally selected code has been replaced in the Calculator class with the assistant\u2019s version. As with any refactoring, always re-run your tests to confirm they still pass and that the behavior hasn\u2019t changed. Earlier, we saw that writing a comment directly in the code to describe the desired behavior is a practical way to prompt the AI coding assistant and receive suggestions in the right place . However, once the suggestion has been accepted, the comment often remains in the code, as is currently the case in the Calculator class for the squareRoot and logarithm methods generated earlier. But keeping comments that simply explain what the code does is considered a code smell , especially when the method names are already self-explanatory. A quick refactoring can help clean this up. To remove these comments, select both methods (including the comments) and ask the assistant to remove them by typing in the chat: remove comments Then click the arrow icon to accept the assistant\u2019s suggestion and insert the cleaned-up version directly into the source file, replacing the selected code. Note: You could also have selected the entire class. This step simply shows that the assistant\u2019s refactoring isn\u2019t limited to a single method\u2014it can be applied to a larger block of code. \ud83d\ude09 And as with any refactoring, don\u2019t forget to re-run your tests at the end.","title":"Refactoring a Piece of Code"},{"location":"en/2_GettingStarted/#asking-how-to-improve-code-quality","text":"Of course, you can always use the assistant chat like any standard AI chat by asking various questions, more or less specific, to help improve your code. For example, type a question like: how would you improve this code? For now, simply explore the conversation and see what your AI coding assistant suggests. Its first response may satisfy your curiosity. But if you\u2019re looking for a more detailed answer or a suggestion focused on a specific goal, feel free to keep the conversation going to refine its responses. During the previous prompt about code quality, your assistant may have suggested that \"Using Javadoc comments to document public methods\" is, in its view, a quality criterion .","title":"Asking How to Improve Code Quality"},{"location":"en/2_GettingStarted/#easily-generate-documentation-doc","text":"Javadoc comments are different from regular inline comments in code. To better understand (and be convinced of) this difference, you can ask your AI coding assistant the following question: What is the difference between Javadoc comments and regular comments? Your assistant will likely explain that Javadoc comments are used to generate API documentation. For example, the Javadoc for the Java SDK (available on Oracle\u2019s website: https://docs.oracle.com ) is generated from the Javadoc comments written in the SDK\u2019s Java classes which you use in your own programs. So, if your Java class is intended to become an API used by other developers, then Javadoc comments are a key indicator of quality. But as every developer knows, writing documentation is often tedious. Fortunately, your AI coding assistant can help automate this task and boost your productivity using the /doc slash command. Go back to the Calculator class and type /doc in the chat (which stands for the full prompt Document current selection of code ) The AI coding assistant will then suggest a version of the class with generated Javadoc comments . Select the entire Calculator class and click the insert icon (the one with the arrow) to replace the existing code with the documented version. Before continuing, make sure to re-run your tests to confirm that everything still works. This ensures that the assistant didn\u2019t change the behavior of your code\u2014just added comments. As you interact more with the assistant, you'll probably notice that it often suggests follow-up questions related to your request. These suggestions help you refine your prompts and explore the topic in more depth. **","title":"Easily Generate Documentation: /doc"},{"location":"en/2_GettingStarted/#exploring-topics-related-to-software-development","text":"After using the /doc command, your AI coding assistant generated the documented code as expected. If you take a closer look at the chat, you\u2019ll probably notice that it also suggested a follow-up question to help you go further either in your actions or your understanding of documentation. Depending on your curiosity or needs, you\u2019re free to click the suggested question or simply ignore it. In this part of the tutorial, it's time to explore these follow-up questions and use them as a way to learn more about documentation in a software project . Your assistant may suggest something like: What other documentation styles can be used for Java code? If not, just type the question directly in the chat or choose the one you see. Then you can continue with: What are some best practices for writing documentation in Java? And finish with: What are some common mistakes to avoid when writing documentation in Java? For quick research, these conversations let you explore the assistant\u2019s knowledge directly inside your IDE without needing to search external resources.","title":"Exploring Topics Related to Software Development"},{"location":"en/2_GettingStarted/#but-copilot-is-still-just-a-software-development-assistant","text":"Like all language models, AI coding assistants (such as Copilot) are trained on specific datasets. It\u2019s important to remember that the assistant you\u2019re using in this tutorial, integrated into your IDE, is designed specifically for software development and has been trained with knowledge related to that field. As a result, its chat is not meant to replace a more general-purpose language model like ChatGPT, even though both are based on OpenAI technology. To see this for yourself, try asking your coding assistant the following question: What is the best documentation for visiting the city of Limoges? You\u2019ll likely get a response like: I'm sorry, but I can only assist with developer-related questions. If you have any questions about programming or need help with your code, feel free to ask! This clearly shows the limits of an AI coding assistant compared to a general-purpose model.","title":"But Copilot Is Still Just a Software Development Assistant"},{"location":"en/2_GettingStarted/#step-by-step-guidance-for-using-new-tools","text":"You\u2019ve just asked your AI coding assistant to generate Javadoc comments, but do you know how to generate the Javadoc for your project , and where or how to view it? No worries, your AI assistant can also help you get started with this new tool ( Javadoc ). Just ask the following question in the chat: In IntelliJ, how do I generate the Javadoc for my project? (Of course, replace IntelliJ with the name of the IDE you\u2019re actually using.) \ud83d\ude09","title":"Step-by-Step Guidance for Using New Tools"},{"location":"en/2_GettingStarted/#notes","text":"If you had asked a more general question, like: How do I generate the Javadoc for my project? There\u2019s a good chance (remember, LLMs are probabilistic!) that the assistant would explain how to use the javadoc command-line tool, the standard utility in the Java SDK to generate documentation. But if it doesn\u2019t, try rephrasing your question more precisely: How do I generate the Javadoc for my project using the command line? Being specific in your prompt , for example by clearly mentioning the environment (an IDE or the command line), helps the assistant tailor its answer to your context . Since the AI coding assistant can explain how to generate Javadoc in a specific IDE, you might wonder: Can it do it for you? Try asking: Could you generate the Javadoc for this project? What happens? What kind of response do you get from your assistant?","title":"Notes"},{"location":"en/2_GettingStarted/#improving-copilots-responses-by-targeting-prompt-context-with-references-conversation-agents","text":"Earlier, we saw that Copilot offers slash commands , shortcuts that let you quickly trigger common tasks or actions . In the same spirit of simplifying prompt writing and reading, while also making the context more precise , Copilot provides another set of shortcuts called conversation agents . These include variables (using # ) and conversation participants (using @ ), which help make your interactions with the assistant smoother and more effective .","title":"Improving Copilot's Responses by Targeting Prompt Context with References (Conversation Agents)"},{"location":"en/2_GettingStarted/#conversation-variables-the-notation","text":"By default, Copilot Chat refers to the file you have open or the code you have selected. Conversation variables (using # ) allow you to narrow the scope of Copilot\u2019s answers by making the context more specific . Here are a few examples of how to use them: Referencing a file by adding a # before the filename: Reference a specific file: Where are the tests in #MyFile.java? Reference multiple files: How are these files connected #MyFile.java #MyOtherFile.java? Reference specific lines in a file: Explain this function #MyFile.java:66\u201372 Referencing a method, class, or function works the same way, just add # before the name of the item you want to refer to.","title":"Conversation Variables: The # Notation"},{"location":"en/2_GettingStarted/#conversation-participants-the-notation","text":"To reference your entire active workspace in the IDE, you can use the @workspace conversation agent. This participant allows Copilot to take full advantage of all the information available in your currently open files, projects, and configurations, leading to more relevant suggestions. Using @workspace in a prompt helps the assistant understand the broader context of your development environment. Other participants like @terminal or @github are also available for interacting with those specific environments. To learn more about slash commands and conversation agents, see: GitHub Copilot Documentation Copilot Chat Context Now that you\u2019ve taken your first steps with the AI coding assistant, it\u2019s time to explore and apply it in real-world scenarios using existing projects some simple, some more complex.","title":"Conversation Participants: The @ Notation"},{"location":"en/Resources/","text":"Useful Resources \u00b6 Helpful links that were consulted while writing this tutorial GitHub Copilot Documentation \u00b6 General documentation Installing the GitHub Copilot extension Copilot for Eclipse Prompt Tips \u00b6 Prompt engineering for GitHub Copilot Tips and tricks for using GitHub Copilot in your IDE Repetitive Tasks (Slash Commands) and Chat Agent \u00b6 Asking GitHub Copilot questions in your IDE Copilot chat context in Visual Studio Generating documentation with GitHub Copilot Overview of GitHub Copilot Chat extension\u2019s AI assistance features Tutorials Provided by Microsoft \u00b6 Accelerate app development with GitHub Copilot Implement code improvements using GitHub Copilot Create unit tests with GitHub Copilot Chat Generate documentation with GitHub Copilot Review AI assistance features in GitHub Copilot Chat extension Pattern matching in GitHub Copilot Martin Fowler Article \u00b6 Legacy Modernization meets GenAI Videos \u00b6 GitHub Copilot Top Features Explained From Ignorance to Dependence: How AI Changed the Way I Code \u2013 Beno\u00eet Prioux (French) Other \u00b6 Copilot beyond IDEs New GitHub Copilot features in Visual Studio 2022 (French) Back to Home","title":"Useful Resources"},{"location":"en/Resources/#useful-resources","text":"Helpful links that were consulted while writing this tutorial","title":"Useful Resources"},{"location":"en/Resources/#github-copilot-documentation","text":"General documentation Installing the GitHub Copilot extension Copilot for Eclipse","title":"GitHub Copilot Documentation"},{"location":"en/Resources/#prompt-tips","text":"Prompt engineering for GitHub Copilot Tips and tricks for using GitHub Copilot in your IDE","title":"Prompt Tips"},{"location":"en/Resources/#repetitive-tasks-slash-commands-and-chat-agent","text":"Asking GitHub Copilot questions in your IDE Copilot chat context in Visual Studio Generating documentation with GitHub Copilot Overview of GitHub Copilot Chat extension\u2019s AI assistance features","title":"Repetitive Tasks (Slash Commands) and Chat Agent"},{"location":"en/Resources/#tutorials-provided-by-microsoft","text":"Accelerate app development with GitHub Copilot Implement code improvements using GitHub Copilot Create unit tests with GitHub Copilot Chat Generate documentation with GitHub Copilot Review AI assistance features in GitHub Copilot Chat extension Pattern matching in GitHub Copilot","title":"Tutorials Provided by Microsoft"},{"location":"en/Resources/#martin-fowler-article","text":"Legacy Modernization meets GenAI","title":"Martin Fowler Article"},{"location":"en/Resources/#videos","text":"GitHub Copilot Top Features Explained From Ignorance to Dependence: How AI Changed the Way I Code \u2013 Beno\u00eet Prioux (French)","title":"Videos"},{"location":"en/Resources/#other","text":"Copilot beyond IDEs New GitHub Copilot features in Visual Studio 2022 (French) Back to Home","title":"Other"},{"location":"fr/","text":"Tutoriel Copilot & Co \u00b6 Quid des assistants de code bas\u00e9 sur l'IA g\u00e9n\u00e9rative (Gen AI) ? \u00b6 Disclaimer : Ce tutoriel a pour objectif de pr\u00e9senter quelques cas d'usage des assistants de code bas\u00e9s sur des mod\u00e8les d'IA g\u00e9n\u00e9ratives. Il vise \u00e9galement \u00e0 sensibiliser aux avantages de ces outils, tels que l'am\u00e9lioration de la productivit\u00e9 et l'optimisation des pratiques de d\u00e9veloppement, tout en mettant en lumi\u00e8re leurs limites. Initialement con\u00e7u pour des \u00e9tudiants b\u00e9n\u00e9ficiant de l'offre GitHub Education , GitHub Copilot a \u00e9t\u00e9 choisi pour illustrer ces cas d'usage. Cependant, il est tout \u00e0 fait possible de suivre ce tutoriel en utilisant d'autres assistants de code, comme Codeium , Cursor , Supermaven ou Tabnine ,... qui offrent des services similaires. Le terme \" assistant de code \" sera donc privil\u00e9gi\u00e9 autant que possible. Dans ce tutoriel, nous verrez comment : 1. Installation de l'assistant de code Github Copilot 2. Prise en main de l'assistant de code : premiers pas sur un exemple simple 3. Aider \u00e0 la mise en place de nouvelles r\u00e8gles m\u00e9tiers sur un projet existant simple 4. Quid d'un assistant de code pour la reprise d'un projet complexe existant (legacy code) Et vous trouverez quelques liens utiles consult\u00e9s pendant la r\u00e9daction de ce tutoriel. Ce tutoriel est accompagn\u00e9 d'un formulaire. N'h\u00e9sitez pas \u00e0 compl\u00e9ter ce formulaire accessible ici en m\u00eame temps que vous r\u00e9alisez le tutoriel. Pour commencer le tutoriel, c'est par l\u00e0 si vous avez besoin d'installer Github Copilot dans votre IDE pr\u00e9f\u00e9r\u00e9. Sinon vous pouvez commencer directement ici pour prendre en main et faire vos premiers pas avec votre assistant de code pr\u00e9f\u00e9r\u00e9. On en discute ? \u00b6 Pour les discussions, c'est par l\u00e0 Pour les propositions de contenu, de modification par ici Licence \u00b6 Ce document est plac\u00e9 sous licence CC BY-NC-SA : Creative Commons Attribution - Pas d'Utilisation Commerciale - Partage dans les M\u00eames Conditions En savoir plus sur les licences Creative Commons ... Toutefois, toute personne enseignant \u00e0 l'Universit\u00e9 de Limoges souhaitant utiliser ces documents doit demander une autorisation pr\u00e9alable :smile:","title":"Accueil"},{"location":"fr/#tutoriel-copilot-co","text":"","title":"Tutoriel Copilot &amp; Co"},{"location":"fr/#quid-des-assistants-de-code-base-sur-lia-generative-gen-ai","text":"Disclaimer : Ce tutoriel a pour objectif de pr\u00e9senter quelques cas d'usage des assistants de code bas\u00e9s sur des mod\u00e8les d'IA g\u00e9n\u00e9ratives. Il vise \u00e9galement \u00e0 sensibiliser aux avantages de ces outils, tels que l'am\u00e9lioration de la productivit\u00e9 et l'optimisation des pratiques de d\u00e9veloppement, tout en mettant en lumi\u00e8re leurs limites. Initialement con\u00e7u pour des \u00e9tudiants b\u00e9n\u00e9ficiant de l'offre GitHub Education , GitHub Copilot a \u00e9t\u00e9 choisi pour illustrer ces cas d'usage. Cependant, il est tout \u00e0 fait possible de suivre ce tutoriel en utilisant d'autres assistants de code, comme Codeium , Cursor , Supermaven ou Tabnine ,... qui offrent des services similaires. Le terme \" assistant de code \" sera donc privil\u00e9gi\u00e9 autant que possible. Dans ce tutoriel, nous verrez comment : 1. Installation de l'assistant de code Github Copilot 2. Prise en main de l'assistant de code : premiers pas sur un exemple simple 3. Aider \u00e0 la mise en place de nouvelles r\u00e8gles m\u00e9tiers sur un projet existant simple 4. Quid d'un assistant de code pour la reprise d'un projet complexe existant (legacy code) Et vous trouverez quelques liens utiles consult\u00e9s pendant la r\u00e9daction de ce tutoriel. Ce tutoriel est accompagn\u00e9 d'un formulaire. N'h\u00e9sitez pas \u00e0 compl\u00e9ter ce formulaire accessible ici en m\u00eame temps que vous r\u00e9alisez le tutoriel. Pour commencer le tutoriel, c'est par l\u00e0 si vous avez besoin d'installer Github Copilot dans votre IDE pr\u00e9f\u00e9r\u00e9. Sinon vous pouvez commencer directement ici pour prendre en main et faire vos premiers pas avec votre assistant de code pr\u00e9f\u00e9r\u00e9.","title":"Quid des assistants de code bas\u00e9 sur l'IA g\u00e9n\u00e9rative (Gen AI) ?"},{"location":"fr/#on-en-discute","text":"Pour les discussions, c'est par l\u00e0 Pour les propositions de contenu, de modification par ici","title":"On en discute ?"},{"location":"fr/#licence","text":"Ce document est plac\u00e9 sous licence CC BY-NC-SA : Creative Commons Attribution - Pas d'Utilisation Commerciale - Partage dans les M\u00eames Conditions En savoir plus sur les licences Creative Commons ... Toutefois, toute personne enseignant \u00e0 l'Universit\u00e9 de Limoges souhaitant utiliser ces documents doit demander une autorisation pr\u00e9alable :smile:","title":"Licence"},{"location":"fr/1_Installation/","text":"1. Installation de l'assistant de code GitHub Copilot (dans votre IDE pr\u00e9f\u00e9r\u00e9) \u00b6 Pour utiliser GitHub Copilot , plus commun\u00e9ment appel\u00e9 Copilot , vous devez disposer, comme son nom l'indique, d'un compte GitHub . Le service Copilot de GitHub est soumis \u00e0 abonnement, mais en tant qu'\u00e9tudiant/enseignant, il est possible d'utiliser gratuitement ce service gr\u00e2ce \u00e0 GitHub Education . Copilot est un plug-in/extension qui va s'installer directement dans votre IDE pr\u00e9f\u00e9r\u00e9 : Sous VS Code \u00e0 partir de l'ic\u00f4ne Extensions ( Ctrl+Shift+X ) Sous JetBrains \u00e0 partir de File \u2192 Settings \u2192 Plug-ins Sous Eclipse \u00e0 partir de l' Eclipse Market ( Help \u2192 Eclipse Market ) qui permettra de r\u00e9cup\u00e9rer le plugin Copilot4eclipse . Une fois le plug-in/extension install\u00e9(e), vous serez invit\u00e9 \u00e0 vous connecter \u00e0 votre compte GitHub. Apr\u00e8s la connexion, Copilot sera activ\u00e9 automatiquement : des suggestions de code pourront alors appara\u00eetre dans votre IDE et un chat sera \u00e9galement \u00e0 votre disposition. Si vous souhaitez une description plus d\u00e9taill\u00e9e pour installer de Copilot dans votre IDE : pour JetBrains , Visual Studio , ... : Rendez-vous dans la documentation de Copilot dans la rubrique Installation de l'extension GitHub Copilot dans votre environnement . Sur cette page, choisissez ensuite l'onglet qui correspond \u00e0 votre IDE. pour Eclipse : Rendez-vous dans la rubrique Installation de Copilot4Eclipse et/ou visionnez le d\u00e9but de la vid\u00e9o disponible ici . Comme VS Code, Copilot est d\u00e9velopp\u00e9 par GitHub, et donc Microsoft. VS Code est donc l'IDE qui offre aujourd'hui la meilleure exp\u00e9rience utilisateur pour Copilot. L'utilisation de Copilot sous JetBrains est \u00e9galement tr\u00e8s performante. Il est \u00e0 noter que la documentation de GitHub Copilot est disponible sous GitHub Docs . Acc\u00e9dez donc maintenant \u00e0 la partie suivante qui est : 2. Prise en main de l'assistant de code : premiers pas sur un exemple simple ou retournez \u00e0 l' Accueil .","title":"Installation"},{"location":"fr/1_Installation/#1-installation-de-lassistant-de-code-github-copilot-dans-votre-ide-prefere","text":"Pour utiliser GitHub Copilot , plus commun\u00e9ment appel\u00e9 Copilot , vous devez disposer, comme son nom l'indique, d'un compte GitHub . Le service Copilot de GitHub est soumis \u00e0 abonnement, mais en tant qu'\u00e9tudiant/enseignant, il est possible d'utiliser gratuitement ce service gr\u00e2ce \u00e0 GitHub Education . Copilot est un plug-in/extension qui va s'installer directement dans votre IDE pr\u00e9f\u00e9r\u00e9 : Sous VS Code \u00e0 partir de l'ic\u00f4ne Extensions ( Ctrl+Shift+X ) Sous JetBrains \u00e0 partir de File \u2192 Settings \u2192 Plug-ins Sous Eclipse \u00e0 partir de l' Eclipse Market ( Help \u2192 Eclipse Market ) qui permettra de r\u00e9cup\u00e9rer le plugin Copilot4eclipse . Une fois le plug-in/extension install\u00e9(e), vous serez invit\u00e9 \u00e0 vous connecter \u00e0 votre compte GitHub. Apr\u00e8s la connexion, Copilot sera activ\u00e9 automatiquement : des suggestions de code pourront alors appara\u00eetre dans votre IDE et un chat sera \u00e9galement \u00e0 votre disposition. Si vous souhaitez une description plus d\u00e9taill\u00e9e pour installer de Copilot dans votre IDE : pour JetBrains , Visual Studio , ... : Rendez-vous dans la documentation de Copilot dans la rubrique Installation de l'extension GitHub Copilot dans votre environnement . Sur cette page, choisissez ensuite l'onglet qui correspond \u00e0 votre IDE. pour Eclipse : Rendez-vous dans la rubrique Installation de Copilot4Eclipse et/ou visionnez le d\u00e9but de la vid\u00e9o disponible ici . Comme VS Code, Copilot est d\u00e9velopp\u00e9 par GitHub, et donc Microsoft. VS Code est donc l'IDE qui offre aujourd'hui la meilleure exp\u00e9rience utilisateur pour Copilot. L'utilisation de Copilot sous JetBrains est \u00e9galement tr\u00e8s performante. Il est \u00e0 noter que la documentation de GitHub Copilot est disponible sous GitHub Docs . Acc\u00e9dez donc maintenant \u00e0 la partie suivante qui est : 2. Prise en main de l'assistant de code : premiers pas sur un exemple simple ou retournez \u00e0 l' Accueil .","title":"1. Installation de l'assistant de code GitHub Copilot (dans votre IDE pr\u00e9f\u00e9r\u00e9)"},{"location":"fr/2_PriseEnMainAssistant/","text":"2. Prise en main de l'assistant de code : premiers pas sur un exemple simple \u00b6 G\u00e9n\u00e9rer des suggestions de code \u00e0 partir de commentaires G\u00e9n\u00e9rer le code de tests (unitaires) Expliquer comment fonctionne le code ( /explain ) Quelques mots sur la notion de prompt Les commandes slash de Copilot : une aide au prompting pour des t\u00e2ches/actions r\u00e9currentes Faciliter la r\u00e9solution de probl\u00e8mes dans le code : fixer, refactorer, am\u00e9liorer Fixer : /fix Refactorer un bout de code Demander comment am\u00e9liorer la qualit\u00e9 du code G\u00e9n\u00e9rer facilement de la documentation : /doc Approfondir un sujet en lien avec le d\u00e9veloppement logiciel Mais Copilot n'est qu'un assistant autour du d\u00e9veloppement logiciel Guider pas \u00e0 pas la prise en main de nouveau(x) outil(s) Am\u00e9liorer la pertinence des r\u00e9ponses de Copilot en ciblant le contexte du prompt avec des r\u00e9f\u00e9rences (agents de conversation) Rien de tel qu'un exemple simple pour prendre en main un nouvel outil. Dans votre IDE pr\u00e9f\u00e9r\u00e9, dans un projet Java que vous appellerez maths , cr\u00e9ez une classe Calculator contenant l'impl\u00e9mentation suivante : public class Calculator { public int add ( int a , int b ) { return a + b ; } public int subtract ( int a , int b ) { return a - b ; } public int multiply ( int a , int b ) { return a * b ; } public int divide ( int a , int b ) { if ( b == 0 ) { throw new IllegalArgumentException ( \"Cannot divide by zero\" ); } return a / b ; } } G\u00e9n\u00e9rer des suggestions de code \u00e0 partir de commentaires (qui d\u00e9crivent un comportement donn\u00e9) \u00b6 Placez votre curseur \u00e0 la fin de la classe (sur la ligne juste avant l'accolade fermante } ). \u00c9crivez un commentaire qui montre l'intention du code que vous cherchez \u00e0 impl\u00e9menter, comme par exemple : //Method to calculate the square root Puis appuyez sur la touche Entr\u00e9e et observez... L'assistant de code sugg\u00e8re une impl\u00e9mentation pour le comportement d\u00e9crit dans le commentaire. Si cette impl\u00e9mentation r\u00e9pond bien \u00e0 vos besoins et que vous souhaitez ins\u00e9rer dans votre \u00e9diteur tout le code sugg\u00e9r\u00e9 par votre assistant , appuyez sur la touche Tabulation de votre clavier. \u00c9crivez un nouveau commentaire pour une nouvelle m\u00e9thode, par exemple : //Method to calculate the logarithm Appuyez sur Entr\u00e9e pour visualiser le code g\u00e9n\u00e9r\u00e9 par votre assistant pour r\u00e9pondre \u00e0 ce comportement. Vous n'\u00eates pas oblig\u00e9 de valider totalement la suggestion de l'assistant, vous pouvez ins\u00e9rer partiellement le code propos\u00e9 par l'assistant : Ctrl+Fl\u00e8che Droite permet d' ins\u00e9rer un seul mot \u00e0 la fois . Ctrl+Alt+Fl\u00e8che Droite permet d' ins\u00e9rer une seule ligne \u00e0 la fois . Placez-vous sur une nouvelle ligne et attendez. Sans commentaire (c.-\u00e0-d. sans demande explicite), votre assistant vous propose quand m\u00eame des suggestions de code sur des m\u00e9thodes qui pourraient venir enrichir, selon lui, le comportement de votre classe. A vous de d\u00e9cider, selon vos besoins, s'il est pertinent ou pas d'ajouter le code sugg\u00e9r\u00e9/g\u00e9n\u00e9r\u00e9. \u00c0 retenir \u00b6 Pour chaque t\u00e2che, commencez par \u00e9crire un commentaire d\u00e9crivant ce que vous souhaitez faire, puis laissez l'assistant de code vous sugg\u00e9rer une impl\u00e9mentation. N'oubliez pas que l'assistant de code est un outil d'assistance et que vous devez toujours v\u00e9rifier, comprendre et \u00e9ventuellement ajuster le code qu'il g\u00e9n\u00e8re. Si la proposition de votre assistant ne vous convient pas, appuyez simplement sur Entr\u00e9e pour \u00e9crire votre propre code. G\u00e9n\u00e9rer le code de tests (unitaires) \u00b6 Avec l'aide de votre IDE, cr\u00e9ez maintenant, au bon endroit de votre projet, une classe CalculatorTest qui regroupera les tests unitaires relatifs \u00e0 la classe Calculator . Placez-vous dans cette nouvelle classe (vide : faites en sorte que cette classe ne contienne aucun test pour le moment) et attendez la suggestion de votre assistant. Votre assistant devrait vous sugg\u00e9rer un jeu complet de tests unitaires pour chacune des m\u00e9thodes de la classe. Appuyez sur Tabulation pour ins\u00e9rer le code sugg\u00e9r\u00e9 dans cette classe. Lancez les tests pour v\u00e9rifier qu'ils passent bien tous et consultez la couverture de code. Si votre assistant ne vous fait aucune suggestion, vous pouvez proc\u00e9der comme pr\u00e9c\u00e9demment et \u00e9crire un commentaire d\u00e9crivant le comportement \u00e0 tester. Si, par exemple, vous souhaitez disposer d'une m\u00e9thode de test pour le cas de la division par z\u00e9ro : Ecrivez comme commentaire : //test divide by zero L'assistant commencera par proposer l'annotation @Test qu'il faut valider avec Tabulation . Appuyez ensuite sur Entr\u00e9e pour que l'assistant continue ses suggestions. L'assistant propose alors l'impl\u00e9mentation de la m\u00e9thode de test que vous pouvez choisir de valider en appuyant sur Tabulation ou de refuser en appuyant sur Entr\u00e9e , vous permettant ainsi de reprendre la main dans votre IDE. Expliquer comment fonctionne le code ( /explain ) \u00b6 S\u00e9lectionnez dans la classe Calculator tout le code de la m\u00e9thode divide . Une fois ce code s\u00e9lectionn\u00e9 (surlign\u00e9), ouvrez le chat de votre assistant . Pour ouvrir le chat de copilot, faites un clic droit, recherchez quelque chose comme (Github)Copilot puis s\u00e9lectionnez quelque chose comme OpenChatPanel : le chat de l'assistant devrait alors s'ouvrir sur le c\u00f4t\u00e9 (droit) de votre IDE . Dans certains IDE, il est \u00e9galement possible d'ouvrir directement le chat au milieu du code (InLine Chat). Mais pour ce tutoriel, nous vous conseillons d'utiliser le chat classique. Le chat de l'assistant fonctionne comme un chat IA classique. Une fois le code s\u00e9lectionn\u00e9, il suffit de poser une question, par exemple: Comment fonctionne ce code ? L'assistant vous expliquera alors comment fonctionne ce morceau de code. Dans le cadre du d\u00e9veloppement logiciel, les d\u00e9veloppeurs se posent souvent la question : Comment fonctionne ce code ? . Pour faciliter l'\u00e9criture de cette question r\u00e9p\u00e9titive dans le chat, Copilot propose un raccourci d\u00e9di\u00e9 : la commande /explain . Assurez-vous que le code de la m\u00e9thode divide est toujours s\u00e9lectionn\u00e9, puis tapez /explain dans le chat et appuyez sur Entr\u00e9e . Comme pr\u00e9c\u00e9demment, Copilot fournira une description d\u00e9taill\u00e9e de ce que fait le code. Quelques mots sur la notion de prompt \u00b6 Il est maintenant temps d'introduire la notion de prompt. Dans le domaine de l'intelligence artificielle (IA), un prompt est une instruction ou un ensemble de donn\u00e9es que vous fournissez \u00e0 un syst\u00e8me d'IA pour qu'il g\u00e9n\u00e8re une r\u00e9ponse. En d'autres termes, c'est la mani\u00e8re dont vous interagissez/dialoguez avec votre assistant de code. Les prompts peuvent \u00eatre des phrases courtes, des questions ou des mots-cl\u00e9s. La pertinence et la qualit\u00e9 des r\u00e9ponses fournies par l'assistant de code (ou tout autre agent conversationnel IA) d\u00e9pendent directement de la qualit\u00e9 de vos prompts, c'est-\u00e0-dire de la clart\u00e9 et de la pr\u00e9cision des informations que vous fournissez. Les commandes slash de Copilot : une aide au prompting pour des t\u00e2ches/actions r\u00e9currentes \u00b6 \u2192 Copilot propose des raccourcis, appel\u00e9s commandes slash (ou slash commands), qui permettent d'ex\u00e9cuter un certain nombre de t\u00e2ches r\u00e9p\u00e9titives et typiques du d\u00e9veloppement logiciel. En tapant une barre oblique (slash) ( / ) dans le chat, Copilot vous sugg\u00e8re une liste de commandes pour interagir rapidement avec lui. Nous venons d'utiliser /explain , nous explorerons d'autres commandes slash au cours du tutoriel. Le tableau ci-dessous donne la liste des commandes slash propos\u00e9es actuellement dans Copilot : Commande slash Description /explain Explain how the code works /feedback Steps to provide feedback /fix Fix problems and compile errors /help Get help on how to use Copilot chat /tests Generate unit tests /doc Document current selection of code /simplify Simplify the code \u2192 Par d\u00e9faut, le chat de Copilot se r\u00e9f\u00e8re au fichier ouvert ou au code s\u00e9lectionn\u00e9 . Cependant, vous pouvez indiquer explicitement le fichier auquel vous souhaitez faire r\u00e9f\u00e9rence dans le chat. Pour cela, faites un clic droit sur le fichier concern\u00e9, s\u00e9lectionnez GitHub Copilot , puis cliquez sur Reference File in Chat . Le fichier sera alors explicitement r\u00e9f\u00e9renc\u00e9 dans le chat. Disclaimer : Dans les cas d'usage que vous allez explorer dans la suite de ce tutoriel les commandes slash vont souvent \u00eatre utilis\u00e9es comme prompt pour dialoguer de mani\u00e8re succincte, mais pr\u00e9cise avec votre assistant. Si vous utilisez un autre assistant de code, autre que Copilot, * votre assistant proposera surement un \u00e9quivalent \u00e0 la commande slash de Copilot. Si ce n'est pas le cas, \u00e0 chaque fois qu'une commande slash sera utilis\u00e9e dans la suite de ce tutoriel, veuillez \u00e9crire comme prompt la phrase compl\u00e8te donn\u00e9e comme description dans le tableau pr\u00e9c\u00e9dent* qui d\u00e9crit en d\u00e9tail la t\u00e2che demand\u00e9e \u00e0 l'assistant \u2026ou bien essayez de faire apprendre ce raccourci \u00e0 votre assistant de code pr\u00e9f\u00e9r\u00e9 \ud83d\ude0a Faciliter la r\u00e9solution de probl\u00e8mes dans le code : fixer, refactorer, am\u00e9liorer \u00b6 Fixer : /fix \u00b6 Si le fichier actif contient une erreur, utilisez la commande slash /fix pour demander \u00e0 Copilot comment corriger l'erreur. Par exemple, placez-vous dans la classe CalculatorTest et effacez tous les import . Des erreurs de compilation apparaissent alors dans ce fichier. Rendez-vous dans le chat et tapez la commande /fix . L'assistant vous indiquera alors comment r\u00e9soudre ces erreurs de compilation. Avant de continuer, remettez les import et assurez-vous que le code compile et que les tests passent. Rappel : /fix est un alias qui permet d'\u00e9viter d'\u00e9crire enti\u00e8rement \"Fix problems and compile errors\". Refactorer un bout de code \u00b6 Revenez dans la classe Calculator et s\u00e9lectionnez (surlignez) tout le code de la m\u00e9thode divide , qui fera office de code \u00e0 refactorer. En (re)lisant ce code, voua avez d\u00e9tectez un smell code au niveau du nommage des param\u00e8tres de la m\u00e9thode, demandez de l'aide \u00e0 l'assistant en tapant dans le chat : use better names for parameters . L'assistant vous sugg\u00e8re alors un nouveau bout de code avec des noms plus explicites qui corrige le smell code pr\u00e9c\u00e9dent comme vous le souhaitiez. Amenez votre curseur dans le coin en haut \u00e0 droite du cadre qui contient le code propos\u00e9 par l'assistant pour voir appara\u00eetre les deux ic\u00f4nes suivantes (l'ordre des ic\u00f4nes peut varier selon les IDE). Quoi qu'il en soit : Une ic\u00f4ne permet de copier le code propos\u00e9 Une ic\u00f4ne permet d'ins\u00e9rer directement le code dans l'\u00e9diteur (celle avec la fl\u00e8che). Cliquez sur l' ic\u00f4ne qui permet d'ins\u00e9rer directement le code dans l'\u00e9diteur (fl\u00e8che). Il ne reste plus qu'\u00e0 constater que le bout de code initialement surlign\u00e9 a bien \u00e9t\u00e9 remplac\u00e9 dans la classe Calculator par le code propos\u00e9 par l'assistant. Et comme pour tout refactoring, avant de continuer, il est n\u00e9cessaire de relancer les tests pour v\u00e9rifier qu'ils passent toujours et que le comportement n'a pas chang\u00e9. Nous avons vu pr\u00e9c\u00e9demment qu' \u00e9crire un commentaire directement dans le code pour d\u00e9crire le comportement souhait\u00e9 est une approche pratique pour \" interpeller \" l'assistant de code et obtenir des suggestions directement \u00e0 l'endroit appropri\u00e9 . Toutefois, une fois la suggestion de code valid\u00e9e, le commentaire reste, comme c'est le cas actuellement dans la classe Calculator pour les m\u00e9thodes squareRoot et logarithm g\u00e9n\u00e9r\u00e9es pr\u00e9c\u00e9demment par l'assistant. Or, garder un commentaire expliquant ce que fait le code est consid\u00e9r\u00e9 comme un code smell (mauvaise pratique), surtout si le nom des m\u00e9thodes est d\u00e9j\u00e0 explicite. Un petit refactoring s'impose pour \u00e9liminer cette mauvaise odeur du code. Pour supprimer ces commentaires, s\u00e9lectionnez le code des deux m\u00e9thodes, y compris leurs commentaires et demandez \u00e0 l'assistant d'\u00e9liminer ces commentaires en tapant dans le chat : supprimer les commentaires (ou remove comments si vous pr\u00e9f\u00e9rez lui parler en anglais) Ensuite, cliquez sur l'ic\u00f4ne avec la fl\u00e8che pour accepter la suggestion de l'assistant et ins\u00e9rer directement le code corrig\u00e9 par l'assistant dans le fichier source, rempla\u00e7ant ainsi la portion de code pr\u00e9c\u00e9demment s\u00e9lectionn\u00e9e. Remarque : Vous auriez \u00e9galement pu s\u00e9lectionner tout le code de la classe. Cette petite manipulation vise \u00e0 montrer que le refactoring (remaniement de code) par l'assistant n'est pas limit\u00e9 \u00e0 une m\u00e9thode unique, mais peut s'appliquer sur un bout de code plus important \ud83d\ude09 Et comme pour tout refactoring, n'oubliez pas de terminer en relan\u00e7ant les tests. Demander comment am\u00e9liorer la qualit\u00e9 du code \u00b6 Bien s\u00fbr, il est toujours possible d'utiliser le chat de l'assistant de code comme un chat d'une IA classique, en formulant des requ\u00eates vari\u00e9es et plus ou moins pr\u00e9cises pour am\u00e9liorer la qualit\u00e9 du code. Par exemple, tapez dans le chat une question du type : comment am\u00e9liorer la qualit\u00e9 de ce code ? dans la langue de votre choix (fran\u00e7ais ou anglais) : how would you improve this code ? Pour l'instant, contentez-vous simplement de dialoguer avec votre assistant de code. Peut-\u00eatre que la r\u00e9ponse qu'il vous fournira satisfera votre curiosit\u00e9 Toutefois, si vous souhaitez une r\u00e9ponse plus d\u00e9taill\u00e9e ou orient\u00e9e vers un objectif bien pr\u00e9cis, vous pouvez bien s\u00fbr poursuivre la conversation avec l'assistant afin d'affiner ses r\u00e9ponses/suggestions. Lors du prompt pr\u00e9c\u00e9dent autour de la qualit\u00e9 de code, votre assistant vous a peut-\u00eatre indiqu\u00e9 que \u00abUtilisez des commentaires Javadoc pour documenter les m\u00e9thodes publiques.\u00bb pouvait \u00eatre consid\u00e9r\u00e9, selon lui , comme un crit\u00e8re de qualit\u00e9 . G\u00e9n\u00e9rer facilement de la documentation : /doc \u00b6 Les commentaires Javadoc sont diff\u00e9rents des simples commentaires dans le code. Pour en savoir plus (et vous convaincre cette diff\u00e9rence), demandez de l'aide \u00e0 votre assistant de code en lui demandant de r\u00e9pondre \u00e0 la question suivante : Quelle est la diff\u00e9rence entre des commentaires javadoc et de simples commentaires ? Votre assistant vous expliquera probablement que les commentaires Javadoc sont utilis\u00e9s pour g\u00e9n\u00e9rer de la documentation d'une API. Par exemple, la Javadoc du SDK de Java (disponible sur le site Oracle : https://docs.oracle.com ) est g\u00e9n\u00e9r\u00e9e \u00e0 partir des commentaires Javadoc pr\u00e9sents dans les classes Java du SDK, que vous utilisez dans vos programmes. Ainsi, si votre classe Java est destin\u00e9e \u00e0 devenir une API, utilisable par des d\u00e9veloppeurs externes, les commentaires Javadoc deviennent, dans ce cas d'usage, un crit\u00e8re important de qualit\u00e9. Mais tout d\u00e9veloppeur sait qu'\u00e9crire de la documentation est une t\u00e2che fastidieuse. Heureusement, l'assistant de code peut vous aider \u00e0 automatiser cette t\u00e2che et am\u00e9liorer votre productivit\u00e9 gr\u00e2ce \u00e0 la commande slash /doc . Revenez sur la classe Calculator et tapez dans le chat : /doc (qui correspond en r\u00e9alit\u00e9 \u00e0 la phrase compl\u00e8te Document current selection of code ) L'assistant de code vous proposera alors le code de la classe document\u00e9 avec les commentaires Javadoc qu'il vient de g\u00e9n\u00e9rer S\u00e9lectionnez tout le code de la classe Calculator et cliquez sur l'ic\u00f4ne d'insertion de code (avec la fl\u00e8che) pour remplacer le code existant par cle code document\u00e9. Avant de continuer, relancez bien s\u00fbr les tests pour v\u00e9rifier qu'ils continuent de passer (et que l'assistant de code n'a pas modifi\u00e9 le comportement de votre code, mais s'est bien juste content\u00e9 d'ajouter des commentaires) Au fil de vos \u00e9changes avec l'assistant, vous aurez sans doute remarqu\u00e9 que ce dernier ne se contente pas de r\u00e9pondre \u00e0 vos demandes. Il vous sugg\u00e8re \u00e9galement une question (en lien avec votre demande) pour vous aider \u00e0 affiner votre prompt ou \u00e0 approfondir le sujet sur lequel vous interagissez. ** Approfondir un sujet en lien avec le d\u00e9veloppement logiciel \u00b6 Suite \u00e0 la commande /doc , votre assistant de code vous a g\u00e9n\u00e9r\u00e9 le code document\u00e9 demand\u00e9. Si vous consultez attentivement le chat, vous remarquerez probablement qu' il vous a aussi propos\u00e9 une question pour approfondir vos actions ou vos connaissances autour de la documentation . Selon vos besoins ou votre curiosit\u00e9, vous \u00eates libre de cliquer sur la question sugg\u00e9r\u00e9e ou de l'ignorer. Dans cette partie du tutoriel, il est temps d'explorer ces questions sugg\u00e9r\u00e9es par votre assistant et d'en tirer parti pour en apprendre davantage sur la documentation dans un projet . Votre assistant de code vous sugg\u00e8re peut-\u00eatre la question suivante : What other documentation styles can be used for Java code? Si ce n'est pas le cas, choisissez la question qui vous est propos\u00e9e ou tapez directement cette question dans le chat. Vous pouvez ensuite poursuivre avec une question comme (sugg\u00e9r\u00e9e ou tap\u00e9e) : What are some best practices for writing documentation in Java? Et pour terminer : What are some common mistakes to avoid when writing documentation in Java? Pour des recherches simples, ces \u00e9changes permettent d'explorer directement les connaissances de l'assistant dans votre IDE sans avoir besoin de consulter des ressources externes. Mais Copilot n'est qu'un assistant autour du d\u00e9veloppement logiciel \u00b6 Comme tout mod\u00e8le de langage, les assistants de code (comme Copilot) ont \u00e9t\u00e9 entra\u00een\u00e9s sur un ensemble de donn\u00e9es sp\u00e9cifiques. Il est important de garder \u00e0 l'esprit que l'assistant de code que vous utilisez dans ce tutoriel, int\u00e9gr\u00e9 \u00e0 votre IDE, est sp\u00e9cifiquement con\u00e7u pour le d\u00e9veloppement logiciel et a donc \u00e9t\u00e9 entra\u00een\u00e9 sur des connaissances relatives \u00e0 ce domaine . Ainsi, le chat de votre assistant de code ne remplacera pas celui d'un mod\u00e8le de langage plus g\u00e9n\u00e9raliste, tel que ChatGPT, bien que les deux soient bas\u00e9s sur OpenAI. Pour vous en convaincre, posez la question suivante \u00e0 votre assistant de code : What is the best documentation for visiting the city of Limoges? Et vous obtiendrez s\u00fbrement une r\u00e9ponse du type : I'm sorry, but I can only assist with developer-related questions. If you have any questions about programming or need help with your code, feel free to ask! Cela vous montre les limites de l'assistant de code par rapport \u00e0 un mod\u00e8le g\u00e9n\u00e9raliste. Guider pas \u00e0 pas la prise en main de nouveau(x) outil(s) \u00b6 Vous venez de demander \u00e0 votre assistant de code de g\u00e9n\u00e9rer des commentaires Javadoc, mais savez-vous comment g\u00e9n\u00e9rer la Javadoc de votre projet et o\u00f9/comment la visualiser ? Qu'\u00e0 cela ne tienne, votre assistant de code est l\u00e0 pour vous aider \u00e0 prendre en main facilement ce \u00ab nouvel outil \u00bb qu'est la javadoc. Pour cela, posez-lui la question suivante dans le chat : Sous IntelliJ, comment g\u00e9n\u00e9rer la javadoc de mon projet ? Bien s\u00fbr, vous remplacerez IntelliJ par le nom de l'IDE que vous utilisez. \ud83d\ude09 Remarques \u00b6 Si vous aviez pos\u00e9 une question plus g\u00e9n\u00e9rale, comme : Comment g\u00e9n\u00e9rer la Javadoc de mon projet ? Il y a des chances (n'oubliez pas le c\u00f4t\u00e9 probabiliste des LLM dans la GenIA) que l'assistant vous explique comment utiliser la ligne de commande javadoc (l'outil de base du SDK permettant de g\u00e9n\u00e9rer la documentation). Mais si ce n'est pas le cas, reformulez de mani\u00e8re plus pr\u00e9cise : Comment g\u00e9n\u00e9rer la Javadoc de mon projet en ligne de commande ? En \u00e9tant pr\u00e9cis dans votre prompt (en mentionnant explicitement l'environnement de travail, comme un IDE ou la ligne de commande), l'assistant de code adaptera sa r\u00e9ponse au contexte de votre demande . Puisque l'assistant de code peut vous expliquer pr\u00e9cis\u00e9ment comment g\u00e9n\u00e9rer la Javadoc dans un IDE sp\u00e9cifique, vous vous demandez peut-\u00eatre s'il pourrait r\u00e9aliser cette action lui-m\u00eame. Testez-le en lui demandant : Pourrais-tu me g\u00e9n\u00e9rer la Javadoc de ce projet ? Que se passe-t-il ? Quelle r\u00e9ponse obtenez-vous de la part de votre assistant de code ? Am\u00e9liorer la pertinence des r\u00e9ponses de Copilot en ciblant le contexte du prompt avec des r\u00e9f\u00e9rences (agents de conversation) \u00b6 Nous avons vu pr\u00e9c\u00e9demment que l'assistant de code Copilot propose des commandes slash , qui permettent de lancer rapidement des actions ou t\u00e2ches r\u00e9currentes sous forme de raccourcis . Dans un m\u00eame soucis de simplification d'\u00e9criture/lecture du prompt tout en veillant \u00e0 d\u00e9finir au mieux le context e, Copilot propose d'autres types de raccourcis. Il s'agit des agents de conversation tels que les variables ( # ) et les participants de conversation ( @ ), qui visent \u00e0 rendre vos interactions plus fluides et efficaces . Variable de conversation : notation # \u00b6 Par d\u00e9faut, le chat de copilote se r\u00e9f\u00e8re au fichier que vous avez ouvert ou au code que vous avez s\u00e9lectionn\u00e9. Les variables de conversation ( # ) vous permettent de restreindre la port\u00e9e des r\u00e9sultats de Copilot en pr\u00e9cisant le contexte de mani\u00e8re plus cibl\u00e9e . Voici quelques exemples d'utilisation : r\u00e9f\u00e9rencer un fichier en ajoutant simplement le symbole # devant le nom du fichier : r\u00e9f\u00e9rencer un fichier sp\u00e9cifique : O\u00f9 sont les tests dans #MonFichier.java ? r\u00e9f\u00e9rencer plusieurs fichiers : Comment ces fichiers sont-ils li\u00e9s #MonFichier.java #MonFichier2.java ? r\u00e9f\u00e9rencer des lignes sp\u00e9cifiques dans un fichier : Expliquez cette fonction #MonFichier.java : 66-72 ? r\u00e9f\u00e9rencer une m\u00e9thode, une classe ou une fonction en ajoutant de la m\u00eame mani\u00e8re # devant le nom de la m\u00e9thode, classe ou fonction concern\u00e9e. Participant de conversation : notation @ \u00b6 Pour r\u00e9f\u00e9rencer l'ensemble de la solution active dans l'IDE, vous pouvez utiliser l'agent de conversation @workspace . Ce participant de conversation permet \u00e0 Copilot de tirer parti de toutes les informations disponibles dans vos fichiers, projets et configurations actuellement ouverts dans votre IDE, pour proposer des suggestions plus adapt\u00e9es. Ainsi, utiliser @workspace dans un prompt exploitera l'ensemble du contexte de votre espace de travail. D'autres participants comme @terminal ou @github sont \u00e9galement disponibles pour interagir avec ces environnements sp\u00e9cifiques. Pour en savoir plus sur les actions r\u00e9currentes et les agents de conversion, vous pouvez consulter les liens suivants : GitHub Copilot Documentation Copilot Chat Context Apr\u00e8s cette rapide prise en main de votre assistant de code, vous allez maintenant explorer et mettre en \u0153uvre dans la suite de ce tutoriel quelques cas d'usages sur des projets d\u00e9j\u00e0 existants plus ou moins complexes Acc\u00e9dez donc maintenant \u00e0 la partie suivante qui est : 3. Aider \u00e0 la mise en place de nouvelles r\u00e8gles m\u00e9tiers sur un projet existant simple ou retournez \u00e0 l' Accueil .","title":"Prise en main de l'assistant de code"},{"location":"fr/2_PriseEnMainAssistant/#2-prise-en-main-de-lassistant-de-code-premiers-pas-sur-un-exemple-simple","text":"G\u00e9n\u00e9rer des suggestions de code \u00e0 partir de commentaires G\u00e9n\u00e9rer le code de tests (unitaires) Expliquer comment fonctionne le code ( /explain ) Quelques mots sur la notion de prompt Les commandes slash de Copilot : une aide au prompting pour des t\u00e2ches/actions r\u00e9currentes Faciliter la r\u00e9solution de probl\u00e8mes dans le code : fixer, refactorer, am\u00e9liorer Fixer : /fix Refactorer un bout de code Demander comment am\u00e9liorer la qualit\u00e9 du code G\u00e9n\u00e9rer facilement de la documentation : /doc Approfondir un sujet en lien avec le d\u00e9veloppement logiciel Mais Copilot n'est qu'un assistant autour du d\u00e9veloppement logiciel Guider pas \u00e0 pas la prise en main de nouveau(x) outil(s) Am\u00e9liorer la pertinence des r\u00e9ponses de Copilot en ciblant le contexte du prompt avec des r\u00e9f\u00e9rences (agents de conversation) Rien de tel qu'un exemple simple pour prendre en main un nouvel outil. Dans votre IDE pr\u00e9f\u00e9r\u00e9, dans un projet Java que vous appellerez maths , cr\u00e9ez une classe Calculator contenant l'impl\u00e9mentation suivante : public class Calculator { public int add ( int a , int b ) { return a + b ; } public int subtract ( int a , int b ) { return a - b ; } public int multiply ( int a , int b ) { return a * b ; } public int divide ( int a , int b ) { if ( b == 0 ) { throw new IllegalArgumentException ( \"Cannot divide by zero\" ); } return a / b ; } }","title":"2. Prise en main de l'assistant de code : premiers pas sur un exemple simple"},{"location":"fr/2_PriseEnMainAssistant/#generer-des-suggestions-de-code-a-partir-de-commentaires-qui-decrivent-un-comportement-donne","text":"Placez votre curseur \u00e0 la fin de la classe (sur la ligne juste avant l'accolade fermante } ). \u00c9crivez un commentaire qui montre l'intention du code que vous cherchez \u00e0 impl\u00e9menter, comme par exemple : //Method to calculate the square root Puis appuyez sur la touche Entr\u00e9e et observez... L'assistant de code sugg\u00e8re une impl\u00e9mentation pour le comportement d\u00e9crit dans le commentaire. Si cette impl\u00e9mentation r\u00e9pond bien \u00e0 vos besoins et que vous souhaitez ins\u00e9rer dans votre \u00e9diteur tout le code sugg\u00e9r\u00e9 par votre assistant , appuyez sur la touche Tabulation de votre clavier. \u00c9crivez un nouveau commentaire pour une nouvelle m\u00e9thode, par exemple : //Method to calculate the logarithm Appuyez sur Entr\u00e9e pour visualiser le code g\u00e9n\u00e9r\u00e9 par votre assistant pour r\u00e9pondre \u00e0 ce comportement. Vous n'\u00eates pas oblig\u00e9 de valider totalement la suggestion de l'assistant, vous pouvez ins\u00e9rer partiellement le code propos\u00e9 par l'assistant : Ctrl+Fl\u00e8che Droite permet d' ins\u00e9rer un seul mot \u00e0 la fois . Ctrl+Alt+Fl\u00e8che Droite permet d' ins\u00e9rer une seule ligne \u00e0 la fois . Placez-vous sur une nouvelle ligne et attendez. Sans commentaire (c.-\u00e0-d. sans demande explicite), votre assistant vous propose quand m\u00eame des suggestions de code sur des m\u00e9thodes qui pourraient venir enrichir, selon lui, le comportement de votre classe. A vous de d\u00e9cider, selon vos besoins, s'il est pertinent ou pas d'ajouter le code sugg\u00e9r\u00e9/g\u00e9n\u00e9r\u00e9.","title":"G\u00e9n\u00e9rer des suggestions de code \u00e0 partir de commentaires (qui d\u00e9crivent un comportement donn\u00e9)"},{"location":"fr/2_PriseEnMainAssistant/#a-retenir","text":"Pour chaque t\u00e2che, commencez par \u00e9crire un commentaire d\u00e9crivant ce que vous souhaitez faire, puis laissez l'assistant de code vous sugg\u00e9rer une impl\u00e9mentation. N'oubliez pas que l'assistant de code est un outil d'assistance et que vous devez toujours v\u00e9rifier, comprendre et \u00e9ventuellement ajuster le code qu'il g\u00e9n\u00e8re. Si la proposition de votre assistant ne vous convient pas, appuyez simplement sur Entr\u00e9e pour \u00e9crire votre propre code.","title":"\u00c0 retenir"},{"location":"fr/2_PriseEnMainAssistant/#generer-le-code-de-tests-unitaires","text":"Avec l'aide de votre IDE, cr\u00e9ez maintenant, au bon endroit de votre projet, une classe CalculatorTest qui regroupera les tests unitaires relatifs \u00e0 la classe Calculator . Placez-vous dans cette nouvelle classe (vide : faites en sorte que cette classe ne contienne aucun test pour le moment) et attendez la suggestion de votre assistant. Votre assistant devrait vous sugg\u00e9rer un jeu complet de tests unitaires pour chacune des m\u00e9thodes de la classe. Appuyez sur Tabulation pour ins\u00e9rer le code sugg\u00e9r\u00e9 dans cette classe. Lancez les tests pour v\u00e9rifier qu'ils passent bien tous et consultez la couverture de code. Si votre assistant ne vous fait aucune suggestion, vous pouvez proc\u00e9der comme pr\u00e9c\u00e9demment et \u00e9crire un commentaire d\u00e9crivant le comportement \u00e0 tester. Si, par exemple, vous souhaitez disposer d'une m\u00e9thode de test pour le cas de la division par z\u00e9ro : Ecrivez comme commentaire : //test divide by zero L'assistant commencera par proposer l'annotation @Test qu'il faut valider avec Tabulation . Appuyez ensuite sur Entr\u00e9e pour que l'assistant continue ses suggestions. L'assistant propose alors l'impl\u00e9mentation de la m\u00e9thode de test que vous pouvez choisir de valider en appuyant sur Tabulation ou de refuser en appuyant sur Entr\u00e9e , vous permettant ainsi de reprendre la main dans votre IDE.","title":"G\u00e9n\u00e9rer le code de tests (unitaires)"},{"location":"fr/2_PriseEnMainAssistant/#expliquer-comment-fonctionne-le-code-explain","text":"S\u00e9lectionnez dans la classe Calculator tout le code de la m\u00e9thode divide . Une fois ce code s\u00e9lectionn\u00e9 (surlign\u00e9), ouvrez le chat de votre assistant . Pour ouvrir le chat de copilot, faites un clic droit, recherchez quelque chose comme (Github)Copilot puis s\u00e9lectionnez quelque chose comme OpenChatPanel : le chat de l'assistant devrait alors s'ouvrir sur le c\u00f4t\u00e9 (droit) de votre IDE . Dans certains IDE, il est \u00e9galement possible d'ouvrir directement le chat au milieu du code (InLine Chat). Mais pour ce tutoriel, nous vous conseillons d'utiliser le chat classique. Le chat de l'assistant fonctionne comme un chat IA classique. Une fois le code s\u00e9lectionn\u00e9, il suffit de poser une question, par exemple: Comment fonctionne ce code ? L'assistant vous expliquera alors comment fonctionne ce morceau de code. Dans le cadre du d\u00e9veloppement logiciel, les d\u00e9veloppeurs se posent souvent la question : Comment fonctionne ce code ? . Pour faciliter l'\u00e9criture de cette question r\u00e9p\u00e9titive dans le chat, Copilot propose un raccourci d\u00e9di\u00e9 : la commande /explain . Assurez-vous que le code de la m\u00e9thode divide est toujours s\u00e9lectionn\u00e9, puis tapez /explain dans le chat et appuyez sur Entr\u00e9e . Comme pr\u00e9c\u00e9demment, Copilot fournira une description d\u00e9taill\u00e9e de ce que fait le code.","title":"Expliquer comment fonctionne le code (/explain)"},{"location":"fr/2_PriseEnMainAssistant/#quelques-mots-sur-la-notion-de-prompt","text":"Il est maintenant temps d'introduire la notion de prompt. Dans le domaine de l'intelligence artificielle (IA), un prompt est une instruction ou un ensemble de donn\u00e9es que vous fournissez \u00e0 un syst\u00e8me d'IA pour qu'il g\u00e9n\u00e8re une r\u00e9ponse. En d'autres termes, c'est la mani\u00e8re dont vous interagissez/dialoguez avec votre assistant de code. Les prompts peuvent \u00eatre des phrases courtes, des questions ou des mots-cl\u00e9s. La pertinence et la qualit\u00e9 des r\u00e9ponses fournies par l'assistant de code (ou tout autre agent conversationnel IA) d\u00e9pendent directement de la qualit\u00e9 de vos prompts, c'est-\u00e0-dire de la clart\u00e9 et de la pr\u00e9cision des informations que vous fournissez.","title":"Quelques mots sur la notion de prompt"},{"location":"fr/2_PriseEnMainAssistant/#les-commandes-slash-de-copilot-une-aide-au-prompting-pour-des-tachesactions-recurrentes","text":"\u2192 Copilot propose des raccourcis, appel\u00e9s commandes slash (ou slash commands), qui permettent d'ex\u00e9cuter un certain nombre de t\u00e2ches r\u00e9p\u00e9titives et typiques du d\u00e9veloppement logiciel. En tapant une barre oblique (slash) ( / ) dans le chat, Copilot vous sugg\u00e8re une liste de commandes pour interagir rapidement avec lui. Nous venons d'utiliser /explain , nous explorerons d'autres commandes slash au cours du tutoriel. Le tableau ci-dessous donne la liste des commandes slash propos\u00e9es actuellement dans Copilot : Commande slash Description /explain Explain how the code works /feedback Steps to provide feedback /fix Fix problems and compile errors /help Get help on how to use Copilot chat /tests Generate unit tests /doc Document current selection of code /simplify Simplify the code \u2192 Par d\u00e9faut, le chat de Copilot se r\u00e9f\u00e8re au fichier ouvert ou au code s\u00e9lectionn\u00e9 . Cependant, vous pouvez indiquer explicitement le fichier auquel vous souhaitez faire r\u00e9f\u00e9rence dans le chat. Pour cela, faites un clic droit sur le fichier concern\u00e9, s\u00e9lectionnez GitHub Copilot , puis cliquez sur Reference File in Chat . Le fichier sera alors explicitement r\u00e9f\u00e9renc\u00e9 dans le chat. Disclaimer : Dans les cas d'usage que vous allez explorer dans la suite de ce tutoriel les commandes slash vont souvent \u00eatre utilis\u00e9es comme prompt pour dialoguer de mani\u00e8re succincte, mais pr\u00e9cise avec votre assistant. Si vous utilisez un autre assistant de code, autre que Copilot, * votre assistant proposera surement un \u00e9quivalent \u00e0 la commande slash de Copilot. Si ce n'est pas le cas, \u00e0 chaque fois qu'une commande slash sera utilis\u00e9e dans la suite de ce tutoriel, veuillez \u00e9crire comme prompt la phrase compl\u00e8te donn\u00e9e comme description dans le tableau pr\u00e9c\u00e9dent* qui d\u00e9crit en d\u00e9tail la t\u00e2che demand\u00e9e \u00e0 l'assistant \u2026ou bien essayez de faire apprendre ce raccourci \u00e0 votre assistant de code pr\u00e9f\u00e9r\u00e9 \ud83d\ude0a","title":"Les commandes slash de Copilot : une aide au prompting pour des t\u00e2ches/actions r\u00e9currentes"},{"location":"fr/2_PriseEnMainAssistant/#faciliter-la-resolution-de-problemes-dans-le-code-fixer-refactorer-ameliorer","text":"","title":"Faciliter la r\u00e9solution de probl\u00e8mes dans le code : fixer, refactorer, am\u00e9liorer"},{"location":"fr/2_PriseEnMainAssistant/#fixer-fix","text":"Si le fichier actif contient une erreur, utilisez la commande slash /fix pour demander \u00e0 Copilot comment corriger l'erreur. Par exemple, placez-vous dans la classe CalculatorTest et effacez tous les import . Des erreurs de compilation apparaissent alors dans ce fichier. Rendez-vous dans le chat et tapez la commande /fix . L'assistant vous indiquera alors comment r\u00e9soudre ces erreurs de compilation. Avant de continuer, remettez les import et assurez-vous que le code compile et que les tests passent. Rappel : /fix est un alias qui permet d'\u00e9viter d'\u00e9crire enti\u00e8rement \"Fix problems and compile errors\".","title":"Fixer : /fix"},{"location":"fr/2_PriseEnMainAssistant/#refactorer-un-bout-de-code","text":"Revenez dans la classe Calculator et s\u00e9lectionnez (surlignez) tout le code de la m\u00e9thode divide , qui fera office de code \u00e0 refactorer. En (re)lisant ce code, voua avez d\u00e9tectez un smell code au niveau du nommage des param\u00e8tres de la m\u00e9thode, demandez de l'aide \u00e0 l'assistant en tapant dans le chat : use better names for parameters . L'assistant vous sugg\u00e8re alors un nouveau bout de code avec des noms plus explicites qui corrige le smell code pr\u00e9c\u00e9dent comme vous le souhaitiez. Amenez votre curseur dans le coin en haut \u00e0 droite du cadre qui contient le code propos\u00e9 par l'assistant pour voir appara\u00eetre les deux ic\u00f4nes suivantes (l'ordre des ic\u00f4nes peut varier selon les IDE). Quoi qu'il en soit : Une ic\u00f4ne permet de copier le code propos\u00e9 Une ic\u00f4ne permet d'ins\u00e9rer directement le code dans l'\u00e9diteur (celle avec la fl\u00e8che). Cliquez sur l' ic\u00f4ne qui permet d'ins\u00e9rer directement le code dans l'\u00e9diteur (fl\u00e8che). Il ne reste plus qu'\u00e0 constater que le bout de code initialement surlign\u00e9 a bien \u00e9t\u00e9 remplac\u00e9 dans la classe Calculator par le code propos\u00e9 par l'assistant. Et comme pour tout refactoring, avant de continuer, il est n\u00e9cessaire de relancer les tests pour v\u00e9rifier qu'ils passent toujours et que le comportement n'a pas chang\u00e9. Nous avons vu pr\u00e9c\u00e9demment qu' \u00e9crire un commentaire directement dans le code pour d\u00e9crire le comportement souhait\u00e9 est une approche pratique pour \" interpeller \" l'assistant de code et obtenir des suggestions directement \u00e0 l'endroit appropri\u00e9 . Toutefois, une fois la suggestion de code valid\u00e9e, le commentaire reste, comme c'est le cas actuellement dans la classe Calculator pour les m\u00e9thodes squareRoot et logarithm g\u00e9n\u00e9r\u00e9es pr\u00e9c\u00e9demment par l'assistant. Or, garder un commentaire expliquant ce que fait le code est consid\u00e9r\u00e9 comme un code smell (mauvaise pratique), surtout si le nom des m\u00e9thodes est d\u00e9j\u00e0 explicite. Un petit refactoring s'impose pour \u00e9liminer cette mauvaise odeur du code. Pour supprimer ces commentaires, s\u00e9lectionnez le code des deux m\u00e9thodes, y compris leurs commentaires et demandez \u00e0 l'assistant d'\u00e9liminer ces commentaires en tapant dans le chat : supprimer les commentaires (ou remove comments si vous pr\u00e9f\u00e9rez lui parler en anglais) Ensuite, cliquez sur l'ic\u00f4ne avec la fl\u00e8che pour accepter la suggestion de l'assistant et ins\u00e9rer directement le code corrig\u00e9 par l'assistant dans le fichier source, rempla\u00e7ant ainsi la portion de code pr\u00e9c\u00e9demment s\u00e9lectionn\u00e9e. Remarque : Vous auriez \u00e9galement pu s\u00e9lectionner tout le code de la classe. Cette petite manipulation vise \u00e0 montrer que le refactoring (remaniement de code) par l'assistant n'est pas limit\u00e9 \u00e0 une m\u00e9thode unique, mais peut s'appliquer sur un bout de code plus important \ud83d\ude09 Et comme pour tout refactoring, n'oubliez pas de terminer en relan\u00e7ant les tests.","title":"Refactorer un bout de code"},{"location":"fr/2_PriseEnMainAssistant/#demander-comment-ameliorer-la-qualite-du-code","text":"Bien s\u00fbr, il est toujours possible d'utiliser le chat de l'assistant de code comme un chat d'une IA classique, en formulant des requ\u00eates vari\u00e9es et plus ou moins pr\u00e9cises pour am\u00e9liorer la qualit\u00e9 du code. Par exemple, tapez dans le chat une question du type : comment am\u00e9liorer la qualit\u00e9 de ce code ? dans la langue de votre choix (fran\u00e7ais ou anglais) : how would you improve this code ? Pour l'instant, contentez-vous simplement de dialoguer avec votre assistant de code. Peut-\u00eatre que la r\u00e9ponse qu'il vous fournira satisfera votre curiosit\u00e9 Toutefois, si vous souhaitez une r\u00e9ponse plus d\u00e9taill\u00e9e ou orient\u00e9e vers un objectif bien pr\u00e9cis, vous pouvez bien s\u00fbr poursuivre la conversation avec l'assistant afin d'affiner ses r\u00e9ponses/suggestions. Lors du prompt pr\u00e9c\u00e9dent autour de la qualit\u00e9 de code, votre assistant vous a peut-\u00eatre indiqu\u00e9 que \u00abUtilisez des commentaires Javadoc pour documenter les m\u00e9thodes publiques.\u00bb pouvait \u00eatre consid\u00e9r\u00e9, selon lui , comme un crit\u00e8re de qualit\u00e9 .","title":"Demander comment am\u00e9liorer la qualit\u00e9 du code"},{"location":"fr/2_PriseEnMainAssistant/#generer-facilement-de-la-documentation-doc","text":"Les commentaires Javadoc sont diff\u00e9rents des simples commentaires dans le code. Pour en savoir plus (et vous convaincre cette diff\u00e9rence), demandez de l'aide \u00e0 votre assistant de code en lui demandant de r\u00e9pondre \u00e0 la question suivante : Quelle est la diff\u00e9rence entre des commentaires javadoc et de simples commentaires ? Votre assistant vous expliquera probablement que les commentaires Javadoc sont utilis\u00e9s pour g\u00e9n\u00e9rer de la documentation d'une API. Par exemple, la Javadoc du SDK de Java (disponible sur le site Oracle : https://docs.oracle.com ) est g\u00e9n\u00e9r\u00e9e \u00e0 partir des commentaires Javadoc pr\u00e9sents dans les classes Java du SDK, que vous utilisez dans vos programmes. Ainsi, si votre classe Java est destin\u00e9e \u00e0 devenir une API, utilisable par des d\u00e9veloppeurs externes, les commentaires Javadoc deviennent, dans ce cas d'usage, un crit\u00e8re important de qualit\u00e9. Mais tout d\u00e9veloppeur sait qu'\u00e9crire de la documentation est une t\u00e2che fastidieuse. Heureusement, l'assistant de code peut vous aider \u00e0 automatiser cette t\u00e2che et am\u00e9liorer votre productivit\u00e9 gr\u00e2ce \u00e0 la commande slash /doc . Revenez sur la classe Calculator et tapez dans le chat : /doc (qui correspond en r\u00e9alit\u00e9 \u00e0 la phrase compl\u00e8te Document current selection of code ) L'assistant de code vous proposera alors le code de la classe document\u00e9 avec les commentaires Javadoc qu'il vient de g\u00e9n\u00e9rer S\u00e9lectionnez tout le code de la classe Calculator et cliquez sur l'ic\u00f4ne d'insertion de code (avec la fl\u00e8che) pour remplacer le code existant par cle code document\u00e9. Avant de continuer, relancez bien s\u00fbr les tests pour v\u00e9rifier qu'ils continuent de passer (et que l'assistant de code n'a pas modifi\u00e9 le comportement de votre code, mais s'est bien juste content\u00e9 d'ajouter des commentaires) Au fil de vos \u00e9changes avec l'assistant, vous aurez sans doute remarqu\u00e9 que ce dernier ne se contente pas de r\u00e9pondre \u00e0 vos demandes. Il vous sugg\u00e8re \u00e9galement une question (en lien avec votre demande) pour vous aider \u00e0 affiner votre prompt ou \u00e0 approfondir le sujet sur lequel vous interagissez. **","title":"G\u00e9n\u00e9rer facilement de la documentation : /doc"},{"location":"fr/2_PriseEnMainAssistant/#approfondir-un-sujet-en-lien-avec-le-developpement-logiciel","text":"Suite \u00e0 la commande /doc , votre assistant de code vous a g\u00e9n\u00e9r\u00e9 le code document\u00e9 demand\u00e9. Si vous consultez attentivement le chat, vous remarquerez probablement qu' il vous a aussi propos\u00e9 une question pour approfondir vos actions ou vos connaissances autour de la documentation . Selon vos besoins ou votre curiosit\u00e9, vous \u00eates libre de cliquer sur la question sugg\u00e9r\u00e9e ou de l'ignorer. Dans cette partie du tutoriel, il est temps d'explorer ces questions sugg\u00e9r\u00e9es par votre assistant et d'en tirer parti pour en apprendre davantage sur la documentation dans un projet . Votre assistant de code vous sugg\u00e8re peut-\u00eatre la question suivante : What other documentation styles can be used for Java code? Si ce n'est pas le cas, choisissez la question qui vous est propos\u00e9e ou tapez directement cette question dans le chat. Vous pouvez ensuite poursuivre avec une question comme (sugg\u00e9r\u00e9e ou tap\u00e9e) : What are some best practices for writing documentation in Java? Et pour terminer : What are some common mistakes to avoid when writing documentation in Java? Pour des recherches simples, ces \u00e9changes permettent d'explorer directement les connaissances de l'assistant dans votre IDE sans avoir besoin de consulter des ressources externes.","title":"Approfondir un sujet en lien avec le d\u00e9veloppement logiciel"},{"location":"fr/2_PriseEnMainAssistant/#mais-copilot-nest-quun-assistant-autour-du-developpement-logiciel","text":"Comme tout mod\u00e8le de langage, les assistants de code (comme Copilot) ont \u00e9t\u00e9 entra\u00een\u00e9s sur un ensemble de donn\u00e9es sp\u00e9cifiques. Il est important de garder \u00e0 l'esprit que l'assistant de code que vous utilisez dans ce tutoriel, int\u00e9gr\u00e9 \u00e0 votre IDE, est sp\u00e9cifiquement con\u00e7u pour le d\u00e9veloppement logiciel et a donc \u00e9t\u00e9 entra\u00een\u00e9 sur des connaissances relatives \u00e0 ce domaine . Ainsi, le chat de votre assistant de code ne remplacera pas celui d'un mod\u00e8le de langage plus g\u00e9n\u00e9raliste, tel que ChatGPT, bien que les deux soient bas\u00e9s sur OpenAI. Pour vous en convaincre, posez la question suivante \u00e0 votre assistant de code : What is the best documentation for visiting the city of Limoges? Et vous obtiendrez s\u00fbrement une r\u00e9ponse du type : I'm sorry, but I can only assist with developer-related questions. If you have any questions about programming or need help with your code, feel free to ask! Cela vous montre les limites de l'assistant de code par rapport \u00e0 un mod\u00e8le g\u00e9n\u00e9raliste.","title":"Mais Copilot n'est qu'un assistant autour du d\u00e9veloppement logiciel"},{"location":"fr/2_PriseEnMainAssistant/#guider-pas-a-pas-la-prise-en-main-de-nouveaux-outils","text":"Vous venez de demander \u00e0 votre assistant de code de g\u00e9n\u00e9rer des commentaires Javadoc, mais savez-vous comment g\u00e9n\u00e9rer la Javadoc de votre projet et o\u00f9/comment la visualiser ? Qu'\u00e0 cela ne tienne, votre assistant de code est l\u00e0 pour vous aider \u00e0 prendre en main facilement ce \u00ab nouvel outil \u00bb qu'est la javadoc. Pour cela, posez-lui la question suivante dans le chat : Sous IntelliJ, comment g\u00e9n\u00e9rer la javadoc de mon projet ? Bien s\u00fbr, vous remplacerez IntelliJ par le nom de l'IDE que vous utilisez. \ud83d\ude09","title":"Guider pas \u00e0 pas la prise en main de nouveau(x) outil(s)"},{"location":"fr/2_PriseEnMainAssistant/#remarques","text":"Si vous aviez pos\u00e9 une question plus g\u00e9n\u00e9rale, comme : Comment g\u00e9n\u00e9rer la Javadoc de mon projet ? Il y a des chances (n'oubliez pas le c\u00f4t\u00e9 probabiliste des LLM dans la GenIA) que l'assistant vous explique comment utiliser la ligne de commande javadoc (l'outil de base du SDK permettant de g\u00e9n\u00e9rer la documentation). Mais si ce n'est pas le cas, reformulez de mani\u00e8re plus pr\u00e9cise : Comment g\u00e9n\u00e9rer la Javadoc de mon projet en ligne de commande ? En \u00e9tant pr\u00e9cis dans votre prompt (en mentionnant explicitement l'environnement de travail, comme un IDE ou la ligne de commande), l'assistant de code adaptera sa r\u00e9ponse au contexte de votre demande . Puisque l'assistant de code peut vous expliquer pr\u00e9cis\u00e9ment comment g\u00e9n\u00e9rer la Javadoc dans un IDE sp\u00e9cifique, vous vous demandez peut-\u00eatre s'il pourrait r\u00e9aliser cette action lui-m\u00eame. Testez-le en lui demandant : Pourrais-tu me g\u00e9n\u00e9rer la Javadoc de ce projet ? Que se passe-t-il ? Quelle r\u00e9ponse obtenez-vous de la part de votre assistant de code ?","title":"Remarques"},{"location":"fr/2_PriseEnMainAssistant/#ameliorer-la-pertinence-des-reponses-de-copilot-en-ciblant-le-contexte-du-prompt-avec-des-references-agents-de-conversation","text":"Nous avons vu pr\u00e9c\u00e9demment que l'assistant de code Copilot propose des commandes slash , qui permettent de lancer rapidement des actions ou t\u00e2ches r\u00e9currentes sous forme de raccourcis . Dans un m\u00eame soucis de simplification d'\u00e9criture/lecture du prompt tout en veillant \u00e0 d\u00e9finir au mieux le context e, Copilot propose d'autres types de raccourcis. Il s'agit des agents de conversation tels que les variables ( # ) et les participants de conversation ( @ ), qui visent \u00e0 rendre vos interactions plus fluides et efficaces .","title":"Am\u00e9liorer la pertinence des r\u00e9ponses de Copilot en ciblant le contexte du prompt avec des r\u00e9f\u00e9rences (agents de conversation)"},{"location":"fr/2_PriseEnMainAssistant/#variable-de-conversation-notation","text":"Par d\u00e9faut, le chat de copilote se r\u00e9f\u00e8re au fichier que vous avez ouvert ou au code que vous avez s\u00e9lectionn\u00e9. Les variables de conversation ( # ) vous permettent de restreindre la port\u00e9e des r\u00e9sultats de Copilot en pr\u00e9cisant le contexte de mani\u00e8re plus cibl\u00e9e . Voici quelques exemples d'utilisation : r\u00e9f\u00e9rencer un fichier en ajoutant simplement le symbole # devant le nom du fichier : r\u00e9f\u00e9rencer un fichier sp\u00e9cifique : O\u00f9 sont les tests dans #MonFichier.java ? r\u00e9f\u00e9rencer plusieurs fichiers : Comment ces fichiers sont-ils li\u00e9s #MonFichier.java #MonFichier2.java ? r\u00e9f\u00e9rencer des lignes sp\u00e9cifiques dans un fichier : Expliquez cette fonction #MonFichier.java : 66-72 ? r\u00e9f\u00e9rencer une m\u00e9thode, une classe ou une fonction en ajoutant de la m\u00eame mani\u00e8re # devant le nom de la m\u00e9thode, classe ou fonction concern\u00e9e.","title":"Variable de conversation : notation #"},{"location":"fr/2_PriseEnMainAssistant/#participant-de-conversation-notation","text":"Pour r\u00e9f\u00e9rencer l'ensemble de la solution active dans l'IDE, vous pouvez utiliser l'agent de conversation @workspace . Ce participant de conversation permet \u00e0 Copilot de tirer parti de toutes les informations disponibles dans vos fichiers, projets et configurations actuellement ouverts dans votre IDE, pour proposer des suggestions plus adapt\u00e9es. Ainsi, utiliser @workspace dans un prompt exploitera l'ensemble du contexte de votre espace de travail. D'autres participants comme @terminal ou @github sont \u00e9galement disponibles pour interagir avec ces environnements sp\u00e9cifiques. Pour en savoir plus sur les actions r\u00e9currentes et les agents de conversion, vous pouvez consulter les liens suivants : GitHub Copilot Documentation Copilot Chat Context Apr\u00e8s cette rapide prise en main de votre assistant de code, vous allez maintenant explorer et mettre en \u0153uvre dans la suite de ce tutoriel quelques cas d'usages sur des projets d\u00e9j\u00e0 existants plus ou moins complexes Acc\u00e9dez donc maintenant \u00e0 la partie suivante qui est : 3. Aider \u00e0 la mise en place de nouvelles r\u00e8gles m\u00e9tiers sur un projet existant simple ou retournez \u00e0 l' Accueil .","title":"Participant de conversation : notation @"},{"location":"fr/3_ProjetExistantSimple/","text":"3. Aider \u00e0 la mise en place de nouvelles r\u00e8gles m\u00e9tiers sur un projet existant simple \u00b6 3.1 Avoir une vue d'ensemble du projet 3.2 Mettre en place des tests unitaires Couvrir la classe Book Couvrir la classe LibraryMember 3.3 Aider \u00e0 la bonne mise en place d'une nouvelle r\u00e8gle m\u00e9tier Bien comprendre et impl\u00e9menter la r\u00e8gle m\u00e9tier li\u00e9e \u00e0 la validit\u00e9 d'un ISBN (classe ISBNValidator ) Tester la r\u00e8gle m\u00e9tier (classe ISBNValidatorTest ) Am\u00e9liorer la qualit\u00e9 du code de la r\u00e8gle m\u00e9tier 3.4 Aider \u00e0 l'\u00e9criture d'une expression r\u00e9guli\u00e8re (pattern matching) 3.5 Discuter pour le plaisir de d\u00e9couvrir de nouveaux outils 3.6 Aider \u00e0 l'utilisation de streams et lambdas 3.7 Sugg\u00e9rer du code plus complexe (avec streams) 3.8 Explorer d'autres cas d'usage Commencez par cloner le projet bookai depuis le d\u00e9p\u00f4t GitHub \u00e0 l'adresse suivante : https://github.com/iblasquez/bookai , puis ouvrez-le dans votre IDE pr\u00e9f\u00e9r\u00e9. 3.1 Avoir une vue d'ensemble du projet \u00b6 V\u00e9rifiez d'abord que le projet compile bien, puis parcourez rapidement le code pour avoir une premi\u00e8re impression. Ce projet en est encore \u00e0 ses d\u00e9buts et semble s'inscrire dans le contexte m\u00e9tier d'une biblioth\u00e8que. Il est compos\u00e9 de trois classes principales : Book , LibraryMember , et Library . Aucun test n'a encore \u00e9t\u00e9 r\u00e9ellement \u00e9crit dans BookTest . Dans un projet aussi simple, il n'est pas n\u00e9cessaire de faire appel \u00e0 l'assistant de code pour obtenir une vue d'ensemble. 3.2 Mettre en place des tests unitaires \u00b6 Afin de partir sur de bonnes bases (et r\u00e9viser ce qui a \u00e9t\u00e9 vu dans la partie pr\u00e9c\u00e9dente), vous allez commencer par ajouter des tests unitaires \u00e0 ce projet. Couvrir la classe Book \u00b6 La classe BookTest existe d\u00e9j\u00e0. Ouvrez-la, supprimez le test inutile qu'elle contient, et laissez votre assistant de code vous proposer une suite de tests que vous validerez. Ex\u00e9cutez les tests. Lancez la couverture de code. Comme la classe Book est un simple POJO, les deux ou trois tests propos\u00e9s par votre assistant devraient suffire pour atteindre une couverture de 100%. Remarque : si vous ne savez pas ce qu'est un POJO, vous pouvez demander \u00e0 votre assistant de code de vous l'expliquer. Couvrir la classe LibraryMember \u00b6 Ouvrez la classe LibraryMember et dans le chat de l'assistant de code, utilisez la commande slash /tests (ou tapez directement Generate unit tests ) pour g\u00e9n\u00e9rer les tests. Utilisez votre IDE pour cr\u00e9er la classe de test LibraryMemberTest au bon endroit et ins\u00e9rez-y le code g\u00e9n\u00e9r\u00e9 par l'assistant. Assurez-vous que les tests compilent correctement sans modifier le code de production . Si n\u00e9cessaire, ajustez le code des tests pour qu'il fonctionne, par exemple peut-\u00eatre devrez-vous compl\u00e9ter le constructeur de Book (avec ou sans l'aide de l'assistant). Par ailleurs, si l'assistant a g\u00e9n\u00e9r\u00e9 une m\u00e9thode de test comme borrowBookTwice , il vous faudra d\u00e9cider de la conserver ou non. Le comportement permettant de g\u00e9rer l'emprunt d'un livre d\u00e9j\u00e0 emprunt\u00e9 n'est pas encore impl\u00e9ment\u00e9 dans le code, \u00e0 vous donc de choisir entre : Supprimer ce test si ce comportement ne vous semble pas pertinent pour l'instant. Conserver ce test si vous estimez qu'il est important de g\u00e9rer cette situation d\u00e8s maintenant, auquel cas vous devrez modifier le code de production pour que le test passe avec succ\u00e8s (avec ou sans l'aide de l'assistant). Lancez les tests et la couverture de code. Consultez la classe LibraryMember . Si certaines portions de la classe LibraryMember ne sont pas couvertes par les tests (et si vous souhaitez qu'elles le deviennent), s\u00e9lectionnez ces parties de code et g\u00e9n\u00e9rez de nouveaux tests avec la commande /tests . Il ne vous reste plus qu'\u00e0 ins\u00e9rer le code des nouveaux tests dans la classe LibraryMember , de les ex\u00e9cuter et de v\u00e9rifier \u00e0 nouveau la couverture de code. Rappel : Dans un projet, l'objectif n'est pas n\u00e9cessairement d'obtenir 100% de couverture. Ici, l'id\u00e9e est juste de montrer comment ajouter rapidement des tests unitaires. D'ailleurs, pour l'instant, nous n'\u00e9crirons pas de tests pour la classe Library . 3.3 Aider \u00e0 la bonne mise en place d'une nouvelle r\u00e8gle m\u00e9tier \u00b6 Bien comprendre et impl\u00e9menter la r\u00e8gle m\u00e9tier li\u00e9e \u00e0 la validit\u00e9 d'un ISBN (classe ISBNValidator ) \u00b6 Retournez dans la classe Book et examinez ses attributs. Vous constaterez que l' isbn est l'un des attributs du livre. Vous avez probablement une vague id\u00e9e de ce qu'est un isbn (une suite de chiffres). Pour plus de d\u00e9tails, vous pouvez demander dans le chat de votre assistant de code : Pourrais-tu m'expliquer ce qu'est un ISBN ? Dans ce projet, la g\u00e9n\u00e9ration d'un ISBN ne nous int\u00e9resse pas, car l'ISBN est attribu\u00e9 lors de la publication du livre. Cependant, il est crucial de veiller \u00e0 \u00e9viter toute erreur humaine lors de la saisie d'un ISBN . Garantir l' int\u00e9grit\u00e9 des donn\u00e9es (validit\u00e9 et exactitude) est essentiel pour maintenir la qualit\u00e9 du d\u00e9veloppement. Un ISBN, comme un num\u00e9ro de carte bancaire ou de carte vitale, dispose probablement d'une cl\u00e9 de contr\u00f4le pour assurer sa validit\u00e9 . Ce n'est donc pas simplement une suite de chiffres al\u00e9atoires, mais un code qui suit une r\u00e8gle m\u00e9tier . Laissez votre assistant de code vous aider \u00e0 d\u00e9couvrir et \u00e0 impl\u00e9menter cette r\u00e8gle. Demandez \u00e0 votre assistant : Sais-tu s'il existe une r\u00e8gle sp\u00e9cifique pour savoir si un ISBN est correct ? L'assistant devrait vous fournir une explication et probablement une impl\u00e9mentation Java. - Si ce n'est pas le cas, posez-lui directement la question : Pourrais-tu me proposer une impl\u00e9mentation java de cette r\u00e8gle m\u00e9tier ? Cr\u00e9ez ensuite une nouvelle classe ISBNValidator et ins\u00e9rez-y le code g\u00e9n\u00e9r\u00e9 apr\u00e8s avoir rapidement v\u00e9rifi\u00e9 que l'impl\u00e9mentation propos\u00e9e semble respecter la description de la r\u00e8gle. Remarque : Les r\u00e9ponses d'une intelligence g\u00e9n\u00e9rative \u00e9tant probabilistes , votre assistant peut avoir r\u00e9pondu de diff\u00e9rentes mani\u00e8res aux questions pr\u00e9c\u00e9dentes. Il se peut que, dans la classe ISBNValidator , vous vous retrouviez avec une impl\u00e9mentation qui v\u00e9rifie un seul type d'ISBN , alors qu'en r\u00e9alit\u00e9 il en existe deux : ISBN-10 (avant 2007) et ISBN-13 . Vous pouvez approfondir vos connaissance sur cette r\u00e8gle m\u00e9tier en continuant \u00e0 discuter avec l'assistant : Existe-il un autre type isbn ? (question \u00e0 poser si l'assistant n'a mentionn\u00e9 qu'ISBN-13) Quelle est la structure d'un ISBN-10 ? Quelle est la structure d'un ISBN-13 ? Quelle est la diff\u00e9rence entre ISBN-10 et ISBN-13 ? Si l'assistant ne vous a initialement propos\u00e9 qu'une seule m\u00e9thode pour v\u00e9rifier la validit\u00e9 de l'ISBN, demandez-lui maintenant : Pourrais-tu me proposer une impl\u00e9mentation java pour l'isbn10 ? (adaptez bien s\u00fbr votre question en fonction de ce que vous a d\u00e9j\u00e0 propos\u00e9 l'assistant de code) Ins\u00e9rez ensuite ce nouveau code dans la classe ISBNValidator , en veillant \u00e0 ce qu'il corresponde bien \u00e0 la r\u00e8gle m\u00e9tier. Veillez toujours \u00e0 examiner les r\u00e9ponses g\u00e9n\u00e9r\u00e9es par un assistant avant de les int\u00e9grer \u00e0 votre code . Par exemple, assurez-vous ici que la validation de l'ISBN-10 prend correctement en compte les cas particuliers, comme l'utilisation du caract\u00e8re \"X\". Tester la r\u00e8gle m\u00e9tier (classe ISBNValidatorTest ) \u00b6 Ensuite, cr\u00e9ez une classe ISBNValidatorTest et, avec l'aide de votre assistant, g\u00e9n\u00e9rez des tests couvrant les deux m\u00e9thodes de validation de l'ISBN. Soyez attentif \u00e0 la qualit\u00e9 du code de vos tests et veillez \u00e0 ce qu'ils respectent les bonnes pratiques : \u00e9vitez d'avoir un seul test avec de multiples assertions et privil\u00e9giez des m\u00e9thodes bien nomm\u00e9es qui respectent le pattern AAA (Arrange, Act, Assert). Pour cela, il est pr\u00e9f\u00e9rable de s\u00e9lectionner le code \u00e0 tester et d'utiliser la commande /test (ou le prompt Generate unit tests ) pour g\u00e9n\u00e9rer les tests, plut\u00f4t que de laisser les tests se g\u00e9n\u00e9rer automatiquement en pla\u00e7ant simplement le curseur dans la classe ISBNValidatorTest Lancez les tests. Est-ce que tous les tests passent ? Si certains \u00e9chouent, ne modifiez pas le code de production imm\u00e9diatement. V\u00e9rifiez d'abord si les valeurs utilis\u00e9es dans les tests sont correctes : certes, elles font passer le(s) test(s), mais correspondent-elles \u00e0 un ISBN valide ? En effet, pour garantir la qualit\u00e9 des tests , il est crucial d'\u00eatre attentif \u00e0 la qualit\u00e9 des donn\u00e9es de vos tests (que l'assistant de code ne nous garantit pas forc\u00e9ment). Pour \u00eatre s\u00fbr de tester avec des donn\u00e9es de qualit\u00e9 , vous allez maintenant revisiter (c-a-d modifier) les tests g\u00e9n\u00e9r\u00e9s et les ajuster en utilisant comme exemples dans vos tests de v\u00e9ritables valeurs ISBN , \u00e0 savoir : 9780321146533 quand votre test est cens\u00e9 v\u00e9rifi\u00e9 qu'un ISBN-13 est correct Cet ISBN-13 n'est autre que celui du livre Test-Driven Development de Kent Beck 020161622X quand votre test est cens\u00e9 v\u00e9rifi\u00e9 qu'un ISBN-10 est correct avec la pr\u00e9sence d'un X Cet ISBN-10 n'est autre que a version originale de 1999 du livre The Pragmatic Programmer\" de Andrew Hunt et David Thomas. Cet ISBN-10 n'est autre que a version originale de 1999 du livre The Pragmatic Programmer\" de Andrew Hunt et David Thomas. 0321125215 quand votre test est cens\u00e9 v\u00e9rifi\u00e9 qu'un ISBN-10 est correct Cet ISBN-10 est celui du livre Domain Driven Design d'Eric Evans. Pour tester un ISBN mal form\u00e9 ou invalide , vous pouvez simplement modifier le dernier chiffre, car celui-ci est la cl\u00e9 de contr\u00f4le . Si les tests ne passent pas avec les donn\u00e9es de qualit\u00e9 ci-dessus, demandez \u00e0 votre assistant de vous reg\u00e9n\u00e9rer le code qui pose probl\u00e8me. Conseil : Comme tout refactoring, adoptez une approche m\u00e9thodique pour revisiter/ajuster vos tests avec les v\u00e9ritables valeurs. Avancez progressivement petits pas par petits pas : modifiez une valeur, relancez le test correspondant, puis passez au test suivant . Une fois les deux r\u00e8gles de validation d'ISBN impl\u00e9ment\u00e9e, la revisite des tests termin\u00e9e, relancez tous les tests et la couverture de code pour vous assurer que la classe ISBNValidator est bien couverte \u00e0 100% en vue d'un petit refactoring du code de production. Am\u00e9liorer la qualit\u00e9 du code de la r\u00e8gle m\u00e9tier \u00b6 Revenez dans la classe ISBNValidator . L'assistant a g\u00e9n\u00e9r\u00e9 un code fonctionnel qui r\u00e9pond au besoin, mais ce code est-il de qualit\u00e9 ? Demandez maintenant \u00e0 l'assistant : Comment puis-je am\u00e9liorer la qualit\u00e9 du code de la classe ISBNValidator ? Une IA g\u00e9n\u00e9rative ayant toujours une r\u00e9ponse \u00e0 proposer, l'assistant devrait vous fournir un code de meilleure qualit\u00e9. V\u00e9rifiez que ces am\u00e9liorations vous conviennent (par exemple, les magic numbers ont-ils \u00e9t\u00e9 \u00e9limin\u00e9s ? Des m\u00e9thodes ont-elles \u00e9t\u00e9 extraites ? Des exceptions ont-elles \u00e9t\u00e9 mises en place, etc.). Si la qualit\u00e9 de code vous convient , int\u00e9grez ce code dans votre projet en remplacement du code existant, puis relancez les tests pour vous assurer que les r\u00e8gles de validation de l'ISBN sont toujours respect\u00e9es. Si la qualit\u00e9 du code ne correspond pas \u00e0 vos attentes , soyez plus pr\u00e9cis dans vos demandes en ciblant une seule mauvaise odeur \u00e0 la fois : Pourrais-tu supprimer les magic numbers ? Si le code g\u00e9n\u00e9r\u00e9 vous convient, int\u00e9grez-le \u00e0 la place de l'ancien et relancez les tests. Si vous pensez pouvoir encore am\u00e9liorer la qualit\u00e9 du code, poursuivez la discussion avec votre assistant et continuez le refactoring petit pas par petit pas, en \u00e9liminant chaque mauvaise odeur de code au fur et \u00e0 mesure et relan\u00e7ant les tests \u00e0 chaque fois. Pourrais-tu proc\u00e9der \u00e0 des extract method ? [\u2026] N'oubliez pas que c'est votre expertise et vos bonnes pratiques qui garantiront la qualit\u00e9 du code . Les assistants de code peuvent vous aider \u00e0 g\u00e9n\u00e9rer du code rapidement, mais **une revue attentive est n\u00e9cessaire pour \u00e9viter l'accumulation de dette technique, qui pourrait devenir co\u00fbteuse \u00e0 long terme comme le montre certaines \u00e9tudes comme gitclear et uplevelteam . En effet \u00e0 ce jour, les mod\u00e8les des assistants de code tendent \u00e0 reproduire la dette technique pr\u00e9sente dans les donn\u00e9es sur lesquelles ils ont \u00e9t\u00e9 entra\u00een\u00e9s. Toutefois, au rythme rapide o\u00f9 \u00e9voluent les mod\u00e8les de langage (LLM), on peut esp\u00e9rer qu'ils b\u00e9n\u00e9ficieront un jour de jeux de donn\u00e9es plus qualitatifs et de nouvelles techniques d'apprentissage qui pourraient leur permettre d'am\u00e9liorer progressivement la qualit\u00e9 du code qu'ils g\u00e9n\u00e8rent. 3.4 Aider \u00e0 l'\u00e9criture d'une expression r\u00e9guli\u00e8re (pattern matching) \u00b6 Les expressions r\u00e9guli\u00e8res sont des mod\u00e8les utilis\u00e9s pour identifier des combinaisons sp\u00e9cifiques de caract\u00e8res dans des cha\u00eenes. Ecrire une expression r\u00e9guli\u00e8re est souvent per\u00e7ue comme une t\u00e2che fastidieuse par les d\u00e9veloppeurs , l'assistant de code peut vous aider \u00e0 les g\u00e9n\u00e9rer rapidement. Ouvrez la classe LibraryMember et demandez \u00e0 votre assistant dans le chat : Pourrais-tu me cr\u00e9er une expression r\u00e9guli\u00e8re pour valider un email ? L'assistant vous proposera probablement une expression r\u00e9guli\u00e8re dont la premi\u00e8re partie ressemble \u00e0 : ^[a-zA-Z0-9._%+-]+ o\u00f9 : \u2192 le symbole ^ marque le d\u00e9but de la ligne : l'adresse e-mail doit commencer ici. \u2192 La partie entre crochets [\u2026]+ sp\u00e9cifie que l'adresse e-mail doit contenir un ou plusieurs ( + ) caract\u00e8res d\u00e9finis \u00e0 l'int\u00e9rieur des crochets : minuscules ( a-z ), majuscules ( A-Z ), chiffres ( 0-9 ), ou certains caract\u00e8res sp\u00e9ciaux comme le point ( . ), l'underscore ( _ ), le pourcentage ( % ), le signe plus ( + ) ou le trait d'union ( - ). \u2192 La partie qui suit le symbole @ , obligatoire dans toute adresse e-mail, peut varier, et donc \u00eatre plus ou moins contraignante, en fonction de la r\u00e9ponse g\u00e9n\u00e9r\u00e9e par l'assistant, qui reste probabiliste. Si vous avez des exigences sp\u00e9cifiques pour cette partie de l'expression, n'h\u00e9sitez pas \u00e0 les indiquer \u00e0 l'assistant afin d'affiner le mod\u00e8le. Gardez \u00e0 l'esprit que l'assistant peut vous faire gagner du temps en limitant les t\u00e2ches r\u00e9p\u00e9titives et fastidieuses, mais qu'il est essentiel de toujours v\u00e9rifier et ajuster le code g\u00e9n\u00e9r\u00e9 pour qu'il r\u00e9ponde pr\u00e9cis\u00e9ment \u00e0 vos besoins. Si vous souhaitez approfondir la contrainte sur les noms de domaine , vous pouvez poser la question suivante \u00e0 l'assistant : Quelles sont les r\u00e8gles classiques pour les noms de domaines dans les emails ? Une fois que vous avez pris connaissance de ces r\u00e8gles, demandez \u00e0 votre assistant de r\u00e9\u00e9crire la m\u00e9thode isValidEmail en tenant compte de ces contraintes. 3.5 Discuter pour le plaisir de d\u00e9couvrir de nouveaux outils \u00b6 La validation des e-mails n'est pas une fonctionnalit\u00e9 propre \u00e0 votre application. Il est \u00e9vident que de nombreux d\u00e9veloppeurs ont d\u00e9j\u00e0 impl\u00e9ment\u00e9 cette r\u00e8gle avant vous. Par curiosit\u00e9, vous pourriez demander \u00e0 votre assistant : Pourrais-tu \u00e9crire ce code autrement ? Y-a-t-il d'autres m\u00e9thodes que le pattern matching pour valider un mail ? Votre assistant vous incitera certainement \u00e0 approfondir vos connaissances dans ce domaine en vous proposant des questions comme : Quelles sont les autres m\u00e9thodes pour valider une adresse e-mail en Java ? Quelles biblioth\u00e8ques tierces existent pour valider une adresse e-mail en Java ? [\u2026] Vous d\u00e9couvrirez ainsi qu'il existe plusieurs approches pour valider une adresse e-mail, en plus du pattern matching. Pourquoi r\u00e9inventer la roue ? Apr\u00e8s cette discussion enrichissante, vous pourrez choisir la solution la plus adapt\u00e9e \u00e0 vos besoins. 3.6 Aider \u00e0 l'utilisation de streams et lambdas \u00b6 Placez-vous \u00e0 la fin de la classe Library , commencez \u00e0 taper : public List<Book> search Laissez l'assistant de code proposer une signature et une impl\u00e9mentation. L'objectif est de continuer \u00e0 taper jusqu'\u00e0 ce qu'il propose de g\u00e9n\u00e9rer la m\u00e9thode suivante : public List<Book> searchBookByTitle(String Title) Apr\u00e8s avoir rapidement v\u00e9rifi\u00e9 que l'impl\u00e9mentation de cette m\u00e9thode correspond \u00e0 son intention m\u00e9tier, validez-la . Utilisez ensuite l'assistant pour g\u00e9n\u00e9rer les tests qui couvrent cette m\u00e9thode en s\u00e9lectionnant le code de la m\u00e9thode et en utilisant /tests Faites compiler le code en ajoutant \u00e9ventuellement les imports n\u00e9cessaires. Si un test \u00e9choue, examinez attentivement la qualit\u00e9 des donn\u00e9es utilis\u00e9es dans ce test . En effet, si tout comme moi, les probabilit\u00e9s ne sont pas avec vous aujourd'hui, vous pourriez \u00eatre victime de l' hallucination suivante : \u2192 \u00c0 premi\u00e8re vue, les donn\u00e9es du test peuvent para\u00eetre correctes, mais le test \u00e9choue sur l'assertion assertTrue . En effet, l'assistant de code a utilis\u00e9, par erreur, la valeur d'un auteur d'un livre comme param\u00e8tre dans la m\u00e9thode searchBookByTitle au lieu de la valeur d'un titre . Cette confusion est probablement due \u00e0 la primitive obsession dans la signature du constructeur de Book , qui prend trop de param\u00e8tres de type String . L'assistant n'a donc pas su faire la distinction entre les diff\u00e9rents param\u00e8tres String et n'a pas reconnu celui correspondant au titre . Pour faire passer le test avec les donn\u00e9es actuelles, il faudrait donc passer 123 en param\u00e8tre \u00e0 la place de Effective Java . \u2192 Cependant, en \u00e9crivant 123 comme param\u00e8tre d'entr\u00e9e pour la m\u00e9thode searchBooksByTitle , vous vous rendez compte que les donn\u00e9es de test sont de mauvaise qualit\u00e9. En effet, pour un \u0153il humain, dans le contexte m\u00e9tier de l'application, Clean Code ou Effective Java sont de v\u00e9ritables titres de livres. Dans les tests qu'il a g\u00e9n\u00e9r\u00e9s, l'assistant a pris ces valeurs comme exemples pour les noms d'auteurs, ce qui est inappropri\u00e9 et risque d'induire des erreurs/confusions lors de la (re)lecture ou de l'interpr\u00e9tation manuelle des tests. Au passage, on peut \u00e9galement noter que l'ISBN utilis\u00e9 dans l'exemple du livre Effective Java n'\u00e9tait pas le bon car c'est en r\u00e9alit\u00e9 le v\u00e9ritable ISBN du livre Design Patterns: Elements of Reusable Object Oriented Software du Gang of Four \ud83d\ude09. \u2192 Pour am\u00e9liorer la lisibilit\u00e9 (et donc la compr\u00e9hension) de votre test, il est recommand\u00e9 d'ajuster le test avec de v\u00e9ritables valeurs m\u00e9tiers , plus pertinentes et coh\u00e9rentes. Le test pr\u00e9c\u00e9dent, revisit\u00e9 dans ce sens, ressemble maintenant \u00e0 cela : Cette hallucination nous donne l'occasion de rappeler qu' il faut \u00eatre tr\u00e8s vigilant \u00e0 la qualit\u00e9 des donn\u00e9es dans les tests g\u00e9n\u00e9r\u00e9s , et que les valeurs prises comme exemple, tout comme le code, n\u00e9cessitent une relecture de votre part. Toutefois, il est int\u00e9ressant de remarquer qu'une hallucination de l'assistant peut aussi mettre sur la voie des probl\u00e8mes de conception (mauvaises odeurs), que seule votre expertise d\u00e9tectera. Une fois les tests corrig\u00e9s, relancez-les pour vous assurer qu'ils passent bien tous. Si l'assistant a g\u00e9n\u00e9r\u00e9 un code utilisant une boucle for , mais que vous pr\u00e9f\u00e9rez travailler avec des streams , s\u00e9lectionnez tout le code de la m\u00e9thode searchBookByTitle et demandez \u00e0 votre assistant : refactor this to use streams Remplacez ensuite le code existant par celui g\u00e9n\u00e9r\u00e9, puis relancez les tests pour v\u00e9rifier que le comportement reste inchang\u00e9. 3.7 Sugg\u00e9rer du code plus complexe (avec streams) \u00b6 Placez-vous maintenant \u00e0 la fin de la classe Library et tapez dans votre code un commentaire d\u00e9crivant une fonctionnalit\u00e9 plus complexe comme par exemple : Implement a method to sort books by year, then by author name Essayez \u00e9galement le commentaire suivant : Implement a method to search for books by keyword in title or author L'assistant vous proposera probablement une impl\u00e9mentation utilisant directement des streams et des lambdas ( -> ). Si ce n'est pas le cas, demandez-lui de refactorer le code en utilisant des streams, comme pr\u00e9c\u00e9demment. 3.8 Explorer d'autres cas d'usage \u00b6 Le dernier petit cas d'usage que vous allez explorer dans ce projet est la conversion entre formats de donn\u00e9es Demandez \u00e0 votre assistant via le chat : Ajoute une m\u00e9thode pour exporter les donn\u00e9es des livres en JSON L'assistant devrait alors vous guider sur o\u00f9 et comment impl\u00e9menter cette m\u00e9thode. En fonction de votre contexte et de vos besoins, vous d\u00e9couvrirez encore de nombreux cas d'usage tout au long de vos phases de d\u00e9veloppement. \u00c0 vous de jouer ! Acc\u00e9dez donc maintenant \u00e0 la partie suivante qui est : 4. Aider \u00e0 la mise en place de nouvelles r\u00e8gles m\u00e9tiers sur un projet existant simple ou retournez \u00e0 l' Accueil .","title":"Mise en place de nouvelles r\u00e8gles m\u00e9tiers dans un projet simple"},{"location":"fr/3_ProjetExistantSimple/#3-aider-a-la-mise-en-place-de-nouvelles-regles-metiers-sur-un-projet-existant-simple","text":"3.1 Avoir une vue d'ensemble du projet 3.2 Mettre en place des tests unitaires Couvrir la classe Book Couvrir la classe LibraryMember 3.3 Aider \u00e0 la bonne mise en place d'une nouvelle r\u00e8gle m\u00e9tier Bien comprendre et impl\u00e9menter la r\u00e8gle m\u00e9tier li\u00e9e \u00e0 la validit\u00e9 d'un ISBN (classe ISBNValidator ) Tester la r\u00e8gle m\u00e9tier (classe ISBNValidatorTest ) Am\u00e9liorer la qualit\u00e9 du code de la r\u00e8gle m\u00e9tier 3.4 Aider \u00e0 l'\u00e9criture d'une expression r\u00e9guli\u00e8re (pattern matching) 3.5 Discuter pour le plaisir de d\u00e9couvrir de nouveaux outils 3.6 Aider \u00e0 l'utilisation de streams et lambdas 3.7 Sugg\u00e9rer du code plus complexe (avec streams) 3.8 Explorer d'autres cas d'usage Commencez par cloner le projet bookai depuis le d\u00e9p\u00f4t GitHub \u00e0 l'adresse suivante : https://github.com/iblasquez/bookai , puis ouvrez-le dans votre IDE pr\u00e9f\u00e9r\u00e9.","title":"3. Aider \u00e0 la mise en place de nouvelles r\u00e8gles m\u00e9tiers sur un projet existant simple"},{"location":"fr/3_ProjetExistantSimple/#31-avoir-une-vue-densemble-du-projet","text":"V\u00e9rifiez d'abord que le projet compile bien, puis parcourez rapidement le code pour avoir une premi\u00e8re impression. Ce projet en est encore \u00e0 ses d\u00e9buts et semble s'inscrire dans le contexte m\u00e9tier d'une biblioth\u00e8que. Il est compos\u00e9 de trois classes principales : Book , LibraryMember , et Library . Aucun test n'a encore \u00e9t\u00e9 r\u00e9ellement \u00e9crit dans BookTest . Dans un projet aussi simple, il n'est pas n\u00e9cessaire de faire appel \u00e0 l'assistant de code pour obtenir une vue d'ensemble.","title":"3.1 Avoir une vue d'ensemble du projet"},{"location":"fr/3_ProjetExistantSimple/#32-mettre-en-place-des-tests-unitaires","text":"Afin de partir sur de bonnes bases (et r\u00e9viser ce qui a \u00e9t\u00e9 vu dans la partie pr\u00e9c\u00e9dente), vous allez commencer par ajouter des tests unitaires \u00e0 ce projet.","title":"3.2 Mettre en place des tests unitaires"},{"location":"fr/3_ProjetExistantSimple/#couvrir-la-classe-book","text":"La classe BookTest existe d\u00e9j\u00e0. Ouvrez-la, supprimez le test inutile qu'elle contient, et laissez votre assistant de code vous proposer une suite de tests que vous validerez. Ex\u00e9cutez les tests. Lancez la couverture de code. Comme la classe Book est un simple POJO, les deux ou trois tests propos\u00e9s par votre assistant devraient suffire pour atteindre une couverture de 100%. Remarque : si vous ne savez pas ce qu'est un POJO, vous pouvez demander \u00e0 votre assistant de code de vous l'expliquer.","title":"Couvrir la classe Book"},{"location":"fr/3_ProjetExistantSimple/#couvrir-la-classe-librarymember","text":"Ouvrez la classe LibraryMember et dans le chat de l'assistant de code, utilisez la commande slash /tests (ou tapez directement Generate unit tests ) pour g\u00e9n\u00e9rer les tests. Utilisez votre IDE pour cr\u00e9er la classe de test LibraryMemberTest au bon endroit et ins\u00e9rez-y le code g\u00e9n\u00e9r\u00e9 par l'assistant. Assurez-vous que les tests compilent correctement sans modifier le code de production . Si n\u00e9cessaire, ajustez le code des tests pour qu'il fonctionne, par exemple peut-\u00eatre devrez-vous compl\u00e9ter le constructeur de Book (avec ou sans l'aide de l'assistant). Par ailleurs, si l'assistant a g\u00e9n\u00e9r\u00e9 une m\u00e9thode de test comme borrowBookTwice , il vous faudra d\u00e9cider de la conserver ou non. Le comportement permettant de g\u00e9rer l'emprunt d'un livre d\u00e9j\u00e0 emprunt\u00e9 n'est pas encore impl\u00e9ment\u00e9 dans le code, \u00e0 vous donc de choisir entre : Supprimer ce test si ce comportement ne vous semble pas pertinent pour l'instant. Conserver ce test si vous estimez qu'il est important de g\u00e9rer cette situation d\u00e8s maintenant, auquel cas vous devrez modifier le code de production pour que le test passe avec succ\u00e8s (avec ou sans l'aide de l'assistant). Lancez les tests et la couverture de code. Consultez la classe LibraryMember . Si certaines portions de la classe LibraryMember ne sont pas couvertes par les tests (et si vous souhaitez qu'elles le deviennent), s\u00e9lectionnez ces parties de code et g\u00e9n\u00e9rez de nouveaux tests avec la commande /tests . Il ne vous reste plus qu'\u00e0 ins\u00e9rer le code des nouveaux tests dans la classe LibraryMember , de les ex\u00e9cuter et de v\u00e9rifier \u00e0 nouveau la couverture de code. Rappel : Dans un projet, l'objectif n'est pas n\u00e9cessairement d'obtenir 100% de couverture. Ici, l'id\u00e9e est juste de montrer comment ajouter rapidement des tests unitaires. D'ailleurs, pour l'instant, nous n'\u00e9crirons pas de tests pour la classe Library .","title":"Couvrir la classe LibraryMember"},{"location":"fr/3_ProjetExistantSimple/#33-aider-a-la-bonne-mise-en-place-dune-nouvelle-regle-metier","text":"","title":"3.3 Aider \u00e0 la bonne mise en place d'une nouvelle r\u00e8gle m\u00e9tier"},{"location":"fr/3_ProjetExistantSimple/#bien-comprendre-et-implementer-la-regle-metier-liee-a-la-validite-dun-isbn-classe-isbnvalidator","text":"Retournez dans la classe Book et examinez ses attributs. Vous constaterez que l' isbn est l'un des attributs du livre. Vous avez probablement une vague id\u00e9e de ce qu'est un isbn (une suite de chiffres). Pour plus de d\u00e9tails, vous pouvez demander dans le chat de votre assistant de code : Pourrais-tu m'expliquer ce qu'est un ISBN ? Dans ce projet, la g\u00e9n\u00e9ration d'un ISBN ne nous int\u00e9resse pas, car l'ISBN est attribu\u00e9 lors de la publication du livre. Cependant, il est crucial de veiller \u00e0 \u00e9viter toute erreur humaine lors de la saisie d'un ISBN . Garantir l' int\u00e9grit\u00e9 des donn\u00e9es (validit\u00e9 et exactitude) est essentiel pour maintenir la qualit\u00e9 du d\u00e9veloppement. Un ISBN, comme un num\u00e9ro de carte bancaire ou de carte vitale, dispose probablement d'une cl\u00e9 de contr\u00f4le pour assurer sa validit\u00e9 . Ce n'est donc pas simplement une suite de chiffres al\u00e9atoires, mais un code qui suit une r\u00e8gle m\u00e9tier . Laissez votre assistant de code vous aider \u00e0 d\u00e9couvrir et \u00e0 impl\u00e9menter cette r\u00e8gle. Demandez \u00e0 votre assistant : Sais-tu s'il existe une r\u00e8gle sp\u00e9cifique pour savoir si un ISBN est correct ? L'assistant devrait vous fournir une explication et probablement une impl\u00e9mentation Java. - Si ce n'est pas le cas, posez-lui directement la question : Pourrais-tu me proposer une impl\u00e9mentation java de cette r\u00e8gle m\u00e9tier ? Cr\u00e9ez ensuite une nouvelle classe ISBNValidator et ins\u00e9rez-y le code g\u00e9n\u00e9r\u00e9 apr\u00e8s avoir rapidement v\u00e9rifi\u00e9 que l'impl\u00e9mentation propos\u00e9e semble respecter la description de la r\u00e8gle. Remarque : Les r\u00e9ponses d'une intelligence g\u00e9n\u00e9rative \u00e9tant probabilistes , votre assistant peut avoir r\u00e9pondu de diff\u00e9rentes mani\u00e8res aux questions pr\u00e9c\u00e9dentes. Il se peut que, dans la classe ISBNValidator , vous vous retrouviez avec une impl\u00e9mentation qui v\u00e9rifie un seul type d'ISBN , alors qu'en r\u00e9alit\u00e9 il en existe deux : ISBN-10 (avant 2007) et ISBN-13 . Vous pouvez approfondir vos connaissance sur cette r\u00e8gle m\u00e9tier en continuant \u00e0 discuter avec l'assistant : Existe-il un autre type isbn ? (question \u00e0 poser si l'assistant n'a mentionn\u00e9 qu'ISBN-13) Quelle est la structure d'un ISBN-10 ? Quelle est la structure d'un ISBN-13 ? Quelle est la diff\u00e9rence entre ISBN-10 et ISBN-13 ? Si l'assistant ne vous a initialement propos\u00e9 qu'une seule m\u00e9thode pour v\u00e9rifier la validit\u00e9 de l'ISBN, demandez-lui maintenant : Pourrais-tu me proposer une impl\u00e9mentation java pour l'isbn10 ? (adaptez bien s\u00fbr votre question en fonction de ce que vous a d\u00e9j\u00e0 propos\u00e9 l'assistant de code) Ins\u00e9rez ensuite ce nouveau code dans la classe ISBNValidator , en veillant \u00e0 ce qu'il corresponde bien \u00e0 la r\u00e8gle m\u00e9tier. Veillez toujours \u00e0 examiner les r\u00e9ponses g\u00e9n\u00e9r\u00e9es par un assistant avant de les int\u00e9grer \u00e0 votre code . Par exemple, assurez-vous ici que la validation de l'ISBN-10 prend correctement en compte les cas particuliers, comme l'utilisation du caract\u00e8re \"X\".","title":"Bien comprendre et impl\u00e9menter la r\u00e8gle m\u00e9tier li\u00e9e \u00e0 la validit\u00e9 d'un ISBN (classe ISBNValidator)"},{"location":"fr/3_ProjetExistantSimple/#tester-la-regle-metier-classe-isbnvalidatortest","text":"Ensuite, cr\u00e9ez une classe ISBNValidatorTest et, avec l'aide de votre assistant, g\u00e9n\u00e9rez des tests couvrant les deux m\u00e9thodes de validation de l'ISBN. Soyez attentif \u00e0 la qualit\u00e9 du code de vos tests et veillez \u00e0 ce qu'ils respectent les bonnes pratiques : \u00e9vitez d'avoir un seul test avec de multiples assertions et privil\u00e9giez des m\u00e9thodes bien nomm\u00e9es qui respectent le pattern AAA (Arrange, Act, Assert). Pour cela, il est pr\u00e9f\u00e9rable de s\u00e9lectionner le code \u00e0 tester et d'utiliser la commande /test (ou le prompt Generate unit tests ) pour g\u00e9n\u00e9rer les tests, plut\u00f4t que de laisser les tests se g\u00e9n\u00e9rer automatiquement en pla\u00e7ant simplement le curseur dans la classe ISBNValidatorTest Lancez les tests. Est-ce que tous les tests passent ? Si certains \u00e9chouent, ne modifiez pas le code de production imm\u00e9diatement. V\u00e9rifiez d'abord si les valeurs utilis\u00e9es dans les tests sont correctes : certes, elles font passer le(s) test(s), mais correspondent-elles \u00e0 un ISBN valide ? En effet, pour garantir la qualit\u00e9 des tests , il est crucial d'\u00eatre attentif \u00e0 la qualit\u00e9 des donn\u00e9es de vos tests (que l'assistant de code ne nous garantit pas forc\u00e9ment). Pour \u00eatre s\u00fbr de tester avec des donn\u00e9es de qualit\u00e9 , vous allez maintenant revisiter (c-a-d modifier) les tests g\u00e9n\u00e9r\u00e9s et les ajuster en utilisant comme exemples dans vos tests de v\u00e9ritables valeurs ISBN , \u00e0 savoir : 9780321146533 quand votre test est cens\u00e9 v\u00e9rifi\u00e9 qu'un ISBN-13 est correct Cet ISBN-13 n'est autre que celui du livre Test-Driven Development de Kent Beck 020161622X quand votre test est cens\u00e9 v\u00e9rifi\u00e9 qu'un ISBN-10 est correct avec la pr\u00e9sence d'un X Cet ISBN-10 n'est autre que a version originale de 1999 du livre The Pragmatic Programmer\" de Andrew Hunt et David Thomas. Cet ISBN-10 n'est autre que a version originale de 1999 du livre The Pragmatic Programmer\" de Andrew Hunt et David Thomas. 0321125215 quand votre test est cens\u00e9 v\u00e9rifi\u00e9 qu'un ISBN-10 est correct Cet ISBN-10 est celui du livre Domain Driven Design d'Eric Evans. Pour tester un ISBN mal form\u00e9 ou invalide , vous pouvez simplement modifier le dernier chiffre, car celui-ci est la cl\u00e9 de contr\u00f4le . Si les tests ne passent pas avec les donn\u00e9es de qualit\u00e9 ci-dessus, demandez \u00e0 votre assistant de vous reg\u00e9n\u00e9rer le code qui pose probl\u00e8me. Conseil : Comme tout refactoring, adoptez une approche m\u00e9thodique pour revisiter/ajuster vos tests avec les v\u00e9ritables valeurs. Avancez progressivement petits pas par petits pas : modifiez une valeur, relancez le test correspondant, puis passez au test suivant . Une fois les deux r\u00e8gles de validation d'ISBN impl\u00e9ment\u00e9e, la revisite des tests termin\u00e9e, relancez tous les tests et la couverture de code pour vous assurer que la classe ISBNValidator est bien couverte \u00e0 100% en vue d'un petit refactoring du code de production.","title":"Tester la r\u00e8gle m\u00e9tier (classe ISBNValidatorTest)"},{"location":"fr/3_ProjetExistantSimple/#ameliorer-la-qualite-du-code-de-la-regle-metier","text":"Revenez dans la classe ISBNValidator . L'assistant a g\u00e9n\u00e9r\u00e9 un code fonctionnel qui r\u00e9pond au besoin, mais ce code est-il de qualit\u00e9 ? Demandez maintenant \u00e0 l'assistant : Comment puis-je am\u00e9liorer la qualit\u00e9 du code de la classe ISBNValidator ? Une IA g\u00e9n\u00e9rative ayant toujours une r\u00e9ponse \u00e0 proposer, l'assistant devrait vous fournir un code de meilleure qualit\u00e9. V\u00e9rifiez que ces am\u00e9liorations vous conviennent (par exemple, les magic numbers ont-ils \u00e9t\u00e9 \u00e9limin\u00e9s ? Des m\u00e9thodes ont-elles \u00e9t\u00e9 extraites ? Des exceptions ont-elles \u00e9t\u00e9 mises en place, etc.). Si la qualit\u00e9 de code vous convient , int\u00e9grez ce code dans votre projet en remplacement du code existant, puis relancez les tests pour vous assurer que les r\u00e8gles de validation de l'ISBN sont toujours respect\u00e9es. Si la qualit\u00e9 du code ne correspond pas \u00e0 vos attentes , soyez plus pr\u00e9cis dans vos demandes en ciblant une seule mauvaise odeur \u00e0 la fois : Pourrais-tu supprimer les magic numbers ? Si le code g\u00e9n\u00e9r\u00e9 vous convient, int\u00e9grez-le \u00e0 la place de l'ancien et relancez les tests. Si vous pensez pouvoir encore am\u00e9liorer la qualit\u00e9 du code, poursuivez la discussion avec votre assistant et continuez le refactoring petit pas par petit pas, en \u00e9liminant chaque mauvaise odeur de code au fur et \u00e0 mesure et relan\u00e7ant les tests \u00e0 chaque fois. Pourrais-tu proc\u00e9der \u00e0 des extract method ? [\u2026] N'oubliez pas que c'est votre expertise et vos bonnes pratiques qui garantiront la qualit\u00e9 du code . Les assistants de code peuvent vous aider \u00e0 g\u00e9n\u00e9rer du code rapidement, mais **une revue attentive est n\u00e9cessaire pour \u00e9viter l'accumulation de dette technique, qui pourrait devenir co\u00fbteuse \u00e0 long terme comme le montre certaines \u00e9tudes comme gitclear et uplevelteam . En effet \u00e0 ce jour, les mod\u00e8les des assistants de code tendent \u00e0 reproduire la dette technique pr\u00e9sente dans les donn\u00e9es sur lesquelles ils ont \u00e9t\u00e9 entra\u00een\u00e9s. Toutefois, au rythme rapide o\u00f9 \u00e9voluent les mod\u00e8les de langage (LLM), on peut esp\u00e9rer qu'ils b\u00e9n\u00e9ficieront un jour de jeux de donn\u00e9es plus qualitatifs et de nouvelles techniques d'apprentissage qui pourraient leur permettre d'am\u00e9liorer progressivement la qualit\u00e9 du code qu'ils g\u00e9n\u00e8rent.","title":"Am\u00e9liorer la qualit\u00e9 du code de la r\u00e8gle m\u00e9tier"},{"location":"fr/3_ProjetExistantSimple/#34-aider-a-lecriture-dune-expression-reguliere-pattern-matching","text":"Les expressions r\u00e9guli\u00e8res sont des mod\u00e8les utilis\u00e9s pour identifier des combinaisons sp\u00e9cifiques de caract\u00e8res dans des cha\u00eenes. Ecrire une expression r\u00e9guli\u00e8re est souvent per\u00e7ue comme une t\u00e2che fastidieuse par les d\u00e9veloppeurs , l'assistant de code peut vous aider \u00e0 les g\u00e9n\u00e9rer rapidement. Ouvrez la classe LibraryMember et demandez \u00e0 votre assistant dans le chat : Pourrais-tu me cr\u00e9er une expression r\u00e9guli\u00e8re pour valider un email ? L'assistant vous proposera probablement une expression r\u00e9guli\u00e8re dont la premi\u00e8re partie ressemble \u00e0 : ^[a-zA-Z0-9._%+-]+ o\u00f9 : \u2192 le symbole ^ marque le d\u00e9but de la ligne : l'adresse e-mail doit commencer ici. \u2192 La partie entre crochets [\u2026]+ sp\u00e9cifie que l'adresse e-mail doit contenir un ou plusieurs ( + ) caract\u00e8res d\u00e9finis \u00e0 l'int\u00e9rieur des crochets : minuscules ( a-z ), majuscules ( A-Z ), chiffres ( 0-9 ), ou certains caract\u00e8res sp\u00e9ciaux comme le point ( . ), l'underscore ( _ ), le pourcentage ( % ), le signe plus ( + ) ou le trait d'union ( - ). \u2192 La partie qui suit le symbole @ , obligatoire dans toute adresse e-mail, peut varier, et donc \u00eatre plus ou moins contraignante, en fonction de la r\u00e9ponse g\u00e9n\u00e9r\u00e9e par l'assistant, qui reste probabiliste. Si vous avez des exigences sp\u00e9cifiques pour cette partie de l'expression, n'h\u00e9sitez pas \u00e0 les indiquer \u00e0 l'assistant afin d'affiner le mod\u00e8le. Gardez \u00e0 l'esprit que l'assistant peut vous faire gagner du temps en limitant les t\u00e2ches r\u00e9p\u00e9titives et fastidieuses, mais qu'il est essentiel de toujours v\u00e9rifier et ajuster le code g\u00e9n\u00e9r\u00e9 pour qu'il r\u00e9ponde pr\u00e9cis\u00e9ment \u00e0 vos besoins. Si vous souhaitez approfondir la contrainte sur les noms de domaine , vous pouvez poser la question suivante \u00e0 l'assistant : Quelles sont les r\u00e8gles classiques pour les noms de domaines dans les emails ? Une fois que vous avez pris connaissance de ces r\u00e8gles, demandez \u00e0 votre assistant de r\u00e9\u00e9crire la m\u00e9thode isValidEmail en tenant compte de ces contraintes.","title":"3.4 Aider \u00e0 l'\u00e9criture d'une expression r\u00e9guli\u00e8re (pattern matching)"},{"location":"fr/3_ProjetExistantSimple/#35-discuter-pour-le-plaisir-de-decouvrir-de-nouveaux-outils","text":"La validation des e-mails n'est pas une fonctionnalit\u00e9 propre \u00e0 votre application. Il est \u00e9vident que de nombreux d\u00e9veloppeurs ont d\u00e9j\u00e0 impl\u00e9ment\u00e9 cette r\u00e8gle avant vous. Par curiosit\u00e9, vous pourriez demander \u00e0 votre assistant : Pourrais-tu \u00e9crire ce code autrement ? Y-a-t-il d'autres m\u00e9thodes que le pattern matching pour valider un mail ? Votre assistant vous incitera certainement \u00e0 approfondir vos connaissances dans ce domaine en vous proposant des questions comme : Quelles sont les autres m\u00e9thodes pour valider une adresse e-mail en Java ? Quelles biblioth\u00e8ques tierces existent pour valider une adresse e-mail en Java ? [\u2026] Vous d\u00e9couvrirez ainsi qu'il existe plusieurs approches pour valider une adresse e-mail, en plus du pattern matching. Pourquoi r\u00e9inventer la roue ? Apr\u00e8s cette discussion enrichissante, vous pourrez choisir la solution la plus adapt\u00e9e \u00e0 vos besoins.","title":"3.5 Discuter pour le plaisir de d\u00e9couvrir de nouveaux outils"},{"location":"fr/3_ProjetExistantSimple/#36-aider-a-lutilisation-de-streams-et-lambdas","text":"Placez-vous \u00e0 la fin de la classe Library , commencez \u00e0 taper : public List<Book> search Laissez l'assistant de code proposer une signature et une impl\u00e9mentation. L'objectif est de continuer \u00e0 taper jusqu'\u00e0 ce qu'il propose de g\u00e9n\u00e9rer la m\u00e9thode suivante : public List<Book> searchBookByTitle(String Title) Apr\u00e8s avoir rapidement v\u00e9rifi\u00e9 que l'impl\u00e9mentation de cette m\u00e9thode correspond \u00e0 son intention m\u00e9tier, validez-la . Utilisez ensuite l'assistant pour g\u00e9n\u00e9rer les tests qui couvrent cette m\u00e9thode en s\u00e9lectionnant le code de la m\u00e9thode et en utilisant /tests Faites compiler le code en ajoutant \u00e9ventuellement les imports n\u00e9cessaires. Si un test \u00e9choue, examinez attentivement la qualit\u00e9 des donn\u00e9es utilis\u00e9es dans ce test . En effet, si tout comme moi, les probabilit\u00e9s ne sont pas avec vous aujourd'hui, vous pourriez \u00eatre victime de l' hallucination suivante : \u2192 \u00c0 premi\u00e8re vue, les donn\u00e9es du test peuvent para\u00eetre correctes, mais le test \u00e9choue sur l'assertion assertTrue . En effet, l'assistant de code a utilis\u00e9, par erreur, la valeur d'un auteur d'un livre comme param\u00e8tre dans la m\u00e9thode searchBookByTitle au lieu de la valeur d'un titre . Cette confusion est probablement due \u00e0 la primitive obsession dans la signature du constructeur de Book , qui prend trop de param\u00e8tres de type String . L'assistant n'a donc pas su faire la distinction entre les diff\u00e9rents param\u00e8tres String et n'a pas reconnu celui correspondant au titre . Pour faire passer le test avec les donn\u00e9es actuelles, il faudrait donc passer 123 en param\u00e8tre \u00e0 la place de Effective Java . \u2192 Cependant, en \u00e9crivant 123 comme param\u00e8tre d'entr\u00e9e pour la m\u00e9thode searchBooksByTitle , vous vous rendez compte que les donn\u00e9es de test sont de mauvaise qualit\u00e9. En effet, pour un \u0153il humain, dans le contexte m\u00e9tier de l'application, Clean Code ou Effective Java sont de v\u00e9ritables titres de livres. Dans les tests qu'il a g\u00e9n\u00e9r\u00e9s, l'assistant a pris ces valeurs comme exemples pour les noms d'auteurs, ce qui est inappropri\u00e9 et risque d'induire des erreurs/confusions lors de la (re)lecture ou de l'interpr\u00e9tation manuelle des tests. Au passage, on peut \u00e9galement noter que l'ISBN utilis\u00e9 dans l'exemple du livre Effective Java n'\u00e9tait pas le bon car c'est en r\u00e9alit\u00e9 le v\u00e9ritable ISBN du livre Design Patterns: Elements of Reusable Object Oriented Software du Gang of Four \ud83d\ude09. \u2192 Pour am\u00e9liorer la lisibilit\u00e9 (et donc la compr\u00e9hension) de votre test, il est recommand\u00e9 d'ajuster le test avec de v\u00e9ritables valeurs m\u00e9tiers , plus pertinentes et coh\u00e9rentes. Le test pr\u00e9c\u00e9dent, revisit\u00e9 dans ce sens, ressemble maintenant \u00e0 cela : Cette hallucination nous donne l'occasion de rappeler qu' il faut \u00eatre tr\u00e8s vigilant \u00e0 la qualit\u00e9 des donn\u00e9es dans les tests g\u00e9n\u00e9r\u00e9s , et que les valeurs prises comme exemple, tout comme le code, n\u00e9cessitent une relecture de votre part. Toutefois, il est int\u00e9ressant de remarquer qu'une hallucination de l'assistant peut aussi mettre sur la voie des probl\u00e8mes de conception (mauvaises odeurs), que seule votre expertise d\u00e9tectera. Une fois les tests corrig\u00e9s, relancez-les pour vous assurer qu'ils passent bien tous. Si l'assistant a g\u00e9n\u00e9r\u00e9 un code utilisant une boucle for , mais que vous pr\u00e9f\u00e9rez travailler avec des streams , s\u00e9lectionnez tout le code de la m\u00e9thode searchBookByTitle et demandez \u00e0 votre assistant : refactor this to use streams Remplacez ensuite le code existant par celui g\u00e9n\u00e9r\u00e9, puis relancez les tests pour v\u00e9rifier que le comportement reste inchang\u00e9.","title":"3.6 Aider \u00e0 l'utilisation de streams et lambdas"},{"location":"fr/3_ProjetExistantSimple/#37-suggerer-du-code-plus-complexe-avec-streams","text":"Placez-vous maintenant \u00e0 la fin de la classe Library et tapez dans votre code un commentaire d\u00e9crivant une fonctionnalit\u00e9 plus complexe comme par exemple : Implement a method to sort books by year, then by author name Essayez \u00e9galement le commentaire suivant : Implement a method to search for books by keyword in title or author L'assistant vous proposera probablement une impl\u00e9mentation utilisant directement des streams et des lambdas ( -> ). Si ce n'est pas le cas, demandez-lui de refactorer le code en utilisant des streams, comme pr\u00e9c\u00e9demment.","title":"3.7 Sugg\u00e9rer du code plus complexe (avec streams)"},{"location":"fr/3_ProjetExistantSimple/#38-explorer-dautres-cas-dusage","text":"Le dernier petit cas d'usage que vous allez explorer dans ce projet est la conversion entre formats de donn\u00e9es Demandez \u00e0 votre assistant via le chat : Ajoute une m\u00e9thode pour exporter les donn\u00e9es des livres en JSON L'assistant devrait alors vous guider sur o\u00f9 et comment impl\u00e9menter cette m\u00e9thode. En fonction de votre contexte et de vos besoins, vous d\u00e9couvrirez encore de nombreux cas d'usage tout au long de vos phases de d\u00e9veloppement. \u00c0 vous de jouer ! Acc\u00e9dez donc maintenant \u00e0 la partie suivante qui est : 4. Aider \u00e0 la mise en place de nouvelles r\u00e8gles m\u00e9tiers sur un projet existant simple ou retournez \u00e0 l' Accueil .","title":"3.8 Explorer d'autres cas d'usage"},{"location":"fr/4_ProjetExistantComplexe/","text":"4. Quid d'un assistant de code pour la reprise d'un projet complexe existant (legacy code) \u00b6 4.1 Avoir une vision et une compr\u00e9hension globale du projet 4.1.a Premi\u00e8re vision globale du projet 4.1.b Garder une trace de la vision globale du projet dans un README 4.1.c Approfondir la vision globale du projet Explorer les points d'entr\u00e9e du syst\u00e8me Explorer le m\u00e9tier ( classe WordAnalyticsService , classe FileReader , classe JavaFileParser , essayer de comprendre rapidement un choix de conception ) Vision plus globale du m\u00e9tier (module common ) Vision plus globale du projet et pr\u00e9cision des r\u00e9ponses 4.2 Mettre en place un environnement de d\u00e9veloppement fonctionnel 4.3 Am\u00e9liorer la qualit\u00e9 de code d'un projet existant 4.3.a Bien comprendre les choix de conception et le code existant Se rafra\u00eechir la m\u00e9moire sur le comportement de la classe Explorer le concept d'AST (Abstract Syntax Tree) Comprendre l'impl\u00e9mentation de l'AST dans JavaFileParser Explorer la m\u00e9thode processFile Le Pattern Visiteur et VoidVisitorPattern 4.3.b Aider \u00e0 la mise en place de nouveaux tests unitaires Am\u00e9liorer la couverture de code de la classe WordAnalyticsService Tester la classe JavaFileParser 4.3.c Aider au refactoring 4.3.d Aider \u00e0 la revue de code 4.4 Proposer des pistes d'am\u00e9lioration sur des probl\u00e9matiques sensibles Dans un article r\u00e9cent intitul\u00e9 Legacy Modernization meets GenAI , Martin Fowler a \u00e9crit : Jusqu'\u00e0 pr\u00e9sent, la majorit\u00e9 de l'attention port\u00e9e \u00e0 l'intelligence artificielle g\u00e9n\u00e9rative (GenAI) dans le d\u00e9veloppement logiciel est ax\u00e9e sur la g\u00e9n\u00e9ration de code. Mais nous croyons qu'il y a autant, voire plus, de valeur dans la compr\u00e9hension du code existant - en particulier des syst\u00e8mes h\u00e9rit\u00e9s complexes, volumineux et anciens. GitHub Copilot est un outil d'IA g\u00e9n\u00e9rative pour le code parmi d'autres ( Codeium , Cursor , Supermaven , Tabnine ,..) qui peut nous aider dans ce sens, en nous fournissant aussi bien une vue d'ensemble d'un syst\u00e8me, qu'en d\u00e9taillant des points pr\u00e9cis d'un code legacy pour mieux le comprendre et \u00e9ventuellement en am\u00e9liorer sa qualit\u00e9. Pour ce tutoriel, vous utiliserez le code du projet codelinguo d\u00e9velopp\u00e9 par un groupe d'\u00e9tudiants de 3\u00e8me ann\u00e9e de BUT Informatique dans le cadre d'une SAE (Situation d'Apprentissage et d'\u00c9valuation). Vous commencerez donc par cloner ce projet : https://github.com/carlodrift/codelinguo et ouvrirez ce projet dans votre IDE pr\u00e9f\u00e9r\u00e9 muni de Copilot (IntelliJ ou Visual Studio). Disclaimer : Tout au long de ce tutoriel, restez attentif aux r\u00e9ponses fournies par votre assistant de code. Comme tout outil d'IA g\u00e9n\u00e9rative, il peut parfois produire des \" hallucinations \". Bien que ces outils soient tr\u00e8s pratiques, il est essentiel de garder un esprit critique. Votre libre arbitre reste indispensable pour faire la part des choses entre les suggestions de l'assistant et la r\u00e9alit\u00e9 de votre projet. Pour le moment, contentez-vous uniquement d'ouvrir ce projet dans votre IDE pr\u00e9f\u00e9r\u00e9. Pour obtenir une vue d'ensemble du projet, il n'est pas utile d'essayer de compiler ou de builder le projet (ce point sera trait\u00e9 un peu plus tard). Ayez juste le code de votre projet sous les yeux dans l'IDE, avec un chat Copilot ouvert, et laissez-vous guider... 4.1 Avoir une vision et une compr\u00e9hension globale du projet \u00b6 4.1.a Premi\u00e8re vision globale du projet \u00b6 Apr\u00e8s avoir ouvert le chat de votre assistant de code dans votre IDE, vous pouvez interagir avec lui, que ce soit en fran\u00e7ais ou en anglais, de mani\u00e8re plus ou moins d\u00e9taill\u00e9e comme vu pr\u00e9c\u00e9demment. Commencez, par exemple, par lui demander une vision globale du projet en anglais : describe this project ou en fran\u00e7ais : Pourrais-tu me d\u00e9crire ce projet ou m\u00eame en utilisant des agents de conversation /explain @workspace Au-del\u00e0 de votre assistant de code , vous disposez toujours de votre exp\u00e9rience/expertise en d\u00e9veloppement logiciel. Explorez \u00e9galement manuellement le projet dans votre IDE (architecture, noms des classes\u2026). En d\u00e9pliant l'arborescence du projet , vous constatez qu'il est structur\u00e9 autour de : 3 modules Maven : cli , common , desktop 1 module Gradle : intellij-plugin Selon votre exp\u00e9rience/expertise, vous avez peut-\u00eatre envie de poser des questions suppl\u00e9mentaires \u00e0 votre assistant : \u00c0 quoi correspond cli ? desktop ? intellij-plugin ? common ? dans ce projet Et si vous lui reposez ensuite la question : Pourrais-tu me d\u00e9crire le projet ? La r\u00e9ponse sera plus d\u00e9taill\u00e9e que pr\u00e9c\u00e9demment, car au fil des discussions, l'assistant enrichit son contexte des informations apprises lors des \u00e9changes pr\u00e9c\u00e9dents. Au-del\u00e0 des questions techniques , vous pouvez \u00e9galement interroger l'assistant sur la finalit\u00e9 de l'application avec des questions telles que : Quel est selon toi le contexte m\u00e9tier de l'application ? \u00c0 quoi sert cette application ? 4.1.b Garder une trace de la vision globale du projet dans un README \u00b6 Dans un projet collaboratif, le fichier README est essentiel pour fournir une vue d'ensemble et aider les collaborateurs \u00e0 se familiariser rapidement avec le projet. Le projet que vous avez r\u00e9cup\u00e9r\u00e9 n'en contient pas ? Pas de souci, vous pouvez demander \u00e0 l'assistant de g\u00e9n\u00e9rer un README bas\u00e9 sur ce qu'il a vu dans le projet, en utilisant par exemple le prompt suivant : @workspace generate a readme document that can be used as a repo description Remarque : Pour l'instant, vous \u00eates juste en mode exploration du projet avec votre assistant de code, sans intention d'ajouter de code. Si plus tard vous d\u00e9cidez d'inclure un README dans le projet, vous pourrez r\u00e9utiliser le prompt pr\u00e9c\u00e9dent. Gr\u00e2ce aux nombreuses interactions que vous aurez eues entre-temps, le README g\u00e9n\u00e9r\u00e9 n'en sera que plus d\u00e9taill\u00e9 et pertinent. 4.1.c Approfondir la vision globale du projet \u00b6 Pour aller plus loin dans votre compr\u00e9hension, continuez \u00e0 interroger/challenger l'assistant sur les points d'entr\u00e9e du syst\u00e8me et quelques classes m\u00e9tier de l'application. Explorer les points d'entr\u00e9e du syst\u00e8me \u00b6 Votre assistant vous a d\u00e9j\u00e0 peut-\u00eatre mentionn\u00e9 les points d'entr\u00e9e, n'h\u00e9sitez pas \u00e0 lui demander explicitement de les \u00e9num\u00e9rer \u00e0 nouveau : Quels sont les points d'entr\u00e9e du syst\u00e8me ?\" Remarque : La r\u00e9ponse que vous obtiendrez peut \u00eatre une hallucination (sur le nom de la classe consid\u00e9r\u00e9e comme point d'entr\u00e9e), mais elle devrait n\u00e9anmoins vous guider dans la bonne direction. Commencez par ouvrir le fichier Main.java dans le module cli ( fr.unilim.codelinguo.cli ) et, de la m\u00eame mani\u00e8re que tout ce qui a \u00e9t\u00e9 fait pr\u00e9c\u00e9demment, posez des questions comme : Pourrais-tu me d\u00e9crire ce code ? /explain this , /explain this class (\u00e0 vous de voir le type de formulation et le(s) langue(s) que vous pr\u00e9f\u00e9rez utiliser) De la m\u00eame mani\u00e8re , ouvrez le fichier Main.kt dans le module desktop ( fr.unilim.codelinguo.desktop ) et discutez avec votre assistant de code. Enfin , ouvrez le fichier Main.java dans le module intellij-plugin ( fr.unilim.codelinguo.intellijplugin ) et \u00e9changez avec votre assistant. Dans les r\u00e9ponses de l'assistant, certains noms de classes m\u00e9tier, comme FileReader et WordAnalyticsService , vont probablement ressortir plusieurs fois. Cela devrait vous inciter \u00e0 explorer le module common pour en apprendre davantage sur le domaine m\u00e9tier de l'application. Explorer le m\u00e9tier \u00b6 Vous pouvez explorer le c\u00f4t\u00e9 m\u00e9tier de l'application de mani\u00e8re plus ou moins d\u00e9taill\u00e9e. Par o\u00f9 commencer ? Pourquoi ne pas d\u00e9buter avec la classe WordAnalyticsService , mentionn\u00e9e lors de vos pr\u00e9c\u00e9dents \u00e9changes ? Zoom sur la classe WordAnalyticsService \u00b6 Pour commencer, localisez la classe dans le projet et ouvrez la classe . Pour cela, aidez-vous de l'assistant en lui demandant : O\u00f9 se trouve la classe WordAnalyticsService ? Une fois la classe ouverte, engagez la discussion avec l'assistant pour obtenir une vision globale de la classe : Que fait ce code ? Pourquoi la classe WordAnalyticsService ? (pour une r\u00e9ponse plus m\u00e9tier ) /explain this (pour une r\u00e9ponse plus technique expliquant comment le code fonctionne) Vous venez d'obtenir des r\u00e9ponses plus ou moins d\u00e9taill\u00e9es, plus ou moins orient\u00e9es m\u00e9tier, plus ou moins techniques. Il est donc important de remarquer que, outre le caract\u00e8re probabiliste des r\u00e9ponses g\u00e9n\u00e9r\u00e9es par une IA G\u00e9n\u00e9rative, le style et le contenu de la r\u00e9ponse vont \u00eatre diff\u00e9rents suivant la mani\u00e8re dont vous posez vos questions (prompt). Pour vous en convaincre, testez diff\u00e9rentes formulations pour voir comment elles influencent les r\u00e9ponses de l'assistant : Pourrais-tu me d\u00e9crire la classe WordAnalyticsService Pourrais-tu m'expliquer la classe WordAnalyticsService A quoi sert la classe WordAnalyticsService ? Explain how the code works ? Explain how this code can be used ? Explain why this code exists ? ... Lorsque vous \u00e9changez avec une IA g\u00e9n\u00e9rative, pour obtenir des r\u00e9ponses pertinentes , il est important d' apprendre \u00e0 bien communiquer avec cette IA, un peu comme on apprendrait \u00e0 communiquer dans une nouvelle langue \u00e9trang\u00e8re (utiliser les bonnes formulations, les mots ad\u00e9quats, poser les questions au bon moment\u2026). Il est donc n\u00e9cessaire de vous entra\u00eener \u00e0 discuter avec votre IA afin de trouver les formulations et le mode d'expression qui correspondent \u00e0 vos besoins. Prendre le temps d'apprendre \u00e0 formuler votre prompt avec pr\u00e9cision est un passage essentiel pour obtenir des r\u00e9ponses pr\u00e9cises et \u00eatre encore plus productif avec votre IA Disclaimer : \u00c0 long terme, votre style de communication diff\u00e9rera s\u00fbrement du phras\u00e9 propos\u00e9 dans ce tutoriel. Ce tutoriel est uniquement con\u00e7u pour vous aider \u00e0 survoler quelques cas d'usage qui pourraient vous \u00eatre utiles au quotidien, en se basant sur des interactions simples. Libre \u00e0 vous, par la suite, de personnaliser et perfectionner votre langage pour interagir efficacement avec votre assistant de code pr\u00e9f\u00e9r\u00e9. Il est maintenant temps d'explorer les d\u00e9pendances de la classe WordAnalyticsService . Posez la question suivante \u00e0 l'assistant : Quelles sont les d\u00e9pendances de cette classe ? En fonction de la r\u00e9ponse obtenue, continuez la discussion : Pourquoi la classe Word ? Que fait le code de la classe Word ? [...] N'h\u00e9sitez pas \u00e0 poursuivre les \u00e9changes avec l'assistant pour approfondir votre compr\u00e9hension de cette classe. IDE ou Assistant ? \u00b6 Ouvrez maintenant la classe Glossary et interagissez, comme \u00e0 votre habitude, avec l'assistant : Pourquoi la classe Glossary ? Que fait ce code ? /explain this [...] Ensuite, posez la question suivante : Pourrais-tu me donner toutes les classes qui d\u00e9pendent de Glossary ? Il est fort probable que votre assistant vous sugg\u00e8re, pour un tel cas d'usage, de plut\u00f4t utiliser les outils de l'IDE pour une r\u00e9ponse plus compl\u00e8te . Vous devriez obtenir des r\u00e9ponses du type : Pour une analyse compl\u00e8te, il serait n\u00e9cessaire de rechercher toutes les occurrences de Glossary dans le projet ou Pour une recherche exhaustive, vous pouvez utiliser les fonctionnalit\u00e9s de recherche de votre IDE (IntelliJ IDEA) pour trouver toutes les occurrences de Glossary dans le projet. C'est donc le bon moment pour rappeler qu'il est essentiel d' utiliser son assistant de code de mani\u00e8re r\u00e9fl\u00e9chie et pour des cas d'usages pertinents , d'autant plus que les requ\u00eates faites aupr\u00e8s d'outils d'IA g\u00e9n\u00e9rative ont un co\u00fbt \u00e9nerg\u00e9tique tr\u00e8s (voire trop) \u00e9lev\u00e9 de nos jours comme le mentionne un article de la Tribune Futurs de Novembre 2024 Zoom sur la classe FileReader \u00b6 Lors de vos premiers \u00e9changes sur la vision globale du projet, la classe FileReader a probablement \u00e9t\u00e9 mentionn\u00e9e par votre assistant. C'est le moment d'en apprendre davantage sur elle. Ouvrez la classe FileReader et discutez avec votre assistant : Pourquoi la classe FileReader ? Que fait ce code ? /explain this [...] Les r\u00e9ponses fournies par votre assistant ne vous auraient-elles pas donn\u00e9 envie d'aller explorer la classe JavaFileParser ? Zoom sur la classe JavaFileParser \u00b6 Ouvrez la classe JavaFileParser et engagez la discussion : Pourquoi la classe JavaFileParser ? Que fait ce code ? /explain this [...] Demandez ensuite \u00e0 votre assistant : O\u00f9 est utilis\u00e9e la classe JavaFileParser ? \u2192 Si vous avez de la chance (que les probabilit\u00e9s sont avec vous), l'assistant pourrait vous r\u00e9v\u00e9ler l'extrait de code suivant tir\u00e9 de la classe FileReader : kotlin private val fileSanitizers = mapOf( \".java\" to JavaFileParser(), \".kt\" to KotlinFileSanitizer(), \".py\" to PythonFileSanitizer(), \".js\" to JavascriptFileSanitizer(), \".html\" to HtmlFileSanitizer() ) \u2192 Si vous n'avez pas eu la chance d'obtenir ce bout de code, reformulez votre question : Montre-moi comment est utilis\u00e9 JavaFileParser ? Si vous n'obtenez toujours pas le bout de code recherch\u00e9 ( les r\u00e9ponses des IA g\u00e9n\u00e9ratives \u00e9tant probabilistes, m\u00eame avec une formulation tr\u00e8s pr\u00e9cise, il est impossible de garantir un r\u00e9sultat ), allez directement dans la classe FileReader pour v\u00e9rifier que ce bout de code y est bien pr\u00e9sent. Comme mentionn\u00e9 en d\u00e9but de tutoriel, quelle que soit la r\u00e9ponse obtenue, il est toujours pr\u00e9f\u00e9rable de v\u00e9rifier sa coh\u00e9rence avec le contenu du projet pour s'assurer qu'il ne s'agit pas d'une hallucination . Ainsi, dans tous les cas, un bon r\u00e9flexe consiste \u00e0 aller v\u00e9rifier que le code est bien pr\u00e9sent dans la classe FileReader . Essayer de comprendre rapidement un choix de conception \u00b6 Relisez attentivement l'extrait de code pr\u00e9c\u00e9dent. La lecture de ce code ne soul\u00e8ve-t-elle pas chez vous quelques questions du genre : Pourquoi utilise-t-on JavaFileParser pour les fichiers .java , alors que pour d'autres langages, on emploie des Sanitizers ? D'autant plus qu'en explorant l'arborescence, vous remarquez qu'un fichier JavaFileSanitizer existe bien dans le projet. Si vous ne souhaitez pas passer trop de temps \u00e0 comprendre ce choix de conception, demandez directement \u00e0 l'assistant de vous \u00e9claircir sur ce point : O\u00f9 est utilis\u00e9e la classe JavaFileSanitizer ? Pourquoi utiliser JavaFileParser plut\u00f4t que JavaFileSanitizer ? Quand faut-il utiliser JavaFileParser et quand JavaFileSanitizer ? [...] (\u00e0 vous de trouver la bonne formulation pour \u00e9lucider et comprendre rapidement ce choix de conception qui peut para\u00eetre \u00e9tonnant \u00e0 la lecture de code) Vision plus globale du m\u00e9tier (module common ) \u00b6 Les interactions pr\u00e9c\u00e9dentes ont permis \u00e0 votre assistant de code, ainsi qu'\u00e0 vous-m\u00eame, d'en apprendre un peu plus sur le projet. En ce qui concerne le module common , vous avez, jusqu'\u00e0 pr\u00e9sent, explor\u00e9 certains points de d\u00e9tails de ce module. Pour obtenir une vision plus g\u00e9n\u00e9rale de ce module et mieux comprendre son r\u00f4le dans le projet, demandez \u00e0 votre assistant : Pourrais-tu me d\u00e9crire common ? Que comprends-tu de la probl\u00e9matique m\u00e9tier de cette application ? [...] Pensez-vous que les r\u00e9ponses apport\u00e9es par l'assistant ont \u00e9t\u00e9 influenc\u00e9es par les interactions que vous avez eues pr\u00e9c\u00e9demment ? Vision plus globale du projet et pr\u00e9cision des r\u00e9ponses \u00b6 Au fur et \u00e0 mesure que vous \u00e9changez avec votre assistant de code, ses r\u00e9ponses deviennent de plus en plus pr\u00e9cises. Si vous lui demandez \u00e0 nouveau une vision globale du projet avec les m\u00eames questions qu'au d\u00e9but de la discussion : Describe this project Pourrais-tu me d\u00e9crire ce projet /explain this project [...] Vous constaterez que les r\u00e9ponses sont plus d\u00e9taill\u00e9es et sp\u00e9cifiques qu'au d\u00e9but de la discussion. Cela s'explique par le fait que, lors de vos interactions, l'assistant a explor\u00e9 diff\u00e9rentes parties du projet en fonction des questions pos\u00e9es. Il a ainsi m\u00e9moris\u00e9 des informations sur ces parties, lui permettant d'affiner son contexte et donc de fournir des r\u00e9ponses plus pertinentes et cibl\u00e9es. Cela montre l'importance d'interagir progressivement, \u00e9tape par \u00e9tape, avec votre assistant de code. En posant des questions de plus en plus pr\u00e9cises , vous affinez la compr\u00e9hension du projet et am\u00e9liorez la qualit\u00e9 des r\u00e9ponses de l'assistant. Toutefois, une des limites actuelles des assistants de code est que la m\u00e9moire est limit\u00e9e \u00e0 la session/discussion en cours. Si vous d\u00e9marrez une nouvelle session, la connaissance acquise sur le projet sera perdue. \u00c0 ce jour, il n'y a pas de m\u00e9moire \u00e0 long terme ou RAG (Retrieval Augmented Generation) dans les assistants de code. Cependant, des \u00e9volutions sont s\u00fbrement en pr\u00e9paration, comme le montre la fonctionnalit\u00e9 de m\u00e9moire entre conversations r\u00e9cemment introduite dans les versions de ChatGPT. 4.2 Mettre en place un environnement de d\u00e9veloppement fonctionnel \u00b6 Jusqu'\u00e0 pr\u00e9sent, l'assistant de code vous a uniquement aid\u00e9 \u00e0 comprendre le comportement du code existant, sans v\u00e9rifier si ce dernier \u00e9tait compilable et fonctionnel. Si vous souhaitez aller plus loin avec ce code (effectuer du refactoring, ajouter de nouvelles fonctionnalit\u00e9s, etc.), il devient n\u00e9cessaire de faire compiler ce projet et de l'ex\u00e9cuter dans votre IDE pr\u00e9f\u00e9r\u00e9. Pour continuer ce tutoriel, l'objectif est simple : assurez-vous que le projet compile et que vous pouvez lancer le main du module cli depuis l'IDE . (Concentrez-vous uniquement sur ce main , cela garantit d\u00e9j\u00e0 un environnement de d\u00e9veloppement fonctionnel.) D\u00e8s que vous pouvez ex\u00e9cuter ( Run ner) le Main du module cli depuis votre IDE et que vous visualisez une ex\u00e9cution correcte dans la console (comme montr\u00e9 dans l'exemple ci-dessus pour une ex\u00e9cution du main sans param\u00e8tre ), vous serez pr\u00eat \u00e0 poursuivre. Ensuite, toujours depuis l'IDE, lancez le Main du module cli en passant comme premier (et seul) param\u00e8tre le chemin absolu du fichier WordAnalyticsService.java du projet codelinguo que vous avez sous les yeux. Si tout se d\u00e9roule correctement, vous devriez voir un affichage dans la console similaire \u00e0 la capture d'\u00e9cran ci-dessous : Bien entendu, l'assistant de code est aussi votre ami pour r\u00e9soudre des probl\u00e8mes li\u00e9s au bon fonctionnement de votre IDE ou \u00e0 votre environnement de travail. Il ne se limite pas \u00e0 l'interaction avec le code. Si n\u00e9cessaire, n'h\u00e9sitez pas \u00e0 solliciter son aide en lui posant, par exemple, l'une des questions suivantes : Comment lancer le main du module cli ? Comment lancer le main du module cli depuis l'IDE ? Comment lancer le main du module cli depuis l'IDE en passant le chemin absolu du fichier WordAnalyticsService.java comme param\u00e8tre ? [...] Continuez \u00e9ventuellement cette discussion en fonction de vos besoins et de votre exp\u00e9rience si vous avez besoin d'informations suppl\u00e9mentaires pour arriver \u00e0 vos fins, c'est-\u00e0-dire obtenir des affichages similaires aux captures d'\u00e9cran ci-dessus. 4.3 Am\u00e9liorer la qualit\u00e9 de code d'un projet existant \u00b6 Pour cette derni\u00e8re partie, nous allons nous focaliser sur la classe JavaFileParser . Commencez par ouvrir la classe JavaFileParser . 4.3.a Bien comprendre les choix de conception et le code existant \u00b6 Avant de proc\u00e9der \u00e0 un quelconque refactoring pour am\u00e9liorer la qualit\u00e9 du code de cette classe, il est essentiel de bien comprendre le comportement de cette classe et d'avoir une bonne vision du code existant. Se rafra\u00eechir la m\u00e9moire sur le comportement de la classe :** \u00b6 Vous avez d\u00e9j\u00e0 eu de nombreuses interactions avec cette classe ; une simple question \u00e0 votre assistant de code devrait vous aider \u00e0 vous rafra\u00eechir la m\u00e9moire : Pourquoi la classe JavaFileParser ? R\u00e9ponds-moi en fran\u00e7ais. Remarque : Au cours de vos pr\u00e9c\u00e9dents \u00e9changes avec votre assistant, outre les hallucinations, vous avez s\u00fbrement observ\u00e9 des comportements \u00e9tranges dans les r\u00e9ponses de votre assistant (encore une fois dus au c\u00f4t\u00e9 probabiliste des mod\u00e8les de langage (LLM) et \u00e0 leur entra\u00eenement). Par exemple : Si vous posez une question en anglais, l'assistant r\u00e9pond g\u00e9n\u00e9ralement en anglais. Si vous posez une question en fran\u00e7ais, la r\u00e9ponse peut \u00eatre en fran\u00e7ais, en anglais, ou m\u00eame en \"franglais\"(des mots anglais perdus dans le fran\u00e7ais). Ainsi si vous souhaitez absolument une r\u00e9ponse en fran\u00e7ais, mieux vaut le pr\u00e9ciser au d\u00e9but de votre prompt... Explorer le concept d'AST (Abstract Syntax Tree) \u00b6 Dans la r\u00e9ponse de l'assistant, vous avez surement vu appara\u00eetre le terme AST . Vous pouvez approfondir ce concept avec des questions telles que : Peux-tu m'expliquer ce qu'est un AST ? (en fran\u00e7ais) Peux-tu me donner des exemples pr\u00e9cis d'AST ? [...] Comprendre l'impl\u00e9mentation de l'AST dans JavaFileParser \u00b6 Pour aller plus loin, vous pouvez demander : O\u00f9 et comment l'AST est-il impl\u00e9ment\u00e9 dans la classe JavaFileParser ? Explorer la m\u00e9thode processFile \u00b6 En analysant les r\u00e9ponses de l'assistant, vous avez probablement relev\u00e9 des termes m\u00e9tiers et des extraits de code li\u00e9s \u00e0 la m\u00e9thode processFile . Vous d\u00e9cidez donc d'en savoir un peu plus sur cette impl\u00e9mentation : Peux-tu m'expliquer le code de processFile Le Pattern Visiteur et VoidVisitorPattern \u00b6 La r\u00e9ponse de l'assistant mentionne s\u00fbrement les termes visiteur et VoidVisitorPattern . Le pattern visiteur du GoF (Gang of Four) vous est peut-\u00eatre familier, et dans le code de processFile , vous avez remarqu\u00e9 des m\u00e9thodes accept et visit , caract\u00e9ristiques de ce pattern. Mais quel est donc ce pattern ? Y-a-il un lien avec le pattern du GoF ? Pour clarifier, demandez : Peux-tu m'en dire plus sur le VoidVisitorAdapter ? Rappel : Pour consulter le code de la classe VoidVisitorAdapter , pas besoin d'utiliser l'assistant de code ; l'IDE est bien s\u00fbr votre ami pour ce cas d'usage. Depuis le code de la classe JavaFileParser , un simple CTRL+clic sur VoidVisitorAdapter ouvrira le code de cette classe. Vous pourrez ainsi visualiser toutes les m\u00e9thodes visit qu'elle contient et observer \u00e9galement qu'elle impl\u00e9mente VoidVisitor . Apr\u00e8s ces \u00e9changes, l'impl\u00e9mentation de la m\u00e9thode processFile devrait vous para\u00eetre plus claire et correcte. 4.3.b Aider \u00e0 la mise en place de nouveaux tests unitaires \u00b6 1. Am\u00e9liorer la couverture de code de la classe WordAnalyticsService \u00b6 D\u00e9pliez la branche de test ( src/test/... ) du module common pour v\u00e9rifier que la classe WordAnalyticsService poss\u00e8de d\u00e9j\u00e0 une classe de test WordAnalyticsServiceTest . Ouvrez la classe WordAnalyticsServiceTest et ex\u00e9cutez les tests de cette classe pour v\u00e9rifier que le code compile et que tous les tests passent. Relancez les tests en demandant cette fois-ci la couverture de code. Consultez le code de la classe WordAnalyticsService afin de constater que la m\u00e9thode glossaryCoverageRatio n'est actuellement pas couverte par les tests. Demandez \u00e0 votre assistant de vous aider \u00e0 couvrir cette m\u00e9thode, par exemple, avec la commande : /tests glossaryCoverageRatio Placez-vous \u00e0 la fin de la classe WordAnalyticsServiceTest et ins\u00e9rez le code fourni par l'assistant (utilisez le bouton Insert Code Block at Cursor dans le chat). Si besoin, ajoutez les import pour faire compiler le code. Ex\u00e9cutez les tests (et si l'un d'entre eux \u00e9choue \u00e0 cause d'une valeur null , supprimez-le), puis relancez l'analyse de couverture de code. Vous devriez constater une augmentation du pourcentage de la couverture \u00e0 tous les niveaux : m\u00e9thodes, lignes et branches, gr\u00e2ce aux tests ajout\u00e9s. 2. Tester la classe JavaFileParser \u00b6 Consultez \u00e0 nouveau la branche de test ( src/test/... ) du module common et notez que la classe JavaFileParser n'a pas encore de classe de test associ\u00e9e. Ouvrez la classe JavaFileParser et demandez \u00e0 votre assistant de vous aider \u00e0 cr\u00e9er des tests avec la commande /tests Cr\u00e9ez au bon endroit la classe JavaFileParserTest et ins\u00e9rez-y le code g\u00e9n\u00e9r\u00e9 par l'assistant. Si besoin, ajoutez les import pour faire compiler le code. Si une erreur de compilation n\u00e9cessite de modifier la visibilit\u00e9 du code de production, ne modifiez pas le code existant et supprimez le test concern\u00e9, vous en avez d'autres \u00e0 votre disposition. Ex\u00e9cutez les tests. Il est probable que les tests \u00e9chouent en raison de donn\u00e9es de tests contenant des chemins de fichiers en dur pointant vers des fichiers inexistants. Cela sera notamment le cas si l'assistant vous a g\u00e9n\u00e9r\u00e9 un code de test similaire au suivant : kotlin @Test fun processFile_withEmptyJavaFile_returnsEmptyList() { val parser = JavaFileParser() val path = \"src/test/resources/EmptyJavaFile.java\" val words = parser.processFile(path) assertTrue(words.isEmpty()) } Pour \u00e9viter ce type d'erreurs, une solution consiste \u00e0 utiliser des fichiers temporaires gr\u00e2ce \u00e0 l'annotation @TempDir . Si vos tests ont \u00e9chou\u00e9 en raison de la mauvaise qualit\u00e9 des donn\u00e9es de tests : Supprimez tous les tests de la classe JavaFileParserTest et pr\u00e9cisez dans votre prompt que vous souhaitez des tests utilisant @TempDir : /tests en utilisant @TempDir Ins\u00e9rez le nouveau code g\u00e9n\u00e9r\u00e9 dans le fichier JavaFileParserTest . Si besoin, ajoutez les import pour faire compiler le code. Dans tous les cas , ex\u00e9cutez \u00e0 nouveau les tests. La plupart des tests devraient passer. Si un test \u00e9choue, mettez-le pour le moment en @Disabled (peut-\u00eatre que le comportement qu'il teste n'a pas encore \u00e9t\u00e9 impl\u00e9ment\u00e9) ou supprimez-le s'il ne correspond pas \u00e0 vos (futurs) besoins. Le test le plus susceptible de poser probl\u00e8me est celui qui v\u00e9rifie le comportement d'un fichier inexistant, et qui pourrait s'appeler processFile_withNonExistentFile_returnsEmptyList et qui n\u00e9cessiterait donc une modification de la logique m\u00e9tier pour s'assurer que le code traite correctement les fichiers manquants. Par curiosit\u00e9, lancez la couverture de code . Bien s\u00fbr, l'assistant n'a probablement pas couvert la classe \u00e0 100 % , mais il a amorc\u00e9 l'\u00e9criture de tests, vous donnant une premi\u00e8re base. \u00c0 vous ensuite de d\u00e9cider si vous souhaitez compl\u00e9ter cette suite de tests pour am\u00e9liorer la couverture de code sur cette classe. \u00c0 partir de cette base de tests , vous pouvez : continuer \u00e0 \u00e9crire d'autres tests manuellement en vous inspirant des tests g\u00e9n\u00e9r\u00e9s. continuer d'interagir avec l'assistant en lui donnant des consignes plus ou moins pr\u00e9cises, apr\u00e8s avoir identifi\u00e9 les parties du code qui ne sont pas encore couvertes, par exemple : Pourrais-tu m'\u00e9crire deux autres tests pour am\u00e9liorer la couverture de code ? Ajoute un test qui couvre visit de MethodDeclaration et visit de Parameter. Et pour augmenter encore plus rapidement la couverture de code, s\u00e9lectionnez tout le code de la m\u00e9thode processFile et demandez \u00e0 votre assistant de g\u00e9n\u00e9rer les tests : /tests Ins\u00e9rez le code de test g\u00e9n\u00e9r\u00e9 dans JavaFileParserTest et relancez la couverture. Cette exp\u00e9rience illustre plusieurs points : L'assistant de code est un bon outil pour d\u00e9marrer sur une page blanche . Mais attention, l'assistant de code n'est pas exhaustif dans sa r\u00e9ponse ; il ne vous proposera qu'une partie des tests ou des exemples, et ne fera donc pas tout le travail \u00e0 votre place. Pour des r\u00e9ponses plus compl\u00e8tes, il est n\u00e9cessaire de continuer \u00e0 dialoguer avec l'assistant en formulant des demandes plus ou moins pr\u00e9cises : un prompt pas \u00e0 pas est une bonne pratique. Restez toujours vigilant par rapport aux r\u00e9ponses g\u00e9n\u00e9r\u00e9es et (ab)usez de votre libre-arbitre et de votre esprit critique pour d\u00e9tecter d'\u00e9ventuelles hallucinations et ne conserver que les r\u00e9ponses qui conviennent \u00e0 vos besoins. Comme l'historique des \u00e9changes est utilis\u00e9 par l'assistant pour affiner le contexte , il est conseill\u00e9 de nettoyer r\u00e9guli\u00e8rement le chat en supprimant les requ\u00eates non pertinentes ou qui n'ont pas donn\u00e9 le(s) r\u00e9sultat(s) attendu(s). Le caract\u00e8re probabiliste des r\u00e9ponses de l'assistant pr\u00e9sente des inconv\u00e9nients et des avantages . D'un c\u00f4t\u00e9, la qualit\u00e9 des donn\u00e9es de test g\u00e9n\u00e9r\u00e9es n'est pas toujours garantie. Toutefois, cet aspect non d\u00e9terministe peut aussi conduire \u00e0 la d\u00e9couverte de nouvelles, voire meilleures, pratiques. Personnellement, lors d'une premi\u00e8re demande de g\u00e9n\u00e9ration de tests, l'annotation @TempDir , utilis\u00e9e pour les r\u00e9pertoires temporaires, a \u00e9t\u00e9 d\u00e9couverte. Malheureusement, ce fut la seule fois o\u00f9 l'assistant l'a utilis\u00e9e. Peut-\u00eatre avez-vous eu la chance d'obtenir des tests unitaires fonctionnels du premier coup, ou peut-\u00eatre pas \ud83d\ude09. Et vous, connaissiez-vous @TempDir avant cette exp\u00e9rience ? Votre assistant peut vous aider \u00e0 en savoir plus en posant la question suivante : Pourrais-tu m'en dire plus sur @TempDir ? La r\u00e9ponse de l'assistant sera probablement similaire \u00e0 la capture d'\u00e9cran ci-dessous : 4.3.c Aider au refactoring \u00b6 Maintenant que le comportement est couvert par des tests, vous pouvez envisager sereinement un petit refactoring. Pour cela, demandez \u00e0 l'assistant de vous proposer des am\u00e9liorations en utilisant les commandes suivantes : /fix (vous pouvez pr\u00e9ciser le nom de la m\u00e9thode si vous souhaitez rester focalis\u00e9 sur celle-ci) /simplify Par exemple, revenez sur la WordAnalyticsService , demandez : /fix glossaryCoverageRatio /simplify Faites de m\u00eame pour la JavaFileParser , demandez : /fix /simplify Dans les deux cas, l'assistant vous proposera des modifications, mais c'est \u00e0 vous de d\u00e9cider si vous souhaitez les int\u00e9grer dans votre code (le fameux libre arbitre ). 4.3.d Aider \u00e0 la revue de code \u00b6 M\u00eame sans avoir mis en place un harnais de tests, vous pouvez demander \u00e0 votre assistant de code de vous proposer des suggestions de refactoring sur des bouts de code plus ou moins volumineux. Revenez sur la classe Main du module cli , ouvrez le code de cette classe et portez votre attention sur la m\u00e9thode processPath , qui peut para\u00eetre un peu longue. Pour effectuer une rapide revue de code sur cette classe , demandez \u00e0 l'assistant : /fix /simplify Ces commandes devraient d\u00e9j\u00e0 vous donner des pistes pour am\u00e9liorer la lisibilit\u00e9 de processPath . Vous pouvez ensuite approfondir l'analyse en posant vos propres questions, celles que vous vous posez habituellement lors d'une revue de code : ` Y a-t-il des code smells dans ce bout de code ? Y a-t-il des principes SOLID non respect\u00e9s dans ce code ? Le code peut-il \u00eatre optimis\u00e9 en termes de performance ou de lisibilit\u00e9 ? La duplication de code est-elle pr\u00e9sente ? Y a-t-il des d\u00e9pendances cycliques ou des responsabilit\u00e9s mal d\u00e9finies ? [...] Lorsque vous \u00e9changez avec votre assistant des questions de qualit\u00e9 de code, celui-ci peut \u00e9galement vous sugg\u00e9rer d'explorer des aspects tels que la lisibilit\u00e9, la maintenabilit\u00e9 ou la modularit\u00e9 du code en vous proposant de lui poser les questions suivantes : How can I improve the readability of the selected code? How can I improve the maintainability of the selected code? How can I improve the modularity of the selected code? How can I refactor the code to improve modularity? What are some options for simplifying the code? M\u00eame si ces questions ne vous seront pas automatiquement propos\u00e9es par l'assistant au moment o\u00f9 vous le souhaiteriez, il est toujours utile de les garder en t\u00eate comme une bo\u00eete \u00e0 outils de prompts pour am\u00e9liorer la qualit\u00e9 de votre code \u00e0 tout moment. 4.4 Proposer des pistes d'am\u00e9lioration sur des probl\u00e9matiques sensibles \u00b6 Pour terminer ce tutoriel, il pourrait \u00eatre int\u00e9ressant de challenger votre assistant de code sur des probl\u00e9matiques sensibles, notamment celles dans lesquelles vous n'\u00eates pas expert. Prenons par exemple les questions de s\u00e9curit\u00e9 . Vous pourriez commencer avec un prompt comme : Comment pourrais-tu am\u00e9liorer la s\u00e9curit\u00e9 dans ce projet ? [\u2026] suivant la r\u00e9ponse obtenue, n'h\u00e9sitez pas \u00e0 approfondir certains points pas \u00e0 pas avec votre assistant. Votre assistant vous proposera probablement de continuer avec les questions suivantes : What are some best practices for securing a Java project? What are some common security vulnerabilities in Java projects? [\u2026] suivant la r\u00e9ponse obtenue, n'h\u00e9sitez pas \u00e0 approfondir certains points pas \u00e0 pas avec votre assistant, par exemple : Y a-t-il un risque d'exposition de donn\u00e9es sensibles (Sensitive Data Exposure) dans ce projet ? [\u2026] Vous aurez peut-\u00eatre aussi des questions plus basiques \u00e0 lui poser : Concr\u00e8tement, pourrais-tu me montrer o\u00f9 et comment mieux g\u00e9rer les exceptions dans ce projet ? [\u2026] Bien s\u00fbr, si vous n'\u00eates pas expert en s\u00e9curit\u00e9, il est recommand\u00e9 de consulter un sp\u00e9cialiste avant d'adopter les propositions de l'assistant de code. Comme nous l'avons souvent soulign\u00e9 dans ce tutoriel, cet outil est l\u00e0 pour vous assister, mais seule l'expertise humaine peut d\u00e9terminer si une suggestion de l'assistant est pertinente et doit \u00eatre int\u00e9gr\u00e9e dans l'application. Il est \u00e9galement essentiel de garder \u00e0 l'esprit que les outils d'IA g\u00e9n\u00e9rative sont uniquement des aides pour vous rendre plus productif et cr\u00e9atif. Ils ne sont pas \u00e0 l'abri des erreurs ou des hallucinations. Vous restez ma\u00eetre de votre travail, et la d\u00e9cision finale vous appartient . Si vous souhaitez en savoir plus sur le projet qui se cache derri\u00e8re le code utilis\u00e9 dans cette partie du tutoriel, vous pouvez consulter le d\u00e9p\u00f4t suivant : https://github.com/iblasquez/ubiquitous-langage-code-quality Acc\u00e9dez donc maintenant \u00e0 la partie suivante qui est : Liens utilis\u00e9s pour la r\u00e9daction du tutoriel ou retournez \u00e0 l' Accueil .","title":"Reprise d'un projet complexe existant (legacy code)"},{"location":"fr/4_ProjetExistantComplexe/#4-quid-dun-assistant-de-code-pour-la-reprise-dun-projet-complexe-existant-legacy-code","text":"4.1 Avoir une vision et une compr\u00e9hension globale du projet 4.1.a Premi\u00e8re vision globale du projet 4.1.b Garder une trace de la vision globale du projet dans un README 4.1.c Approfondir la vision globale du projet Explorer les points d'entr\u00e9e du syst\u00e8me Explorer le m\u00e9tier ( classe WordAnalyticsService , classe FileReader , classe JavaFileParser , essayer de comprendre rapidement un choix de conception ) Vision plus globale du m\u00e9tier (module common ) Vision plus globale du projet et pr\u00e9cision des r\u00e9ponses 4.2 Mettre en place un environnement de d\u00e9veloppement fonctionnel 4.3 Am\u00e9liorer la qualit\u00e9 de code d'un projet existant 4.3.a Bien comprendre les choix de conception et le code existant Se rafra\u00eechir la m\u00e9moire sur le comportement de la classe Explorer le concept d'AST (Abstract Syntax Tree) Comprendre l'impl\u00e9mentation de l'AST dans JavaFileParser Explorer la m\u00e9thode processFile Le Pattern Visiteur et VoidVisitorPattern 4.3.b Aider \u00e0 la mise en place de nouveaux tests unitaires Am\u00e9liorer la couverture de code de la classe WordAnalyticsService Tester la classe JavaFileParser 4.3.c Aider au refactoring 4.3.d Aider \u00e0 la revue de code 4.4 Proposer des pistes d'am\u00e9lioration sur des probl\u00e9matiques sensibles Dans un article r\u00e9cent intitul\u00e9 Legacy Modernization meets GenAI , Martin Fowler a \u00e9crit : Jusqu'\u00e0 pr\u00e9sent, la majorit\u00e9 de l'attention port\u00e9e \u00e0 l'intelligence artificielle g\u00e9n\u00e9rative (GenAI) dans le d\u00e9veloppement logiciel est ax\u00e9e sur la g\u00e9n\u00e9ration de code. Mais nous croyons qu'il y a autant, voire plus, de valeur dans la compr\u00e9hension du code existant - en particulier des syst\u00e8mes h\u00e9rit\u00e9s complexes, volumineux et anciens. GitHub Copilot est un outil d'IA g\u00e9n\u00e9rative pour le code parmi d'autres ( Codeium , Cursor , Supermaven , Tabnine ,..) qui peut nous aider dans ce sens, en nous fournissant aussi bien une vue d'ensemble d'un syst\u00e8me, qu'en d\u00e9taillant des points pr\u00e9cis d'un code legacy pour mieux le comprendre et \u00e9ventuellement en am\u00e9liorer sa qualit\u00e9. Pour ce tutoriel, vous utiliserez le code du projet codelinguo d\u00e9velopp\u00e9 par un groupe d'\u00e9tudiants de 3\u00e8me ann\u00e9e de BUT Informatique dans le cadre d'une SAE (Situation d'Apprentissage et d'\u00c9valuation). Vous commencerez donc par cloner ce projet : https://github.com/carlodrift/codelinguo et ouvrirez ce projet dans votre IDE pr\u00e9f\u00e9r\u00e9 muni de Copilot (IntelliJ ou Visual Studio). Disclaimer : Tout au long de ce tutoriel, restez attentif aux r\u00e9ponses fournies par votre assistant de code. Comme tout outil d'IA g\u00e9n\u00e9rative, il peut parfois produire des \" hallucinations \". Bien que ces outils soient tr\u00e8s pratiques, il est essentiel de garder un esprit critique. Votre libre arbitre reste indispensable pour faire la part des choses entre les suggestions de l'assistant et la r\u00e9alit\u00e9 de votre projet. Pour le moment, contentez-vous uniquement d'ouvrir ce projet dans votre IDE pr\u00e9f\u00e9r\u00e9. Pour obtenir une vue d'ensemble du projet, il n'est pas utile d'essayer de compiler ou de builder le projet (ce point sera trait\u00e9 un peu plus tard). Ayez juste le code de votre projet sous les yeux dans l'IDE, avec un chat Copilot ouvert, et laissez-vous guider...","title":"4. Quid d'un assistant de code pour la reprise d'un projet complexe existant (legacy code)"},{"location":"fr/4_ProjetExistantComplexe/#41-avoir-une-vision-et-une-comprehension-globale-du-projet","text":"","title":"4.1 Avoir une vision et une compr\u00e9hension globale du projet"},{"location":"fr/4_ProjetExistantComplexe/#41a-premiere-vision-globale-du-projet","text":"Apr\u00e8s avoir ouvert le chat de votre assistant de code dans votre IDE, vous pouvez interagir avec lui, que ce soit en fran\u00e7ais ou en anglais, de mani\u00e8re plus ou moins d\u00e9taill\u00e9e comme vu pr\u00e9c\u00e9demment. Commencez, par exemple, par lui demander une vision globale du projet en anglais : describe this project ou en fran\u00e7ais : Pourrais-tu me d\u00e9crire ce projet ou m\u00eame en utilisant des agents de conversation /explain @workspace Au-del\u00e0 de votre assistant de code , vous disposez toujours de votre exp\u00e9rience/expertise en d\u00e9veloppement logiciel. Explorez \u00e9galement manuellement le projet dans votre IDE (architecture, noms des classes\u2026). En d\u00e9pliant l'arborescence du projet , vous constatez qu'il est structur\u00e9 autour de : 3 modules Maven : cli , common , desktop 1 module Gradle : intellij-plugin Selon votre exp\u00e9rience/expertise, vous avez peut-\u00eatre envie de poser des questions suppl\u00e9mentaires \u00e0 votre assistant : \u00c0 quoi correspond cli ? desktop ? intellij-plugin ? common ? dans ce projet Et si vous lui reposez ensuite la question : Pourrais-tu me d\u00e9crire le projet ? La r\u00e9ponse sera plus d\u00e9taill\u00e9e que pr\u00e9c\u00e9demment, car au fil des discussions, l'assistant enrichit son contexte des informations apprises lors des \u00e9changes pr\u00e9c\u00e9dents. Au-del\u00e0 des questions techniques , vous pouvez \u00e9galement interroger l'assistant sur la finalit\u00e9 de l'application avec des questions telles que : Quel est selon toi le contexte m\u00e9tier de l'application ? \u00c0 quoi sert cette application ?","title":"4.1.a Premi\u00e8re vision globale du projet"},{"location":"fr/4_ProjetExistantComplexe/#41b-garder-une-trace-de-la-vision-globale-du-projet-dans-un-readme","text":"Dans un projet collaboratif, le fichier README est essentiel pour fournir une vue d'ensemble et aider les collaborateurs \u00e0 se familiariser rapidement avec le projet. Le projet que vous avez r\u00e9cup\u00e9r\u00e9 n'en contient pas ? Pas de souci, vous pouvez demander \u00e0 l'assistant de g\u00e9n\u00e9rer un README bas\u00e9 sur ce qu'il a vu dans le projet, en utilisant par exemple le prompt suivant : @workspace generate a readme document that can be used as a repo description Remarque : Pour l'instant, vous \u00eates juste en mode exploration du projet avec votre assistant de code, sans intention d'ajouter de code. Si plus tard vous d\u00e9cidez d'inclure un README dans le projet, vous pourrez r\u00e9utiliser le prompt pr\u00e9c\u00e9dent. Gr\u00e2ce aux nombreuses interactions que vous aurez eues entre-temps, le README g\u00e9n\u00e9r\u00e9 n'en sera que plus d\u00e9taill\u00e9 et pertinent.","title":"4.1.b Garder une trace de la vision globale du projet dans un README"},{"location":"fr/4_ProjetExistantComplexe/#41c-approfondir-la-vision-globale-du-projet","text":"Pour aller plus loin dans votre compr\u00e9hension, continuez \u00e0 interroger/challenger l'assistant sur les points d'entr\u00e9e du syst\u00e8me et quelques classes m\u00e9tier de l'application.","title":"4.1.c Approfondir la vision globale du projet"},{"location":"fr/4_ProjetExistantComplexe/#explorer-les-points-dentree-du-systeme","text":"Votre assistant vous a d\u00e9j\u00e0 peut-\u00eatre mentionn\u00e9 les points d'entr\u00e9e, n'h\u00e9sitez pas \u00e0 lui demander explicitement de les \u00e9num\u00e9rer \u00e0 nouveau : Quels sont les points d'entr\u00e9e du syst\u00e8me ?\" Remarque : La r\u00e9ponse que vous obtiendrez peut \u00eatre une hallucination (sur le nom de la classe consid\u00e9r\u00e9e comme point d'entr\u00e9e), mais elle devrait n\u00e9anmoins vous guider dans la bonne direction. Commencez par ouvrir le fichier Main.java dans le module cli ( fr.unilim.codelinguo.cli ) et, de la m\u00eame mani\u00e8re que tout ce qui a \u00e9t\u00e9 fait pr\u00e9c\u00e9demment, posez des questions comme : Pourrais-tu me d\u00e9crire ce code ? /explain this , /explain this class (\u00e0 vous de voir le type de formulation et le(s) langue(s) que vous pr\u00e9f\u00e9rez utiliser) De la m\u00eame mani\u00e8re , ouvrez le fichier Main.kt dans le module desktop ( fr.unilim.codelinguo.desktop ) et discutez avec votre assistant de code. Enfin , ouvrez le fichier Main.java dans le module intellij-plugin ( fr.unilim.codelinguo.intellijplugin ) et \u00e9changez avec votre assistant. Dans les r\u00e9ponses de l'assistant, certains noms de classes m\u00e9tier, comme FileReader et WordAnalyticsService , vont probablement ressortir plusieurs fois. Cela devrait vous inciter \u00e0 explorer le module common pour en apprendre davantage sur le domaine m\u00e9tier de l'application.","title":"Explorer les points d'entr\u00e9e du syst\u00e8me"},{"location":"fr/4_ProjetExistantComplexe/#explorer-le-metier","text":"Vous pouvez explorer le c\u00f4t\u00e9 m\u00e9tier de l'application de mani\u00e8re plus ou moins d\u00e9taill\u00e9e. Par o\u00f9 commencer ? Pourquoi ne pas d\u00e9buter avec la classe WordAnalyticsService , mentionn\u00e9e lors de vos pr\u00e9c\u00e9dents \u00e9changes ?","title":"Explorer le m\u00e9tier"},{"location":"fr/4_ProjetExistantComplexe/#zoom-sur-la-classe-wordanalyticsservice","text":"Pour commencer, localisez la classe dans le projet et ouvrez la classe . Pour cela, aidez-vous de l'assistant en lui demandant : O\u00f9 se trouve la classe WordAnalyticsService ? Une fois la classe ouverte, engagez la discussion avec l'assistant pour obtenir une vision globale de la classe : Que fait ce code ? Pourquoi la classe WordAnalyticsService ? (pour une r\u00e9ponse plus m\u00e9tier ) /explain this (pour une r\u00e9ponse plus technique expliquant comment le code fonctionne) Vous venez d'obtenir des r\u00e9ponses plus ou moins d\u00e9taill\u00e9es, plus ou moins orient\u00e9es m\u00e9tier, plus ou moins techniques. Il est donc important de remarquer que, outre le caract\u00e8re probabiliste des r\u00e9ponses g\u00e9n\u00e9r\u00e9es par une IA G\u00e9n\u00e9rative, le style et le contenu de la r\u00e9ponse vont \u00eatre diff\u00e9rents suivant la mani\u00e8re dont vous posez vos questions (prompt). Pour vous en convaincre, testez diff\u00e9rentes formulations pour voir comment elles influencent les r\u00e9ponses de l'assistant : Pourrais-tu me d\u00e9crire la classe WordAnalyticsService Pourrais-tu m'expliquer la classe WordAnalyticsService A quoi sert la classe WordAnalyticsService ? Explain how the code works ? Explain how this code can be used ? Explain why this code exists ? ... Lorsque vous \u00e9changez avec une IA g\u00e9n\u00e9rative, pour obtenir des r\u00e9ponses pertinentes , il est important d' apprendre \u00e0 bien communiquer avec cette IA, un peu comme on apprendrait \u00e0 communiquer dans une nouvelle langue \u00e9trang\u00e8re (utiliser les bonnes formulations, les mots ad\u00e9quats, poser les questions au bon moment\u2026). Il est donc n\u00e9cessaire de vous entra\u00eener \u00e0 discuter avec votre IA afin de trouver les formulations et le mode d'expression qui correspondent \u00e0 vos besoins. Prendre le temps d'apprendre \u00e0 formuler votre prompt avec pr\u00e9cision est un passage essentiel pour obtenir des r\u00e9ponses pr\u00e9cises et \u00eatre encore plus productif avec votre IA Disclaimer : \u00c0 long terme, votre style de communication diff\u00e9rera s\u00fbrement du phras\u00e9 propos\u00e9 dans ce tutoriel. Ce tutoriel est uniquement con\u00e7u pour vous aider \u00e0 survoler quelques cas d'usage qui pourraient vous \u00eatre utiles au quotidien, en se basant sur des interactions simples. Libre \u00e0 vous, par la suite, de personnaliser et perfectionner votre langage pour interagir efficacement avec votre assistant de code pr\u00e9f\u00e9r\u00e9. Il est maintenant temps d'explorer les d\u00e9pendances de la classe WordAnalyticsService . Posez la question suivante \u00e0 l'assistant : Quelles sont les d\u00e9pendances de cette classe ? En fonction de la r\u00e9ponse obtenue, continuez la discussion : Pourquoi la classe Word ? Que fait le code de la classe Word ? [...] N'h\u00e9sitez pas \u00e0 poursuivre les \u00e9changes avec l'assistant pour approfondir votre compr\u00e9hension de cette classe.","title":"Zoom sur la classe WordAnalyticsService"},{"location":"fr/4_ProjetExistantComplexe/#ide-ou-assistant","text":"Ouvrez maintenant la classe Glossary et interagissez, comme \u00e0 votre habitude, avec l'assistant : Pourquoi la classe Glossary ? Que fait ce code ? /explain this [...] Ensuite, posez la question suivante : Pourrais-tu me donner toutes les classes qui d\u00e9pendent de Glossary ? Il est fort probable que votre assistant vous sugg\u00e8re, pour un tel cas d'usage, de plut\u00f4t utiliser les outils de l'IDE pour une r\u00e9ponse plus compl\u00e8te . Vous devriez obtenir des r\u00e9ponses du type : Pour une analyse compl\u00e8te, il serait n\u00e9cessaire de rechercher toutes les occurrences de Glossary dans le projet ou Pour une recherche exhaustive, vous pouvez utiliser les fonctionnalit\u00e9s de recherche de votre IDE (IntelliJ IDEA) pour trouver toutes les occurrences de Glossary dans le projet. C'est donc le bon moment pour rappeler qu'il est essentiel d' utiliser son assistant de code de mani\u00e8re r\u00e9fl\u00e9chie et pour des cas d'usages pertinents , d'autant plus que les requ\u00eates faites aupr\u00e8s d'outils d'IA g\u00e9n\u00e9rative ont un co\u00fbt \u00e9nerg\u00e9tique tr\u00e8s (voire trop) \u00e9lev\u00e9 de nos jours comme le mentionne un article de la Tribune Futurs de Novembre 2024","title":"IDE ou Assistant ?"},{"location":"fr/4_ProjetExistantComplexe/#zoom-sur-la-classe-filereader","text":"Lors de vos premiers \u00e9changes sur la vision globale du projet, la classe FileReader a probablement \u00e9t\u00e9 mentionn\u00e9e par votre assistant. C'est le moment d'en apprendre davantage sur elle. Ouvrez la classe FileReader et discutez avec votre assistant : Pourquoi la classe FileReader ? Que fait ce code ? /explain this [...] Les r\u00e9ponses fournies par votre assistant ne vous auraient-elles pas donn\u00e9 envie d'aller explorer la classe JavaFileParser ?","title":"Zoom sur la classe FileReader"},{"location":"fr/4_ProjetExistantComplexe/#zoom-sur-la-classe-javafileparser","text":"Ouvrez la classe JavaFileParser et engagez la discussion : Pourquoi la classe JavaFileParser ? Que fait ce code ? /explain this [...] Demandez ensuite \u00e0 votre assistant : O\u00f9 est utilis\u00e9e la classe JavaFileParser ? \u2192 Si vous avez de la chance (que les probabilit\u00e9s sont avec vous), l'assistant pourrait vous r\u00e9v\u00e9ler l'extrait de code suivant tir\u00e9 de la classe FileReader : kotlin private val fileSanitizers = mapOf( \".java\" to JavaFileParser(), \".kt\" to KotlinFileSanitizer(), \".py\" to PythonFileSanitizer(), \".js\" to JavascriptFileSanitizer(), \".html\" to HtmlFileSanitizer() ) \u2192 Si vous n'avez pas eu la chance d'obtenir ce bout de code, reformulez votre question : Montre-moi comment est utilis\u00e9 JavaFileParser ? Si vous n'obtenez toujours pas le bout de code recherch\u00e9 ( les r\u00e9ponses des IA g\u00e9n\u00e9ratives \u00e9tant probabilistes, m\u00eame avec une formulation tr\u00e8s pr\u00e9cise, il est impossible de garantir un r\u00e9sultat ), allez directement dans la classe FileReader pour v\u00e9rifier que ce bout de code y est bien pr\u00e9sent. Comme mentionn\u00e9 en d\u00e9but de tutoriel, quelle que soit la r\u00e9ponse obtenue, il est toujours pr\u00e9f\u00e9rable de v\u00e9rifier sa coh\u00e9rence avec le contenu du projet pour s'assurer qu'il ne s'agit pas d'une hallucination . Ainsi, dans tous les cas, un bon r\u00e9flexe consiste \u00e0 aller v\u00e9rifier que le code est bien pr\u00e9sent dans la classe FileReader .","title":"Zoom sur la classe JavaFileParser"},{"location":"fr/4_ProjetExistantComplexe/#essayer-de-comprendre-rapidement-un-choix-de-conception","text":"Relisez attentivement l'extrait de code pr\u00e9c\u00e9dent. La lecture de ce code ne soul\u00e8ve-t-elle pas chez vous quelques questions du genre : Pourquoi utilise-t-on JavaFileParser pour les fichiers .java , alors que pour d'autres langages, on emploie des Sanitizers ? D'autant plus qu'en explorant l'arborescence, vous remarquez qu'un fichier JavaFileSanitizer existe bien dans le projet. Si vous ne souhaitez pas passer trop de temps \u00e0 comprendre ce choix de conception, demandez directement \u00e0 l'assistant de vous \u00e9claircir sur ce point : O\u00f9 est utilis\u00e9e la classe JavaFileSanitizer ? Pourquoi utiliser JavaFileParser plut\u00f4t que JavaFileSanitizer ? Quand faut-il utiliser JavaFileParser et quand JavaFileSanitizer ? [...] (\u00e0 vous de trouver la bonne formulation pour \u00e9lucider et comprendre rapidement ce choix de conception qui peut para\u00eetre \u00e9tonnant \u00e0 la lecture de code)","title":"Essayer de comprendre rapidement un choix de conception"},{"location":"fr/4_ProjetExistantComplexe/#vision-plus-globale-du-metier-module-common","text":"Les interactions pr\u00e9c\u00e9dentes ont permis \u00e0 votre assistant de code, ainsi qu'\u00e0 vous-m\u00eame, d'en apprendre un peu plus sur le projet. En ce qui concerne le module common , vous avez, jusqu'\u00e0 pr\u00e9sent, explor\u00e9 certains points de d\u00e9tails de ce module. Pour obtenir une vision plus g\u00e9n\u00e9rale de ce module et mieux comprendre son r\u00f4le dans le projet, demandez \u00e0 votre assistant : Pourrais-tu me d\u00e9crire common ? Que comprends-tu de la probl\u00e9matique m\u00e9tier de cette application ? [...] Pensez-vous que les r\u00e9ponses apport\u00e9es par l'assistant ont \u00e9t\u00e9 influenc\u00e9es par les interactions que vous avez eues pr\u00e9c\u00e9demment ?","title":"Vision plus globale du m\u00e9tier (module common)"},{"location":"fr/4_ProjetExistantComplexe/#vision-plus-globale-du-projet-et-precision-des-reponses","text":"Au fur et \u00e0 mesure que vous \u00e9changez avec votre assistant de code, ses r\u00e9ponses deviennent de plus en plus pr\u00e9cises. Si vous lui demandez \u00e0 nouveau une vision globale du projet avec les m\u00eames questions qu'au d\u00e9but de la discussion : Describe this project Pourrais-tu me d\u00e9crire ce projet /explain this project [...] Vous constaterez que les r\u00e9ponses sont plus d\u00e9taill\u00e9es et sp\u00e9cifiques qu'au d\u00e9but de la discussion. Cela s'explique par le fait que, lors de vos interactions, l'assistant a explor\u00e9 diff\u00e9rentes parties du projet en fonction des questions pos\u00e9es. Il a ainsi m\u00e9moris\u00e9 des informations sur ces parties, lui permettant d'affiner son contexte et donc de fournir des r\u00e9ponses plus pertinentes et cibl\u00e9es. Cela montre l'importance d'interagir progressivement, \u00e9tape par \u00e9tape, avec votre assistant de code. En posant des questions de plus en plus pr\u00e9cises , vous affinez la compr\u00e9hension du projet et am\u00e9liorez la qualit\u00e9 des r\u00e9ponses de l'assistant. Toutefois, une des limites actuelles des assistants de code est que la m\u00e9moire est limit\u00e9e \u00e0 la session/discussion en cours. Si vous d\u00e9marrez une nouvelle session, la connaissance acquise sur le projet sera perdue. \u00c0 ce jour, il n'y a pas de m\u00e9moire \u00e0 long terme ou RAG (Retrieval Augmented Generation) dans les assistants de code. Cependant, des \u00e9volutions sont s\u00fbrement en pr\u00e9paration, comme le montre la fonctionnalit\u00e9 de m\u00e9moire entre conversations r\u00e9cemment introduite dans les versions de ChatGPT.","title":"Vision plus globale du projet et pr\u00e9cision des r\u00e9ponses"},{"location":"fr/4_ProjetExistantComplexe/#42-mettre-en-place-un-environnement-de-developpement-fonctionnel","text":"Jusqu'\u00e0 pr\u00e9sent, l'assistant de code vous a uniquement aid\u00e9 \u00e0 comprendre le comportement du code existant, sans v\u00e9rifier si ce dernier \u00e9tait compilable et fonctionnel. Si vous souhaitez aller plus loin avec ce code (effectuer du refactoring, ajouter de nouvelles fonctionnalit\u00e9s, etc.), il devient n\u00e9cessaire de faire compiler ce projet et de l'ex\u00e9cuter dans votre IDE pr\u00e9f\u00e9r\u00e9. Pour continuer ce tutoriel, l'objectif est simple : assurez-vous que le projet compile et que vous pouvez lancer le main du module cli depuis l'IDE . (Concentrez-vous uniquement sur ce main , cela garantit d\u00e9j\u00e0 un environnement de d\u00e9veloppement fonctionnel.) D\u00e8s que vous pouvez ex\u00e9cuter ( Run ner) le Main du module cli depuis votre IDE et que vous visualisez une ex\u00e9cution correcte dans la console (comme montr\u00e9 dans l'exemple ci-dessus pour une ex\u00e9cution du main sans param\u00e8tre ), vous serez pr\u00eat \u00e0 poursuivre. Ensuite, toujours depuis l'IDE, lancez le Main du module cli en passant comme premier (et seul) param\u00e8tre le chemin absolu du fichier WordAnalyticsService.java du projet codelinguo que vous avez sous les yeux. Si tout se d\u00e9roule correctement, vous devriez voir un affichage dans la console similaire \u00e0 la capture d'\u00e9cran ci-dessous : Bien entendu, l'assistant de code est aussi votre ami pour r\u00e9soudre des probl\u00e8mes li\u00e9s au bon fonctionnement de votre IDE ou \u00e0 votre environnement de travail. Il ne se limite pas \u00e0 l'interaction avec le code. Si n\u00e9cessaire, n'h\u00e9sitez pas \u00e0 solliciter son aide en lui posant, par exemple, l'une des questions suivantes : Comment lancer le main du module cli ? Comment lancer le main du module cli depuis l'IDE ? Comment lancer le main du module cli depuis l'IDE en passant le chemin absolu du fichier WordAnalyticsService.java comme param\u00e8tre ? [...] Continuez \u00e9ventuellement cette discussion en fonction de vos besoins et de votre exp\u00e9rience si vous avez besoin d'informations suppl\u00e9mentaires pour arriver \u00e0 vos fins, c'est-\u00e0-dire obtenir des affichages similaires aux captures d'\u00e9cran ci-dessus.","title":"4.2 Mettre en place un environnement de d\u00e9veloppement fonctionnel"},{"location":"fr/4_ProjetExistantComplexe/#43-ameliorer-la-qualite-de-code-dun-projet-existant","text":"Pour cette derni\u00e8re partie, nous allons nous focaliser sur la classe JavaFileParser . Commencez par ouvrir la classe JavaFileParser .","title":"4.3 Am\u00e9liorer la qualit\u00e9 de code d'un projet existant"},{"location":"fr/4_ProjetExistantComplexe/#43a-bien-comprendre-les-choix-de-conception-et-le-code-existant","text":"Avant de proc\u00e9der \u00e0 un quelconque refactoring pour am\u00e9liorer la qualit\u00e9 du code de cette classe, il est essentiel de bien comprendre le comportement de cette classe et d'avoir une bonne vision du code existant.","title":"4.3.a Bien comprendre les choix de conception et le code existant"},{"location":"fr/4_ProjetExistantComplexe/#se-rafraichir-la-memoire-sur-le-comportement-de-la-classe","text":"Vous avez d\u00e9j\u00e0 eu de nombreuses interactions avec cette classe ; une simple question \u00e0 votre assistant de code devrait vous aider \u00e0 vous rafra\u00eechir la m\u00e9moire : Pourquoi la classe JavaFileParser ? R\u00e9ponds-moi en fran\u00e7ais. Remarque : Au cours de vos pr\u00e9c\u00e9dents \u00e9changes avec votre assistant, outre les hallucinations, vous avez s\u00fbrement observ\u00e9 des comportements \u00e9tranges dans les r\u00e9ponses de votre assistant (encore une fois dus au c\u00f4t\u00e9 probabiliste des mod\u00e8les de langage (LLM) et \u00e0 leur entra\u00eenement). Par exemple : Si vous posez une question en anglais, l'assistant r\u00e9pond g\u00e9n\u00e9ralement en anglais. Si vous posez une question en fran\u00e7ais, la r\u00e9ponse peut \u00eatre en fran\u00e7ais, en anglais, ou m\u00eame en \"franglais\"(des mots anglais perdus dans le fran\u00e7ais). Ainsi si vous souhaitez absolument une r\u00e9ponse en fran\u00e7ais, mieux vaut le pr\u00e9ciser au d\u00e9but de votre prompt...","title":"Se rafra\u00eechir la m\u00e9moire sur le comportement de la classe :**"},{"location":"fr/4_ProjetExistantComplexe/#explorer-le-concept-dast-abstract-syntax-tree","text":"Dans la r\u00e9ponse de l'assistant, vous avez surement vu appara\u00eetre le terme AST . Vous pouvez approfondir ce concept avec des questions telles que : Peux-tu m'expliquer ce qu'est un AST ? (en fran\u00e7ais) Peux-tu me donner des exemples pr\u00e9cis d'AST ? [...]","title":"Explorer le concept d'AST (Abstract Syntax Tree)"},{"location":"fr/4_ProjetExistantComplexe/#comprendre-limplementation-de-last-dans-javafileparser","text":"Pour aller plus loin, vous pouvez demander : O\u00f9 et comment l'AST est-il impl\u00e9ment\u00e9 dans la classe JavaFileParser ?","title":"Comprendre l'impl\u00e9mentation de l'AST dans JavaFileParser"},{"location":"fr/4_ProjetExistantComplexe/#explorer-la-methode-processfile","text":"En analysant les r\u00e9ponses de l'assistant, vous avez probablement relev\u00e9 des termes m\u00e9tiers et des extraits de code li\u00e9s \u00e0 la m\u00e9thode processFile . Vous d\u00e9cidez donc d'en savoir un peu plus sur cette impl\u00e9mentation : Peux-tu m'expliquer le code de processFile","title":"Explorer la m\u00e9thode processFile"},{"location":"fr/4_ProjetExistantComplexe/#le-pattern-visiteur-et-voidvisitorpattern","text":"La r\u00e9ponse de l'assistant mentionne s\u00fbrement les termes visiteur et VoidVisitorPattern . Le pattern visiteur du GoF (Gang of Four) vous est peut-\u00eatre familier, et dans le code de processFile , vous avez remarqu\u00e9 des m\u00e9thodes accept et visit , caract\u00e9ristiques de ce pattern. Mais quel est donc ce pattern ? Y-a-il un lien avec le pattern du GoF ? Pour clarifier, demandez : Peux-tu m'en dire plus sur le VoidVisitorAdapter ? Rappel : Pour consulter le code de la classe VoidVisitorAdapter , pas besoin d'utiliser l'assistant de code ; l'IDE est bien s\u00fbr votre ami pour ce cas d'usage. Depuis le code de la classe JavaFileParser , un simple CTRL+clic sur VoidVisitorAdapter ouvrira le code de cette classe. Vous pourrez ainsi visualiser toutes les m\u00e9thodes visit qu'elle contient et observer \u00e9galement qu'elle impl\u00e9mente VoidVisitor . Apr\u00e8s ces \u00e9changes, l'impl\u00e9mentation de la m\u00e9thode processFile devrait vous para\u00eetre plus claire et correcte.","title":"Le Pattern Visiteur et VoidVisitorPattern"},{"location":"fr/4_ProjetExistantComplexe/#43b-aider-a-la-mise-en-place-de-nouveaux-tests-unitaires","text":"","title":"4.3.b Aider \u00e0 la mise en place de nouveaux tests unitaires"},{"location":"fr/4_ProjetExistantComplexe/#1-ameliorer-la-couverture-de-code-de-la-classe-wordanalyticsservice","text":"D\u00e9pliez la branche de test ( src/test/... ) du module common pour v\u00e9rifier que la classe WordAnalyticsService poss\u00e8de d\u00e9j\u00e0 une classe de test WordAnalyticsServiceTest . Ouvrez la classe WordAnalyticsServiceTest et ex\u00e9cutez les tests de cette classe pour v\u00e9rifier que le code compile et que tous les tests passent. Relancez les tests en demandant cette fois-ci la couverture de code. Consultez le code de la classe WordAnalyticsService afin de constater que la m\u00e9thode glossaryCoverageRatio n'est actuellement pas couverte par les tests. Demandez \u00e0 votre assistant de vous aider \u00e0 couvrir cette m\u00e9thode, par exemple, avec la commande : /tests glossaryCoverageRatio Placez-vous \u00e0 la fin de la classe WordAnalyticsServiceTest et ins\u00e9rez le code fourni par l'assistant (utilisez le bouton Insert Code Block at Cursor dans le chat). Si besoin, ajoutez les import pour faire compiler le code. Ex\u00e9cutez les tests (et si l'un d'entre eux \u00e9choue \u00e0 cause d'une valeur null , supprimez-le), puis relancez l'analyse de couverture de code. Vous devriez constater une augmentation du pourcentage de la couverture \u00e0 tous les niveaux : m\u00e9thodes, lignes et branches, gr\u00e2ce aux tests ajout\u00e9s.","title":"1. Am\u00e9liorer la couverture de code de la classe WordAnalyticsService"},{"location":"fr/4_ProjetExistantComplexe/#2-tester-la-classe-javafileparser","text":"Consultez \u00e0 nouveau la branche de test ( src/test/... ) du module common et notez que la classe JavaFileParser n'a pas encore de classe de test associ\u00e9e. Ouvrez la classe JavaFileParser et demandez \u00e0 votre assistant de vous aider \u00e0 cr\u00e9er des tests avec la commande /tests Cr\u00e9ez au bon endroit la classe JavaFileParserTest et ins\u00e9rez-y le code g\u00e9n\u00e9r\u00e9 par l'assistant. Si besoin, ajoutez les import pour faire compiler le code. Si une erreur de compilation n\u00e9cessite de modifier la visibilit\u00e9 du code de production, ne modifiez pas le code existant et supprimez le test concern\u00e9, vous en avez d'autres \u00e0 votre disposition. Ex\u00e9cutez les tests. Il est probable que les tests \u00e9chouent en raison de donn\u00e9es de tests contenant des chemins de fichiers en dur pointant vers des fichiers inexistants. Cela sera notamment le cas si l'assistant vous a g\u00e9n\u00e9r\u00e9 un code de test similaire au suivant : kotlin @Test fun processFile_withEmptyJavaFile_returnsEmptyList() { val parser = JavaFileParser() val path = \"src/test/resources/EmptyJavaFile.java\" val words = parser.processFile(path) assertTrue(words.isEmpty()) } Pour \u00e9viter ce type d'erreurs, une solution consiste \u00e0 utiliser des fichiers temporaires gr\u00e2ce \u00e0 l'annotation @TempDir . Si vos tests ont \u00e9chou\u00e9 en raison de la mauvaise qualit\u00e9 des donn\u00e9es de tests : Supprimez tous les tests de la classe JavaFileParserTest et pr\u00e9cisez dans votre prompt que vous souhaitez des tests utilisant @TempDir : /tests en utilisant @TempDir Ins\u00e9rez le nouveau code g\u00e9n\u00e9r\u00e9 dans le fichier JavaFileParserTest . Si besoin, ajoutez les import pour faire compiler le code. Dans tous les cas , ex\u00e9cutez \u00e0 nouveau les tests. La plupart des tests devraient passer. Si un test \u00e9choue, mettez-le pour le moment en @Disabled (peut-\u00eatre que le comportement qu'il teste n'a pas encore \u00e9t\u00e9 impl\u00e9ment\u00e9) ou supprimez-le s'il ne correspond pas \u00e0 vos (futurs) besoins. Le test le plus susceptible de poser probl\u00e8me est celui qui v\u00e9rifie le comportement d'un fichier inexistant, et qui pourrait s'appeler processFile_withNonExistentFile_returnsEmptyList et qui n\u00e9cessiterait donc une modification de la logique m\u00e9tier pour s'assurer que le code traite correctement les fichiers manquants. Par curiosit\u00e9, lancez la couverture de code . Bien s\u00fbr, l'assistant n'a probablement pas couvert la classe \u00e0 100 % , mais il a amorc\u00e9 l'\u00e9criture de tests, vous donnant une premi\u00e8re base. \u00c0 vous ensuite de d\u00e9cider si vous souhaitez compl\u00e9ter cette suite de tests pour am\u00e9liorer la couverture de code sur cette classe. \u00c0 partir de cette base de tests , vous pouvez : continuer \u00e0 \u00e9crire d'autres tests manuellement en vous inspirant des tests g\u00e9n\u00e9r\u00e9s. continuer d'interagir avec l'assistant en lui donnant des consignes plus ou moins pr\u00e9cises, apr\u00e8s avoir identifi\u00e9 les parties du code qui ne sont pas encore couvertes, par exemple : Pourrais-tu m'\u00e9crire deux autres tests pour am\u00e9liorer la couverture de code ? Ajoute un test qui couvre visit de MethodDeclaration et visit de Parameter. Et pour augmenter encore plus rapidement la couverture de code, s\u00e9lectionnez tout le code de la m\u00e9thode processFile et demandez \u00e0 votre assistant de g\u00e9n\u00e9rer les tests : /tests Ins\u00e9rez le code de test g\u00e9n\u00e9r\u00e9 dans JavaFileParserTest et relancez la couverture. Cette exp\u00e9rience illustre plusieurs points : L'assistant de code est un bon outil pour d\u00e9marrer sur une page blanche . Mais attention, l'assistant de code n'est pas exhaustif dans sa r\u00e9ponse ; il ne vous proposera qu'une partie des tests ou des exemples, et ne fera donc pas tout le travail \u00e0 votre place. Pour des r\u00e9ponses plus compl\u00e8tes, il est n\u00e9cessaire de continuer \u00e0 dialoguer avec l'assistant en formulant des demandes plus ou moins pr\u00e9cises : un prompt pas \u00e0 pas est une bonne pratique. Restez toujours vigilant par rapport aux r\u00e9ponses g\u00e9n\u00e9r\u00e9es et (ab)usez de votre libre-arbitre et de votre esprit critique pour d\u00e9tecter d'\u00e9ventuelles hallucinations et ne conserver que les r\u00e9ponses qui conviennent \u00e0 vos besoins. Comme l'historique des \u00e9changes est utilis\u00e9 par l'assistant pour affiner le contexte , il est conseill\u00e9 de nettoyer r\u00e9guli\u00e8rement le chat en supprimant les requ\u00eates non pertinentes ou qui n'ont pas donn\u00e9 le(s) r\u00e9sultat(s) attendu(s). Le caract\u00e8re probabiliste des r\u00e9ponses de l'assistant pr\u00e9sente des inconv\u00e9nients et des avantages . D'un c\u00f4t\u00e9, la qualit\u00e9 des donn\u00e9es de test g\u00e9n\u00e9r\u00e9es n'est pas toujours garantie. Toutefois, cet aspect non d\u00e9terministe peut aussi conduire \u00e0 la d\u00e9couverte de nouvelles, voire meilleures, pratiques. Personnellement, lors d'une premi\u00e8re demande de g\u00e9n\u00e9ration de tests, l'annotation @TempDir , utilis\u00e9e pour les r\u00e9pertoires temporaires, a \u00e9t\u00e9 d\u00e9couverte. Malheureusement, ce fut la seule fois o\u00f9 l'assistant l'a utilis\u00e9e. Peut-\u00eatre avez-vous eu la chance d'obtenir des tests unitaires fonctionnels du premier coup, ou peut-\u00eatre pas \ud83d\ude09. Et vous, connaissiez-vous @TempDir avant cette exp\u00e9rience ? Votre assistant peut vous aider \u00e0 en savoir plus en posant la question suivante : Pourrais-tu m'en dire plus sur @TempDir ? La r\u00e9ponse de l'assistant sera probablement similaire \u00e0 la capture d'\u00e9cran ci-dessous :","title":"2. Tester la classe JavaFileParser"},{"location":"fr/4_ProjetExistantComplexe/#43c-aider-au-refactoring","text":"Maintenant que le comportement est couvert par des tests, vous pouvez envisager sereinement un petit refactoring. Pour cela, demandez \u00e0 l'assistant de vous proposer des am\u00e9liorations en utilisant les commandes suivantes : /fix (vous pouvez pr\u00e9ciser le nom de la m\u00e9thode si vous souhaitez rester focalis\u00e9 sur celle-ci) /simplify Par exemple, revenez sur la WordAnalyticsService , demandez : /fix glossaryCoverageRatio /simplify Faites de m\u00eame pour la JavaFileParser , demandez : /fix /simplify Dans les deux cas, l'assistant vous proposera des modifications, mais c'est \u00e0 vous de d\u00e9cider si vous souhaitez les int\u00e9grer dans votre code (le fameux libre arbitre ).","title":"4.3.c Aider au refactoring"},{"location":"fr/4_ProjetExistantComplexe/#43d-aider-a-la-revue-de-code","text":"M\u00eame sans avoir mis en place un harnais de tests, vous pouvez demander \u00e0 votre assistant de code de vous proposer des suggestions de refactoring sur des bouts de code plus ou moins volumineux. Revenez sur la classe Main du module cli , ouvrez le code de cette classe et portez votre attention sur la m\u00e9thode processPath , qui peut para\u00eetre un peu longue. Pour effectuer une rapide revue de code sur cette classe , demandez \u00e0 l'assistant : /fix /simplify Ces commandes devraient d\u00e9j\u00e0 vous donner des pistes pour am\u00e9liorer la lisibilit\u00e9 de processPath . Vous pouvez ensuite approfondir l'analyse en posant vos propres questions, celles que vous vous posez habituellement lors d'une revue de code : ` Y a-t-il des code smells dans ce bout de code ? Y a-t-il des principes SOLID non respect\u00e9s dans ce code ? Le code peut-il \u00eatre optimis\u00e9 en termes de performance ou de lisibilit\u00e9 ? La duplication de code est-elle pr\u00e9sente ? Y a-t-il des d\u00e9pendances cycliques ou des responsabilit\u00e9s mal d\u00e9finies ? [...] Lorsque vous \u00e9changez avec votre assistant des questions de qualit\u00e9 de code, celui-ci peut \u00e9galement vous sugg\u00e9rer d'explorer des aspects tels que la lisibilit\u00e9, la maintenabilit\u00e9 ou la modularit\u00e9 du code en vous proposant de lui poser les questions suivantes : How can I improve the readability of the selected code? How can I improve the maintainability of the selected code? How can I improve the modularity of the selected code? How can I refactor the code to improve modularity? What are some options for simplifying the code? M\u00eame si ces questions ne vous seront pas automatiquement propos\u00e9es par l'assistant au moment o\u00f9 vous le souhaiteriez, il est toujours utile de les garder en t\u00eate comme une bo\u00eete \u00e0 outils de prompts pour am\u00e9liorer la qualit\u00e9 de votre code \u00e0 tout moment.","title":"4.3.d Aider \u00e0 la revue de code"},{"location":"fr/4_ProjetExistantComplexe/#44-proposer-des-pistes-damelioration-sur-des-problematiques-sensibles","text":"Pour terminer ce tutoriel, il pourrait \u00eatre int\u00e9ressant de challenger votre assistant de code sur des probl\u00e9matiques sensibles, notamment celles dans lesquelles vous n'\u00eates pas expert. Prenons par exemple les questions de s\u00e9curit\u00e9 . Vous pourriez commencer avec un prompt comme : Comment pourrais-tu am\u00e9liorer la s\u00e9curit\u00e9 dans ce projet ? [\u2026] suivant la r\u00e9ponse obtenue, n'h\u00e9sitez pas \u00e0 approfondir certains points pas \u00e0 pas avec votre assistant. Votre assistant vous proposera probablement de continuer avec les questions suivantes : What are some best practices for securing a Java project? What are some common security vulnerabilities in Java projects? [\u2026] suivant la r\u00e9ponse obtenue, n'h\u00e9sitez pas \u00e0 approfondir certains points pas \u00e0 pas avec votre assistant, par exemple : Y a-t-il un risque d'exposition de donn\u00e9es sensibles (Sensitive Data Exposure) dans ce projet ? [\u2026] Vous aurez peut-\u00eatre aussi des questions plus basiques \u00e0 lui poser : Concr\u00e8tement, pourrais-tu me montrer o\u00f9 et comment mieux g\u00e9rer les exceptions dans ce projet ? [\u2026] Bien s\u00fbr, si vous n'\u00eates pas expert en s\u00e9curit\u00e9, il est recommand\u00e9 de consulter un sp\u00e9cialiste avant d'adopter les propositions de l'assistant de code. Comme nous l'avons souvent soulign\u00e9 dans ce tutoriel, cet outil est l\u00e0 pour vous assister, mais seule l'expertise humaine peut d\u00e9terminer si une suggestion de l'assistant est pertinente et doit \u00eatre int\u00e9gr\u00e9e dans l'application. Il est \u00e9galement essentiel de garder \u00e0 l'esprit que les outils d'IA g\u00e9n\u00e9rative sont uniquement des aides pour vous rendre plus productif et cr\u00e9atif. Ils ne sont pas \u00e0 l'abri des erreurs ou des hallucinations. Vous restez ma\u00eetre de votre travail, et la d\u00e9cision finale vous appartient . Si vous souhaitez en savoir plus sur le projet qui se cache derri\u00e8re le code utilis\u00e9 dans cette partie du tutoriel, vous pouvez consulter le d\u00e9p\u00f4t suivant : https://github.com/iblasquez/ubiquitous-langage-code-quality Acc\u00e9dez donc maintenant \u00e0 la partie suivante qui est : Liens utilis\u00e9s pour la r\u00e9daction du tutoriel ou retournez \u00e0 l' Accueil .","title":"4.4 Proposer des pistes d'am\u00e9lioration sur des probl\u00e9matiques sensibles"},{"location":"fr/Liens/","text":"Liens utilis\u00e9s pour la r\u00e9daction de ce tutoriel \u00b6 Documentation GitHub Copilot \u00b6 Documentation g\u00e9n\u00e9rale Installation de l'extension GitHub Copilot Copilot pour Eclipse Quelques conseils sur le prompt \u00b6 Prompt engineering pour GitHub Copilot Conseils et astuces pour utiliser GitHub Copilot dans votre IDE T\u00e2ches r\u00e9currentes (commandes slash) et agent de conversation \u00b6 Questions pour GitHub Copilot dans l'IDE Contexte de chat pour Copilot dans Visual Studio G\u00e9n\u00e9ration de documentation avec GitHub Copilot Examen des fonctionnalit\u00e9s d'assistance de l'extension GitHub Copilot Chat Tutoriels propos\u00e9s par Microsoft \u00b6 Acc\u00e9l\u00e9rer le d\u00e9veloppement d'applications avec GitHub Copilot Impl\u00e9menter des am\u00e9liorations de code avec GitHub Copilot Cr\u00e9er des tests unitaires avec GitHub Copilot Chat G\u00e9n\u00e9rer de la documentation avec GitHub Copilot Examen des fonctionnalit\u00e9s d'assistance IA de l'extension GitHub Copilot Chat Pattern matching dans GitHub Copilot Article de Martin Fowler \u00b6 Legacy Modernization meets GenAI Vid\u00e9os \u00b6 GitHub Copilot Top Features Explained De l'ignorance \u00e0 la d\u00e9pendance : Comment l'IA a chang\u00e9 ma fa\u00e7on de coder ? - Beno\u00eet Prioux Autres \u00b6 Copilot au-del\u00e0 des IDE Nouvelles fonctionnalit\u00e9s de GitHub Copilot dans Visual Studio 2022 Retournez \u00e0 l' Accueil","title":"Quelques liens utiles"},{"location":"fr/Liens/#liens-utilises-pour-la-redaction-de-ce-tutoriel","text":"","title":"Liens utilis\u00e9s pour la r\u00e9daction de ce tutoriel"},{"location":"fr/Liens/#documentation-github-copilot","text":"Documentation g\u00e9n\u00e9rale Installation de l'extension GitHub Copilot Copilot pour Eclipse","title":"Documentation GitHub Copilot"},{"location":"fr/Liens/#quelques-conseils-sur-le-prompt","text":"Prompt engineering pour GitHub Copilot Conseils et astuces pour utiliser GitHub Copilot dans votre IDE","title":"Quelques conseils sur le prompt"},{"location":"fr/Liens/#taches-recurrentes-commandes-slash-et-agent-de-conversation","text":"Questions pour GitHub Copilot dans l'IDE Contexte de chat pour Copilot dans Visual Studio G\u00e9n\u00e9ration de documentation avec GitHub Copilot Examen des fonctionnalit\u00e9s d'assistance de l'extension GitHub Copilot Chat","title":"T\u00e2ches r\u00e9currentes (commandes slash) et agent de conversation"},{"location":"fr/Liens/#tutoriels-proposes-par-microsoft","text":"Acc\u00e9l\u00e9rer le d\u00e9veloppement d'applications avec GitHub Copilot Impl\u00e9menter des am\u00e9liorations de code avec GitHub Copilot Cr\u00e9er des tests unitaires avec GitHub Copilot Chat G\u00e9n\u00e9rer de la documentation avec GitHub Copilot Examen des fonctionnalit\u00e9s d'assistance IA de l'extension GitHub Copilot Chat Pattern matching dans GitHub Copilot","title":"Tutoriels propos\u00e9s par Microsoft"},{"location":"fr/Liens/#article-de-martin-fowler","text":"Legacy Modernization meets GenAI","title":"Article de Martin Fowler"},{"location":"fr/Liens/#videos","text":"GitHub Copilot Top Features Explained De l'ignorance \u00e0 la d\u00e9pendance : Comment l'IA a chang\u00e9 ma fa\u00e7on de coder ? - Beno\u00eet Prioux","title":"Vid\u00e9os"},{"location":"fr/Liens/#autres","text":"Copilot au-del\u00e0 des IDE Nouvelles fonctionnalit\u00e9s de GitHub Copilot dans Visual Studio 2022 Retournez \u00e0 l' Accueil","title":"Autres"}]}